// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _IMAGE_HOT_PATCH_INFO {
 *     DWORD Version;
 *     DWORD Size;
 *     DWORD SequenceNumber;
 *     DWORD BaseImageList;
 *     DWORD BaseImageCount;
 *     DWORD BufferOffset;
 *     DWORD ExtraPatchSize;
 * }
 * }
 */
public class _IMAGE_HOT_PATCH_INFO {

    _IMAGE_HOT_PATCH_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("Version"),
        wgl_h.C_LONG.withName("Size"),
        wgl_h.C_LONG.withName("SequenceNumber"),
        wgl_h.C_LONG.withName("BaseImageList"),
        wgl_h.C_LONG.withName("BaseImageCount"),
        wgl_h.C_LONG.withName("BufferOffset"),
        wgl_h.C_LONG.withName("ExtraPatchSize")
    ).withName("_IMAGE_HOT_PATCH_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final OfInt Version$layout() {
        return Version$LAYOUT;
    }

    private static final long Version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final long Version$offset() {
        return Version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static int Version(MemorySegment struct) {
        return struct.get(Version$LAYOUT, Version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static void Version(MemorySegment struct, int fieldValue) {
        struct.set(Version$LAYOUT, Version$OFFSET, fieldValue);
    }

    private static final OfInt Size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final OfInt Size$layout() {
        return Size$LAYOUT;
    }

    private static final long Size$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final long Size$offset() {
        return Size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static int Size(MemorySegment struct) {
        return struct.get(Size$LAYOUT, Size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static void Size(MemorySegment struct, int fieldValue) {
        struct.set(Size$LAYOUT, Size$OFFSET, fieldValue);
    }

    private static final OfInt SequenceNumber$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SequenceNumber"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SequenceNumber
     * }
     */
    public static final OfInt SequenceNumber$layout() {
        return SequenceNumber$LAYOUT;
    }

    private static final long SequenceNumber$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SequenceNumber
     * }
     */
    public static final long SequenceNumber$offset() {
        return SequenceNumber$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SequenceNumber
     * }
     */
    public static int SequenceNumber(MemorySegment struct) {
        return struct.get(SequenceNumber$LAYOUT, SequenceNumber$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SequenceNumber
     * }
     */
    public static void SequenceNumber(MemorySegment struct, int fieldValue) {
        struct.set(SequenceNumber$LAYOUT, SequenceNumber$OFFSET, fieldValue);
    }

    private static final OfInt BaseImageList$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BaseImageList"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BaseImageList
     * }
     */
    public static final OfInt BaseImageList$layout() {
        return BaseImageList$LAYOUT;
    }

    private static final long BaseImageList$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BaseImageList
     * }
     */
    public static final long BaseImageList$offset() {
        return BaseImageList$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BaseImageList
     * }
     */
    public static int BaseImageList(MemorySegment struct) {
        return struct.get(BaseImageList$LAYOUT, BaseImageList$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BaseImageList
     * }
     */
    public static void BaseImageList(MemorySegment struct, int fieldValue) {
        struct.set(BaseImageList$LAYOUT, BaseImageList$OFFSET, fieldValue);
    }

    private static final OfInt BaseImageCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BaseImageCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BaseImageCount
     * }
     */
    public static final OfInt BaseImageCount$layout() {
        return BaseImageCount$LAYOUT;
    }

    private static final long BaseImageCount$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BaseImageCount
     * }
     */
    public static final long BaseImageCount$offset() {
        return BaseImageCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BaseImageCount
     * }
     */
    public static int BaseImageCount(MemorySegment struct) {
        return struct.get(BaseImageCount$LAYOUT, BaseImageCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BaseImageCount
     * }
     */
    public static void BaseImageCount(MemorySegment struct, int fieldValue) {
        struct.set(BaseImageCount$LAYOUT, BaseImageCount$OFFSET, fieldValue);
    }

    private static final OfInt BufferOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BufferOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BufferOffset
     * }
     */
    public static final OfInt BufferOffset$layout() {
        return BufferOffset$LAYOUT;
    }

    private static final long BufferOffset$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BufferOffset
     * }
     */
    public static final long BufferOffset$offset() {
        return BufferOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BufferOffset
     * }
     */
    public static int BufferOffset(MemorySegment struct) {
        return struct.get(BufferOffset$LAYOUT, BufferOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BufferOffset
     * }
     */
    public static void BufferOffset(MemorySegment struct, int fieldValue) {
        struct.set(BufferOffset$LAYOUT, BufferOffset$OFFSET, fieldValue);
    }

    private static final OfInt ExtraPatchSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ExtraPatchSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ExtraPatchSize
     * }
     */
    public static final OfInt ExtraPatchSize$layout() {
        return ExtraPatchSize$LAYOUT;
    }

    private static final long ExtraPatchSize$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ExtraPatchSize
     * }
     */
    public static final long ExtraPatchSize$offset() {
        return ExtraPatchSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ExtraPatchSize
     * }
     */
    public static int ExtraPatchSize(MemorySegment struct) {
        return struct.get(ExtraPatchSize$LAYOUT, ExtraPatchSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ExtraPatchSize
     * }
     */
    public static void ExtraPatchSize(MemorySegment struct, int fieldValue) {
        struct.set(ExtraPatchSize$LAYOUT, ExtraPatchSize$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

