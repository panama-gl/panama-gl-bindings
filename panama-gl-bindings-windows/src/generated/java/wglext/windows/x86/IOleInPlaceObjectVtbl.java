// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IOleInPlaceObjectVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetWindow"),
        Constants$root.C_POINTER$LAYOUT.withName("ContextSensitiveHelp"),
        Constants$root.C_POINTER$LAYOUT.withName("InPlaceDeactivate"),
        Constants$root.C_POINTER$LAYOUT.withName("UIDeactivate"),
        Constants$root.C_POINTER$LAYOUT.withName("SetObjectRects"),
        Constants$root.C_POINTER$LAYOUT.withName("ReactivateAndUndo")
    ).withName("IOleInPlaceObjectVtbl");
    public static MemoryLayout $LAYOUT() {
        return IOleInPlaceObjectVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceObjectVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IOleInPlaceObjectVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOleInPlaceObjectVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IOleInPlaceObjectVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceObjectVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceObjectVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceObjectVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceObjectVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceObjectVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IOleInPlaceObjectVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOleInPlaceObjectVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IOleInPlaceObjectVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceObjectVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceObjectVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceObjectVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceObjectVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceObjectVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IOleInPlaceObjectVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOleInPlaceObjectVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IOleInPlaceObjectVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceObjectVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceObjectVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceObjectVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceObjectVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor GetWindow$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetWindow$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceObjectVtbl.GetWindow$FUNC
    );
    public interface GetWindow {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetWindow fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetWindow.class, fi, IOleInPlaceObjectVtbl.GetWindow$FUNC, session);
        }
        static GetWindow ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOleInPlaceObjectVtbl.GetWindow$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetWindow$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetWindow"));
    public static VarHandle GetWindow$VH() {
        return IOleInPlaceObjectVtbl.GetWindow$VH;
    }
    public static MemoryAddress GetWindow$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceObjectVtbl.GetWindow$VH.get(seg);
    }
    public static void GetWindow$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceObjectVtbl.GetWindow$VH.set(seg, x);
    }
    public static MemoryAddress GetWindow$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceObjectVtbl.GetWindow$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetWindow$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceObjectVtbl.GetWindow$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetWindow GetWindow (MemorySegment segment, MemorySession session) {
        return GetWindow.ofAddress(GetWindow$get(segment), session);
    }
    static final FunctionDescriptor ContextSensitiveHelp$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ContextSensitiveHelp$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceObjectVtbl.ContextSensitiveHelp$FUNC
    );
    public interface ContextSensitiveHelp {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(ContextSensitiveHelp fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ContextSensitiveHelp.class, fi, IOleInPlaceObjectVtbl.ContextSensitiveHelp$FUNC, session);
        }
        static ContextSensitiveHelp ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)IOleInPlaceObjectVtbl.ContextSensitiveHelp$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ContextSensitiveHelp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ContextSensitiveHelp"));
    public static VarHandle ContextSensitiveHelp$VH() {
        return IOleInPlaceObjectVtbl.ContextSensitiveHelp$VH;
    }
    public static MemoryAddress ContextSensitiveHelp$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceObjectVtbl.ContextSensitiveHelp$VH.get(seg);
    }
    public static void ContextSensitiveHelp$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceObjectVtbl.ContextSensitiveHelp$VH.set(seg, x);
    }
    public static MemoryAddress ContextSensitiveHelp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceObjectVtbl.ContextSensitiveHelp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ContextSensitiveHelp$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceObjectVtbl.ContextSensitiveHelp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ContextSensitiveHelp ContextSensitiveHelp (MemorySegment segment, MemorySession session) {
        return ContextSensitiveHelp.ofAddress(ContextSensitiveHelp$get(segment), session);
    }
    static final FunctionDescriptor InPlaceDeactivate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle InPlaceDeactivate$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceObjectVtbl.InPlaceDeactivate$FUNC
    );
    public interface InPlaceDeactivate {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(InPlaceDeactivate fi, MemorySession session) {
            return RuntimeHelper.upcallStub(InPlaceDeactivate.class, fi, IOleInPlaceObjectVtbl.InPlaceDeactivate$FUNC, session);
        }
        static InPlaceDeactivate ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOleInPlaceObjectVtbl.InPlaceDeactivate$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle InPlaceDeactivate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("InPlaceDeactivate"));
    public static VarHandle InPlaceDeactivate$VH() {
        return IOleInPlaceObjectVtbl.InPlaceDeactivate$VH;
    }
    public static MemoryAddress InPlaceDeactivate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceObjectVtbl.InPlaceDeactivate$VH.get(seg);
    }
    public static void InPlaceDeactivate$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceObjectVtbl.InPlaceDeactivate$VH.set(seg, x);
    }
    public static MemoryAddress InPlaceDeactivate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceObjectVtbl.InPlaceDeactivate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void InPlaceDeactivate$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceObjectVtbl.InPlaceDeactivate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static InPlaceDeactivate InPlaceDeactivate (MemorySegment segment, MemorySession session) {
        return InPlaceDeactivate.ofAddress(InPlaceDeactivate$get(segment), session);
    }
    static final FunctionDescriptor UIDeactivate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle UIDeactivate$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceObjectVtbl.UIDeactivate$FUNC
    );
    public interface UIDeactivate {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(UIDeactivate fi, MemorySession session) {
            return RuntimeHelper.upcallStub(UIDeactivate.class, fi, IOleInPlaceObjectVtbl.UIDeactivate$FUNC, session);
        }
        static UIDeactivate ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOleInPlaceObjectVtbl.UIDeactivate$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle UIDeactivate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UIDeactivate"));
    public static VarHandle UIDeactivate$VH() {
        return IOleInPlaceObjectVtbl.UIDeactivate$VH;
    }
    public static MemoryAddress UIDeactivate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceObjectVtbl.UIDeactivate$VH.get(seg);
    }
    public static void UIDeactivate$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceObjectVtbl.UIDeactivate$VH.set(seg, x);
    }
    public static MemoryAddress UIDeactivate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceObjectVtbl.UIDeactivate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UIDeactivate$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceObjectVtbl.UIDeactivate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static UIDeactivate UIDeactivate (MemorySegment segment, MemorySession session) {
        return UIDeactivate.ofAddress(UIDeactivate$get(segment), session);
    }
    static final FunctionDescriptor SetObjectRects$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetObjectRects$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceObjectVtbl.SetObjectRects$FUNC
    );
    public interface SetObjectRects {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(SetObjectRects fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetObjectRects.class, fi, IOleInPlaceObjectVtbl.SetObjectRects$FUNC, session);
        }
        static SetObjectRects ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOleInPlaceObjectVtbl.SetObjectRects$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetObjectRects$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetObjectRects"));
    public static VarHandle SetObjectRects$VH() {
        return IOleInPlaceObjectVtbl.SetObjectRects$VH;
    }
    public static MemoryAddress SetObjectRects$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceObjectVtbl.SetObjectRects$VH.get(seg);
    }
    public static void SetObjectRects$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceObjectVtbl.SetObjectRects$VH.set(seg, x);
    }
    public static MemoryAddress SetObjectRects$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceObjectVtbl.SetObjectRects$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetObjectRects$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceObjectVtbl.SetObjectRects$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetObjectRects SetObjectRects (MemorySegment segment, MemorySession session) {
        return SetObjectRects.ofAddress(SetObjectRects$get(segment), session);
    }
    static final FunctionDescriptor ReactivateAndUndo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReactivateAndUndo$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceObjectVtbl.ReactivateAndUndo$FUNC
    );
    public interface ReactivateAndUndo {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(ReactivateAndUndo fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ReactivateAndUndo.class, fi, IOleInPlaceObjectVtbl.ReactivateAndUndo$FUNC, session);
        }
        static ReactivateAndUndo ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOleInPlaceObjectVtbl.ReactivateAndUndo$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReactivateAndUndo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReactivateAndUndo"));
    public static VarHandle ReactivateAndUndo$VH() {
        return IOleInPlaceObjectVtbl.ReactivateAndUndo$VH;
    }
    public static MemoryAddress ReactivateAndUndo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceObjectVtbl.ReactivateAndUndo$VH.get(seg);
    }
    public static void ReactivateAndUndo$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceObjectVtbl.ReactivateAndUndo$VH.set(seg, x);
    }
    public static MemoryAddress ReactivateAndUndo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceObjectVtbl.ReactivateAndUndo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReactivateAndUndo$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceObjectVtbl.ReactivateAndUndo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReactivateAndUndo ReactivateAndUndo (MemorySegment segment, MemorySession session) {
        return ReactivateAndUndo.ofAddress(ReactivateAndUndo$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


