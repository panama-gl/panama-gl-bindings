// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _FILE_LAYOUT_NAME_ENTRY {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("NextNameOffset"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("ParentFileReferenceNumber"),
        Constants$root.C_LONG$LAYOUT.withName("FileNameLength"),
        Constants$root.C_LONG$LAYOUT.withName("Reserved"),
        MemoryLayout.sequenceLayout(1, Constants$root.C_SHORT$LAYOUT).withName("FileName"),
        MemoryLayout.paddingLayout(48)
    ).withName("_FILE_LAYOUT_NAME_ENTRY");
    public static MemoryLayout $LAYOUT() {
        return _FILE_LAYOUT_NAME_ENTRY.$struct$LAYOUT;
    }
    static final VarHandle NextNameOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NextNameOffset"));
    public static VarHandle NextNameOffset$VH() {
        return _FILE_LAYOUT_NAME_ENTRY.NextNameOffset$VH;
    }
    public static int NextNameOffset$get(MemorySegment seg) {
        return (int)_FILE_LAYOUT_NAME_ENTRY.NextNameOffset$VH.get(seg);
    }
    public static void NextNameOffset$set( MemorySegment seg, int x) {
        _FILE_LAYOUT_NAME_ENTRY.NextNameOffset$VH.set(seg, x);
    }
    public static int NextNameOffset$get(MemorySegment seg, long index) {
        return (int)_FILE_LAYOUT_NAME_ENTRY.NextNameOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NextNameOffset$set(MemorySegment seg, long index, int x) {
        _FILE_LAYOUT_NAME_ENTRY.NextNameOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _FILE_LAYOUT_NAME_ENTRY.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)_FILE_LAYOUT_NAME_ENTRY.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        _FILE_LAYOUT_NAME_ENTRY.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_FILE_LAYOUT_NAME_ENTRY.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _FILE_LAYOUT_NAME_ENTRY.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ParentFileReferenceNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ParentFileReferenceNumber"));
    public static VarHandle ParentFileReferenceNumber$VH() {
        return _FILE_LAYOUT_NAME_ENTRY.ParentFileReferenceNumber$VH;
    }
    public static long ParentFileReferenceNumber$get(MemorySegment seg) {
        return (long)_FILE_LAYOUT_NAME_ENTRY.ParentFileReferenceNumber$VH.get(seg);
    }
    public static void ParentFileReferenceNumber$set( MemorySegment seg, long x) {
        _FILE_LAYOUT_NAME_ENTRY.ParentFileReferenceNumber$VH.set(seg, x);
    }
    public static long ParentFileReferenceNumber$get(MemorySegment seg, long index) {
        return (long)_FILE_LAYOUT_NAME_ENTRY.ParentFileReferenceNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ParentFileReferenceNumber$set(MemorySegment seg, long index, long x) {
        _FILE_LAYOUT_NAME_ENTRY.ParentFileReferenceNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FileNameLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FileNameLength"));
    public static VarHandle FileNameLength$VH() {
        return _FILE_LAYOUT_NAME_ENTRY.FileNameLength$VH;
    }
    public static int FileNameLength$get(MemorySegment seg) {
        return (int)_FILE_LAYOUT_NAME_ENTRY.FileNameLength$VH.get(seg);
    }
    public static void FileNameLength$set( MemorySegment seg, int x) {
        _FILE_LAYOUT_NAME_ENTRY.FileNameLength$VH.set(seg, x);
    }
    public static int FileNameLength$get(MemorySegment seg, long index) {
        return (int)_FILE_LAYOUT_NAME_ENTRY.FileNameLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FileNameLength$set(MemorySegment seg, long index, int x) {
        _FILE_LAYOUT_NAME_ENTRY.FileNameLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved"));
    public static VarHandle Reserved$VH() {
        return _FILE_LAYOUT_NAME_ENTRY.Reserved$VH;
    }
    public static int Reserved$get(MemorySegment seg) {
        return (int)_FILE_LAYOUT_NAME_ENTRY.Reserved$VH.get(seg);
    }
    public static void Reserved$set( MemorySegment seg, int x) {
        _FILE_LAYOUT_NAME_ENTRY.Reserved$VH.set(seg, x);
    }
    public static int Reserved$get(MemorySegment seg, long index) {
        return (int)_FILE_LAYOUT_NAME_ENTRY.Reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved$set(MemorySegment seg, long index, int x) {
        _FILE_LAYOUT_NAME_ENTRY.Reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment FileName$slice(MemorySegment seg) {
        return seg.asSlice(24, 2);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


