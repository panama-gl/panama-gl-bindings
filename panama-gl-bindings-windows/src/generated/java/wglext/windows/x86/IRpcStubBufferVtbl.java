// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IRpcStubBufferVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("Connect"),
        Constants$root.C_POINTER$LAYOUT.withName("Disconnect"),
        Constants$root.C_POINTER$LAYOUT.withName("Invoke"),
        Constants$root.C_POINTER$LAYOUT.withName("IsIIDSupported"),
        Constants$root.C_POINTER$LAYOUT.withName("CountRefs"),
        Constants$root.C_POINTER$LAYOUT.withName("DebugServerQueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("DebugServerRelease")
    ).withName("IRpcStubBufferVtbl");
    public static MemoryLayout $LAYOUT() {
        return IRpcStubBufferVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IRpcStubBufferVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IRpcStubBufferVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IRpcStubBufferVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IRpcStubBufferVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IRpcStubBufferVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IRpcStubBufferVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IRpcStubBufferVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IRpcStubBufferVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IRpcStubBufferVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IRpcStubBufferVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IRpcStubBufferVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IRpcStubBufferVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor Connect$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Connect$MH = RuntimeHelper.downcallHandle(
        IRpcStubBufferVtbl.Connect$FUNC
    );
    public interface Connect {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(Connect fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Connect.class, fi, IRpcStubBufferVtbl.Connect$FUNC, session);
        }
        static Connect ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IRpcStubBufferVtbl.Connect$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Connect$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Connect"));
    public static VarHandle Connect$VH() {
        return IRpcStubBufferVtbl.Connect$VH;
    }
    public static MemoryAddress Connect$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.Connect$VH.get(seg);
    }
    public static void Connect$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.Connect$VH.set(seg, x);
    }
    public static MemoryAddress Connect$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.Connect$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Connect$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.Connect$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Connect Connect (MemorySegment segment, MemorySession session) {
        return Connect.ofAddress(Connect$get(segment), session);
    }
    static final FunctionDescriptor Disconnect$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Disconnect$MH = RuntimeHelper.downcallHandle(
        IRpcStubBufferVtbl.Disconnect$FUNC
    );
    public interface Disconnect {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Disconnect fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Disconnect.class, fi, IRpcStubBufferVtbl.Disconnect$FUNC, session);
        }
        static Disconnect ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    IRpcStubBufferVtbl.Disconnect$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Disconnect$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Disconnect"));
    public static VarHandle Disconnect$VH() {
        return IRpcStubBufferVtbl.Disconnect$VH;
    }
    public static MemoryAddress Disconnect$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.Disconnect$VH.get(seg);
    }
    public static void Disconnect$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.Disconnect$VH.set(seg, x);
    }
    public static MemoryAddress Disconnect$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.Disconnect$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Disconnect$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.Disconnect$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Disconnect Disconnect (MemorySegment segment, MemorySession session) {
        return Disconnect.ofAddress(Disconnect$get(segment), session);
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invoke$MH = RuntimeHelper.downcallHandle(
        IRpcStubBufferVtbl.Invoke$FUNC
    );
    public interface Invoke {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(Invoke fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IRpcStubBufferVtbl.Invoke$FUNC, session);
        }
        static Invoke ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IRpcStubBufferVtbl.Invoke$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Invoke"));
    public static VarHandle Invoke$VH() {
        return IRpcStubBufferVtbl.Invoke$VH;
    }
    public static MemoryAddress Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.Invoke$VH.get(seg);
    }
    public static void Invoke$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.Invoke$VH.set(seg, x);
    }
    public static MemoryAddress Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke (MemorySegment segment, MemorySession session) {
        return Invoke.ofAddress(Invoke$get(segment), session);
    }
    static final FunctionDescriptor IsIIDSupported$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsIIDSupported$MH = RuntimeHelper.downcallHandle(
        IRpcStubBufferVtbl.IsIIDSupported$FUNC
    );
    public interface IsIIDSupported {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(IsIIDSupported fi, MemorySession session) {
            return RuntimeHelper.upcallStub(IsIIDSupported.class, fi, IRpcStubBufferVtbl.IsIIDSupported$FUNC, session);
        }
        static IsIIDSupported ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.IsIIDSupported$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsIIDSupported$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IsIIDSupported"));
    public static VarHandle IsIIDSupported$VH() {
        return IRpcStubBufferVtbl.IsIIDSupported$VH;
    }
    public static MemoryAddress IsIIDSupported$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.IsIIDSupported$VH.get(seg);
    }
    public static void IsIIDSupported$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.IsIIDSupported$VH.set(seg, x);
    }
    public static MemoryAddress IsIIDSupported$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.IsIIDSupported$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsIIDSupported$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.IsIIDSupported$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsIIDSupported IsIIDSupported (MemorySegment segment, MemorySession session) {
        return IsIIDSupported.ofAddress(IsIIDSupported$get(segment), session);
    }
    static final FunctionDescriptor CountRefs$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CountRefs$MH = RuntimeHelper.downcallHandle(
        IRpcStubBufferVtbl.CountRefs$FUNC
    );
    public interface CountRefs {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(CountRefs fi, MemorySession session) {
            return RuntimeHelper.upcallStub(CountRefs.class, fi, IRpcStubBufferVtbl.CountRefs$FUNC, session);
        }
        static CountRefs ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IRpcStubBufferVtbl.CountRefs$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CountRefs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CountRefs"));
    public static VarHandle CountRefs$VH() {
        return IRpcStubBufferVtbl.CountRefs$VH;
    }
    public static MemoryAddress CountRefs$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.CountRefs$VH.get(seg);
    }
    public static void CountRefs$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.CountRefs$VH.set(seg, x);
    }
    public static MemoryAddress CountRefs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.CountRefs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CountRefs$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.CountRefs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CountRefs CountRefs (MemorySegment segment, MemorySession session) {
        return CountRefs.ofAddress(CountRefs$get(segment), session);
    }
    static final FunctionDescriptor DebugServerQueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DebugServerQueryInterface$MH = RuntimeHelper.downcallHandle(
        IRpcStubBufferVtbl.DebugServerQueryInterface$FUNC
    );
    public interface DebugServerQueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(DebugServerQueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(DebugServerQueryInterface.class, fi, IRpcStubBufferVtbl.DebugServerQueryInterface$FUNC, session);
        }
        static DebugServerQueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IRpcStubBufferVtbl.DebugServerQueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DebugServerQueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DebugServerQueryInterface"));
    public static VarHandle DebugServerQueryInterface$VH() {
        return IRpcStubBufferVtbl.DebugServerQueryInterface$VH;
    }
    public static MemoryAddress DebugServerQueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.DebugServerQueryInterface$VH.get(seg);
    }
    public static void DebugServerQueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.DebugServerQueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress DebugServerQueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.DebugServerQueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DebugServerQueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.DebugServerQueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DebugServerQueryInterface DebugServerQueryInterface (MemorySegment segment, MemorySession session) {
        return DebugServerQueryInterface.ofAddress(DebugServerQueryInterface$get(segment), session);
    }
    static final FunctionDescriptor DebugServerRelease$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DebugServerRelease$MH = RuntimeHelper.downcallHandle(
        IRpcStubBufferVtbl.DebugServerRelease$FUNC
    );
    public interface DebugServerRelease {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(DebugServerRelease fi, MemorySession session) {
            return RuntimeHelper.upcallStub(DebugServerRelease.class, fi, IRpcStubBufferVtbl.DebugServerRelease$FUNC, session);
        }
        static DebugServerRelease ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    IRpcStubBufferVtbl.DebugServerRelease$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DebugServerRelease$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DebugServerRelease"));
    public static VarHandle DebugServerRelease$VH() {
        return IRpcStubBufferVtbl.DebugServerRelease$VH;
    }
    public static MemoryAddress DebugServerRelease$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.DebugServerRelease$VH.get(seg);
    }
    public static void DebugServerRelease$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.DebugServerRelease$VH.set(seg, x);
    }
    public static MemoryAddress DebugServerRelease$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRpcStubBufferVtbl.DebugServerRelease$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DebugServerRelease$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.DebugServerRelease$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DebugServerRelease DebugServerRelease (MemorySegment segment, MemorySession session) {
        return DebugServerRelease.ofAddress(DebugServerRelease$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


