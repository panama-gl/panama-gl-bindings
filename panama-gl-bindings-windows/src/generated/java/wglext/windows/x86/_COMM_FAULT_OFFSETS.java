// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _COMM_FAULT_OFFSETS {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("CommOffset"),
        Constants$root.C_SHORT$LAYOUT.withName("FaultOffset")
    ).withName("_COMM_FAULT_OFFSETS");
    public static MemoryLayout $LAYOUT() {
        return _COMM_FAULT_OFFSETS.$struct$LAYOUT;
    }
    static final VarHandle CommOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CommOffset"));
    public static VarHandle CommOffset$VH() {
        return _COMM_FAULT_OFFSETS.CommOffset$VH;
    }
    public static short CommOffset$get(MemorySegment seg) {
        return (short)_COMM_FAULT_OFFSETS.CommOffset$VH.get(seg);
    }
    public static void CommOffset$set( MemorySegment seg, short x) {
        _COMM_FAULT_OFFSETS.CommOffset$VH.set(seg, x);
    }
    public static short CommOffset$get(MemorySegment seg, long index) {
        return (short)_COMM_FAULT_OFFSETS.CommOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CommOffset$set(MemorySegment seg, long index, short x) {
        _COMM_FAULT_OFFSETS.CommOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FaultOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FaultOffset"));
    public static VarHandle FaultOffset$VH() {
        return _COMM_FAULT_OFFSETS.FaultOffset$VH;
    }
    public static short FaultOffset$get(MemorySegment seg) {
        return (short)_COMM_FAULT_OFFSETS.FaultOffset$VH.get(seg);
    }
    public static void FaultOffset$set( MemorySegment seg, short x) {
        _COMM_FAULT_OFFSETS.FaultOffset$VH.set(seg, x);
    }
    public static short FaultOffset$get(MemorySegment seg, long index) {
        return (short)_COMM_FAULT_OFFSETS.FaultOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FaultOffset$set(MemorySegment seg, long index, short x) {
        _COMM_FAULT_OFFSETS.FaultOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


