// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _FLAG_STGMEDIUM {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("ContextFlags"),
        Constants$root.C_LONG$LAYOUT.withName("fPassOwnership"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("tymed"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.unionLayout(
                Constants$root.C_POINTER$LAYOUT.withName("hBitmap"),
                Constants$root.C_POINTER$LAYOUT.withName("hMetaFilePict"),
                Constants$root.C_POINTER$LAYOUT.withName("hEnhMetaFile"),
                Constants$root.C_POINTER$LAYOUT.withName("hGlobal"),
                Constants$root.C_POINTER$LAYOUT.withName("lpszFileName"),
                Constants$root.C_POINTER$LAYOUT.withName("pstm"),
                Constants$root.C_POINTER$LAYOUT.withName("pstg")
            ).withName("$anon$0"),
            Constants$root.C_POINTER$LAYOUT.withName("pUnkForRelease")
        ).withName("Stgmed")
    ).withName("_FLAG_STGMEDIUM");
    public static MemoryLayout $LAYOUT() {
        return _FLAG_STGMEDIUM.$struct$LAYOUT;
    }
    static final VarHandle ContextFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ContextFlags"));
    public static VarHandle ContextFlags$VH() {
        return _FLAG_STGMEDIUM.ContextFlags$VH;
    }
    public static int ContextFlags$get(MemorySegment seg) {
        return (int)_FLAG_STGMEDIUM.ContextFlags$VH.get(seg);
    }
    public static void ContextFlags$set( MemorySegment seg, int x) {
        _FLAG_STGMEDIUM.ContextFlags$VH.set(seg, x);
    }
    public static int ContextFlags$get(MemorySegment seg, long index) {
        return (int)_FLAG_STGMEDIUM.ContextFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ContextFlags$set(MemorySegment seg, long index, int x) {
        _FLAG_STGMEDIUM.ContextFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fPassOwnership$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fPassOwnership"));
    public static VarHandle fPassOwnership$VH() {
        return _FLAG_STGMEDIUM.fPassOwnership$VH;
    }
    public static int fPassOwnership$get(MemorySegment seg) {
        return (int)_FLAG_STGMEDIUM.fPassOwnership$VH.get(seg);
    }
    public static void fPassOwnership$set( MemorySegment seg, int x) {
        _FLAG_STGMEDIUM.fPassOwnership$VH.set(seg, x);
    }
    public static int fPassOwnership$get(MemorySegment seg, long index) {
        return (int)_FLAG_STGMEDIUM.fPassOwnership$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fPassOwnership$set(MemorySegment seg, long index, int x) {
        _FLAG_STGMEDIUM.fPassOwnership$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Stgmed$slice(MemorySegment seg) {
        return seg.asSlice(8, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


