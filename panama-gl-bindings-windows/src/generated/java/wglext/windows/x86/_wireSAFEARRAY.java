// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _wireSAFEARRAY {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("cDims"),
        Constants$root.C_SHORT$LAYOUT.withName("fFeatures"),
        Constants$root.C_LONG$LAYOUT.withName("cbElements"),
        Constants$root.C_LONG$LAYOUT.withName("cLocks"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("sfType"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("Size"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_POINTER$LAYOUT.withName("aBstr")
                ).withName("BstrStr"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("Size"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_POINTER$LAYOUT.withName("apUnknown")
                ).withName("UnknownStr"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("Size"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_POINTER$LAYOUT.withName("apDispatch")
                ).withName("DispatchStr"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("Size"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_POINTER$LAYOUT.withName("aVariant")
                ).withName("VariantStr"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("Size"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_POINTER$LAYOUT.withName("aRecord")
                ).withName("RecordStr"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("Size"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_POINTER$LAYOUT.withName("apUnknown"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("Data1"),
                        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
                        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
                        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
                    ).withName("iid")
                ).withName("HaveIidStr"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("clSize"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_POINTER$LAYOUT.withName("pData")
                ).withName("ByteStr"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("clSize"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_POINTER$LAYOUT.withName("pData")
                ).withName("WordStr"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("clSize"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_POINTER$LAYOUT.withName("pData")
                ).withName("LongStr"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("clSize"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_POINTER$LAYOUT.withName("pData")
                ).withName("HyperStr")
            ).withName("u")
        ).withName("uArrayStructs"),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("cElements"),
            Constants$root.C_LONG$LAYOUT.withName("lLbound")
        ).withName("tagSAFEARRAYBOUND")).withName("rgsabound")
    ).withName("_wireSAFEARRAY");
    public static MemoryLayout $LAYOUT() {
        return _wireSAFEARRAY.$struct$LAYOUT;
    }
    static final VarHandle cDims$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cDims"));
    public static VarHandle cDims$VH() {
        return _wireSAFEARRAY.cDims$VH;
    }
    public static short cDims$get(MemorySegment seg) {
        return (short)_wireSAFEARRAY.cDims$VH.get(seg);
    }
    public static void cDims$set( MemorySegment seg, short x) {
        _wireSAFEARRAY.cDims$VH.set(seg, x);
    }
    public static short cDims$get(MemorySegment seg, long index) {
        return (short)_wireSAFEARRAY.cDims$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cDims$set(MemorySegment seg, long index, short x) {
        _wireSAFEARRAY.cDims$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fFeatures$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fFeatures"));
    public static VarHandle fFeatures$VH() {
        return _wireSAFEARRAY.fFeatures$VH;
    }
    public static short fFeatures$get(MemorySegment seg) {
        return (short)_wireSAFEARRAY.fFeatures$VH.get(seg);
    }
    public static void fFeatures$set( MemorySegment seg, short x) {
        _wireSAFEARRAY.fFeatures$VH.set(seg, x);
    }
    public static short fFeatures$get(MemorySegment seg, long index) {
        return (short)_wireSAFEARRAY.fFeatures$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fFeatures$set(MemorySegment seg, long index, short x) {
        _wireSAFEARRAY.fFeatures$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbElements$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbElements"));
    public static VarHandle cbElements$VH() {
        return _wireSAFEARRAY.cbElements$VH;
    }
    public static int cbElements$get(MemorySegment seg) {
        return (int)_wireSAFEARRAY.cbElements$VH.get(seg);
    }
    public static void cbElements$set( MemorySegment seg, int x) {
        _wireSAFEARRAY.cbElements$VH.set(seg, x);
    }
    public static int cbElements$get(MemorySegment seg, long index) {
        return (int)_wireSAFEARRAY.cbElements$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbElements$set(MemorySegment seg, long index, int x) {
        _wireSAFEARRAY.cbElements$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cLocks$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cLocks"));
    public static VarHandle cLocks$VH() {
        return _wireSAFEARRAY.cLocks$VH;
    }
    public static int cLocks$get(MemorySegment seg) {
        return (int)_wireSAFEARRAY.cLocks$VH.get(seg);
    }
    public static void cLocks$set( MemorySegment seg, int x) {
        _wireSAFEARRAY.cLocks$VH.set(seg, x);
    }
    public static int cLocks$get(MemorySegment seg, long index) {
        return (int)_wireSAFEARRAY.cLocks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cLocks$set(MemorySegment seg, long index, int x) {
        _wireSAFEARRAY.cLocks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment uArrayStructs$slice(MemorySegment seg) {
        return seg.asSlice(16, 40);
    }
    public static MemorySegment rgsabound$slice(MemorySegment seg) {
        return seg.asSlice(56, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


