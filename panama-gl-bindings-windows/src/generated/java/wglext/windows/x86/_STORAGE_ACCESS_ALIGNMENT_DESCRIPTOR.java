// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("BytesPerCacheLine"),
        Constants$root.C_LONG$LAYOUT.withName("BytesOffsetForCacheAlignment"),
        Constants$root.C_LONG$LAYOUT.withName("BytesPerLogicalSector"),
        Constants$root.C_LONG$LAYOUT.withName("BytesPerPhysicalSector"),
        Constants$root.C_LONG$LAYOUT.withName("BytesOffsetForSectorAlignment")
    ).withName("_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.Size$VH;
    }
    public static int Size$get(MemorySegment seg) {
        return (int)_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, int x) {
        _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BytesPerCacheLine$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BytesPerCacheLine"));
    public static VarHandle BytesPerCacheLine$VH() {
        return _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesPerCacheLine$VH;
    }
    public static int BytesPerCacheLine$get(MemorySegment seg) {
        return (int)_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesPerCacheLine$VH.get(seg);
    }
    public static void BytesPerCacheLine$set( MemorySegment seg, int x) {
        _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesPerCacheLine$VH.set(seg, x);
    }
    public static int BytesPerCacheLine$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesPerCacheLine$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesPerCacheLine$set(MemorySegment seg, long index, int x) {
        _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesPerCacheLine$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BytesOffsetForCacheAlignment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BytesOffsetForCacheAlignment"));
    public static VarHandle BytesOffsetForCacheAlignment$VH() {
        return _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesOffsetForCacheAlignment$VH;
    }
    public static int BytesOffsetForCacheAlignment$get(MemorySegment seg) {
        return (int)_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesOffsetForCacheAlignment$VH.get(seg);
    }
    public static void BytesOffsetForCacheAlignment$set( MemorySegment seg, int x) {
        _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesOffsetForCacheAlignment$VH.set(seg, x);
    }
    public static int BytesOffsetForCacheAlignment$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesOffsetForCacheAlignment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesOffsetForCacheAlignment$set(MemorySegment seg, long index, int x) {
        _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesOffsetForCacheAlignment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BytesPerLogicalSector$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BytesPerLogicalSector"));
    public static VarHandle BytesPerLogicalSector$VH() {
        return _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesPerLogicalSector$VH;
    }
    public static int BytesPerLogicalSector$get(MemorySegment seg) {
        return (int)_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesPerLogicalSector$VH.get(seg);
    }
    public static void BytesPerLogicalSector$set( MemorySegment seg, int x) {
        _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesPerLogicalSector$VH.set(seg, x);
    }
    public static int BytesPerLogicalSector$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesPerLogicalSector$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesPerLogicalSector$set(MemorySegment seg, long index, int x) {
        _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesPerLogicalSector$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BytesPerPhysicalSector$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BytesPerPhysicalSector"));
    public static VarHandle BytesPerPhysicalSector$VH() {
        return _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesPerPhysicalSector$VH;
    }
    public static int BytesPerPhysicalSector$get(MemorySegment seg) {
        return (int)_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesPerPhysicalSector$VH.get(seg);
    }
    public static void BytesPerPhysicalSector$set( MemorySegment seg, int x) {
        _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesPerPhysicalSector$VH.set(seg, x);
    }
    public static int BytesPerPhysicalSector$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesPerPhysicalSector$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesPerPhysicalSector$set(MemorySegment seg, long index, int x) {
        _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesPerPhysicalSector$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BytesOffsetForSectorAlignment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BytesOffsetForSectorAlignment"));
    public static VarHandle BytesOffsetForSectorAlignment$VH() {
        return _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesOffsetForSectorAlignment$VH;
    }
    public static int BytesOffsetForSectorAlignment$get(MemorySegment seg) {
        return (int)_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesOffsetForSectorAlignment$VH.get(seg);
    }
    public static void BytesOffsetForSectorAlignment$set( MemorySegment seg, int x) {
        _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesOffsetForSectorAlignment$VH.set(seg, x);
    }
    public static int BytesOffsetForSectorAlignment$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesOffsetForSectorAlignment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesOffsetForSectorAlignment$set(MemorySegment seg, long index, int x) {
        _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR.BytesOffsetForSectorAlignment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


