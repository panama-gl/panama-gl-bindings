// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _STORAGE_ZONED_DEVICE_DESCRIPTOR {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("DeviceType"),
        Constants$root.C_LONG$LAYOUT.withName("ZoneCount"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("MaxOpenZoneCount"),
                Constants$root.C_CHAR$LAYOUT.withName("UnrestrictedRead"),
                MemoryLayout.sequenceLayout(3, Constants$root.C_CHAR$LAYOUT).withName("Reserved")
            ).withName("SequentialRequiredZone"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("OptimalOpenZoneCount"),
                Constants$root.C_LONG$LAYOUT.withName("Reserved")
            ).withName("SequentialPreferredZone")
        ).withName("ZoneAttributes"),
        Constants$root.C_LONG$LAYOUT.withName("ZoneGroupCount"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("ZoneCount"),
            Constants$root.C_LONG$LAYOUT.withName("ZoneType"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("ZoneSize")
        ).withName("_STORAGE_ZONE_GROUP")).withName("ZoneGroup")
    ).withName("_STORAGE_ZONED_DEVICE_DESCRIPTOR");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_ZONED_DEVICE_DESCRIPTOR.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _STORAGE_ZONED_DEVICE_DESCRIPTOR.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_STORAGE_ZONED_DEVICE_DESCRIPTOR.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _STORAGE_ZONED_DEVICE_DESCRIPTOR.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ZONED_DEVICE_DESCRIPTOR.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _STORAGE_ZONED_DEVICE_DESCRIPTOR.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _STORAGE_ZONED_DEVICE_DESCRIPTOR.Size$VH;
    }
    public static int Size$get(MemorySegment seg) {
        return (int)_STORAGE_ZONED_DEVICE_DESCRIPTOR.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, int x) {
        _STORAGE_ZONED_DEVICE_DESCRIPTOR.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ZONED_DEVICE_DESCRIPTOR.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _STORAGE_ZONED_DEVICE_DESCRIPTOR.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DeviceType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeviceType"));
    public static VarHandle DeviceType$VH() {
        return _STORAGE_ZONED_DEVICE_DESCRIPTOR.DeviceType$VH;
    }
    public static int DeviceType$get(MemorySegment seg) {
        return (int)_STORAGE_ZONED_DEVICE_DESCRIPTOR.DeviceType$VH.get(seg);
    }
    public static void DeviceType$set( MemorySegment seg, int x) {
        _STORAGE_ZONED_DEVICE_DESCRIPTOR.DeviceType$VH.set(seg, x);
    }
    public static int DeviceType$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ZONED_DEVICE_DESCRIPTOR.DeviceType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceType$set(MemorySegment seg, long index, int x) {
        _STORAGE_ZONED_DEVICE_DESCRIPTOR.DeviceType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ZoneCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ZoneCount"));
    public static VarHandle ZoneCount$VH() {
        return _STORAGE_ZONED_DEVICE_DESCRIPTOR.ZoneCount$VH;
    }
    public static int ZoneCount$get(MemorySegment seg) {
        return (int)_STORAGE_ZONED_DEVICE_DESCRIPTOR.ZoneCount$VH.get(seg);
    }
    public static void ZoneCount$set( MemorySegment seg, int x) {
        _STORAGE_ZONED_DEVICE_DESCRIPTOR.ZoneCount$VH.set(seg, x);
    }
    public static int ZoneCount$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ZONED_DEVICE_DESCRIPTOR.ZoneCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ZoneCount$set(MemorySegment seg, long index, int x) {
        _STORAGE_ZONED_DEVICE_DESCRIPTOR.ZoneCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class ZoneAttributes {

        static final  GroupLayout ZoneAttributes$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("MaxOpenZoneCount"),
                Constants$root.C_CHAR$LAYOUT.withName("UnrestrictedRead"),
                MemoryLayout.sequenceLayout(3, Constants$root.C_CHAR$LAYOUT).withName("Reserved")
            ).withName("SequentialRequiredZone"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("OptimalOpenZoneCount"),
                Constants$root.C_LONG$LAYOUT.withName("Reserved")
            ).withName("SequentialPreferredZone")
        );
        public static MemoryLayout $LAYOUT() {
            return ZoneAttributes.ZoneAttributes$union$LAYOUT;
        }
        public static class SequentialRequiredZone {

            static final  GroupLayout ZoneAttributes$SequentialRequiredZone$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("MaxOpenZoneCount"),
                Constants$root.C_CHAR$LAYOUT.withName("UnrestrictedRead"),
                MemoryLayout.sequenceLayout(3, Constants$root.C_CHAR$LAYOUT).withName("Reserved")
            );
            public static MemoryLayout $LAYOUT() {
                return SequentialRequiredZone.ZoneAttributes$SequentialRequiredZone$struct$LAYOUT;
            }
            static final VarHandle MaxOpenZoneCount$VH = ZoneAttributes$SequentialRequiredZone$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaxOpenZoneCount"));
            public static VarHandle MaxOpenZoneCount$VH() {
                return SequentialRequiredZone.MaxOpenZoneCount$VH;
            }
            public static int MaxOpenZoneCount$get(MemorySegment seg) {
                return (int)SequentialRequiredZone.MaxOpenZoneCount$VH.get(seg);
            }
            public static void MaxOpenZoneCount$set( MemorySegment seg, int x) {
                SequentialRequiredZone.MaxOpenZoneCount$VH.set(seg, x);
            }
            public static int MaxOpenZoneCount$get(MemorySegment seg, long index) {
                return (int)SequentialRequiredZone.MaxOpenZoneCount$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void MaxOpenZoneCount$set(MemorySegment seg, long index, int x) {
                SequentialRequiredZone.MaxOpenZoneCount$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle UnrestrictedRead$VH = ZoneAttributes$SequentialRequiredZone$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UnrestrictedRead"));
            public static VarHandle UnrestrictedRead$VH() {
                return SequentialRequiredZone.UnrestrictedRead$VH;
            }
            public static byte UnrestrictedRead$get(MemorySegment seg) {
                return (byte)SequentialRequiredZone.UnrestrictedRead$VH.get(seg);
            }
            public static void UnrestrictedRead$set( MemorySegment seg, byte x) {
                SequentialRequiredZone.UnrestrictedRead$VH.set(seg, x);
            }
            public static byte UnrestrictedRead$get(MemorySegment seg, long index) {
                return (byte)SequentialRequiredZone.UnrestrictedRead$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void UnrestrictedRead$set(MemorySegment seg, long index, byte x) {
                SequentialRequiredZone.UnrestrictedRead$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment Reserved$slice(MemorySegment seg) {
                return seg.asSlice(5, 3);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
        }

        public static MemorySegment SequentialRequiredZone$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        public static class SequentialPreferredZone {

            static final  GroupLayout ZoneAttributes$SequentialPreferredZone$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("OptimalOpenZoneCount"),
                Constants$root.C_LONG$LAYOUT.withName("Reserved")
            );
            public static MemoryLayout $LAYOUT() {
                return SequentialPreferredZone.ZoneAttributes$SequentialPreferredZone$struct$LAYOUT;
            }
            static final VarHandle OptimalOpenZoneCount$VH = ZoneAttributes$SequentialPreferredZone$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OptimalOpenZoneCount"));
            public static VarHandle OptimalOpenZoneCount$VH() {
                return SequentialPreferredZone.OptimalOpenZoneCount$VH;
            }
            public static int OptimalOpenZoneCount$get(MemorySegment seg) {
                return (int)SequentialPreferredZone.OptimalOpenZoneCount$VH.get(seg);
            }
            public static void OptimalOpenZoneCount$set( MemorySegment seg, int x) {
                SequentialPreferredZone.OptimalOpenZoneCount$VH.set(seg, x);
            }
            public static int OptimalOpenZoneCount$get(MemorySegment seg, long index) {
                return (int)SequentialPreferredZone.OptimalOpenZoneCount$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void OptimalOpenZoneCount$set(MemorySegment seg, long index, int x) {
                SequentialPreferredZone.OptimalOpenZoneCount$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle Reserved$VH = ZoneAttributes$SequentialPreferredZone$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved"));
            public static VarHandle Reserved$VH() {
                return SequentialPreferredZone.Reserved$VH;
            }
            public static int Reserved$get(MemorySegment seg) {
                return (int)SequentialPreferredZone.Reserved$VH.get(seg);
            }
            public static void Reserved$set( MemorySegment seg, int x) {
                SequentialPreferredZone.Reserved$VH.set(seg, x);
            }
            public static int Reserved$get(MemorySegment seg, long index) {
                return (int)SequentialPreferredZone.Reserved$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void Reserved$set(MemorySegment seg, long index, int x) {
                SequentialPreferredZone.Reserved$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
        }

        public static MemorySegment SequentialPreferredZone$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment ZoneAttributes$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    static final VarHandle ZoneGroupCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ZoneGroupCount"));
    public static VarHandle ZoneGroupCount$VH() {
        return _STORAGE_ZONED_DEVICE_DESCRIPTOR.ZoneGroupCount$VH;
    }
    public static int ZoneGroupCount$get(MemorySegment seg) {
        return (int)_STORAGE_ZONED_DEVICE_DESCRIPTOR.ZoneGroupCount$VH.get(seg);
    }
    public static void ZoneGroupCount$set( MemorySegment seg, int x) {
        _STORAGE_ZONED_DEVICE_DESCRIPTOR.ZoneGroupCount$VH.set(seg, x);
    }
    public static int ZoneGroupCount$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ZONED_DEVICE_DESCRIPTOR.ZoneGroupCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ZoneGroupCount$set(MemorySegment seg, long index, int x) {
        _STORAGE_ZONED_DEVICE_DESCRIPTOR.ZoneGroupCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ZoneGroup$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


