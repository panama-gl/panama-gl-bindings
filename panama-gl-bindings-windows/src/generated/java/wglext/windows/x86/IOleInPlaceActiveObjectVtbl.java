// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IOleInPlaceActiveObjectVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetWindow"),
        Constants$root.C_POINTER$LAYOUT.withName("ContextSensitiveHelp"),
        Constants$root.C_POINTER$LAYOUT.withName("TranslateAcceleratorA"),
        Constants$root.C_POINTER$LAYOUT.withName("OnFrameWindowActivate"),
        Constants$root.C_POINTER$LAYOUT.withName("OnDocWindowActivate"),
        Constants$root.C_POINTER$LAYOUT.withName("ResizeBorder"),
        Constants$root.C_POINTER$LAYOUT.withName("EnableModeless")
    ).withName("IOleInPlaceActiveObjectVtbl");
    public static MemoryLayout $LAYOUT() {
        return IOleInPlaceActiveObjectVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IOleInPlaceActiveObjectVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IOleInPlaceActiveObjectVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IOleInPlaceActiveObjectVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IOleInPlaceActiveObjectVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IOleInPlaceActiveObjectVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IOleInPlaceActiveObjectVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor GetWindow$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetWindow$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.GetWindow$FUNC
    );
    public interface GetWindow {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetWindow fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetWindow.class, fi, IOleInPlaceActiveObjectVtbl.GetWindow$FUNC, session);
        }
        static GetWindow ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.GetWindow$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetWindow$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetWindow"));
    public static VarHandle GetWindow$VH() {
        return IOleInPlaceActiveObjectVtbl.GetWindow$VH;
    }
    public static MemoryAddress GetWindow$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.GetWindow$VH.get(seg);
    }
    public static void GetWindow$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.GetWindow$VH.set(seg, x);
    }
    public static MemoryAddress GetWindow$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.GetWindow$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetWindow$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.GetWindow$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetWindow GetWindow (MemorySegment segment, MemorySession session) {
        return GetWindow.ofAddress(GetWindow$get(segment), session);
    }
    static final FunctionDescriptor ContextSensitiveHelp$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ContextSensitiveHelp$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.ContextSensitiveHelp$FUNC
    );
    public interface ContextSensitiveHelp {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(ContextSensitiveHelp fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ContextSensitiveHelp.class, fi, IOleInPlaceActiveObjectVtbl.ContextSensitiveHelp$FUNC, session);
        }
        static ContextSensitiveHelp ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.ContextSensitiveHelp$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ContextSensitiveHelp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ContextSensitiveHelp"));
    public static VarHandle ContextSensitiveHelp$VH() {
        return IOleInPlaceActiveObjectVtbl.ContextSensitiveHelp$VH;
    }
    public static MemoryAddress ContextSensitiveHelp$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.ContextSensitiveHelp$VH.get(seg);
    }
    public static void ContextSensitiveHelp$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.ContextSensitiveHelp$VH.set(seg, x);
    }
    public static MemoryAddress ContextSensitiveHelp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.ContextSensitiveHelp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ContextSensitiveHelp$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.ContextSensitiveHelp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ContextSensitiveHelp ContextSensitiveHelp (MemorySegment segment, MemorySession session) {
        return ContextSensitiveHelp.ofAddress(ContextSensitiveHelp$get(segment), session);
    }
    static final FunctionDescriptor TranslateAcceleratorA$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle TranslateAcceleratorA$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.TranslateAcceleratorA$FUNC
    );
    public interface TranslateAcceleratorA {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(TranslateAcceleratorA fi, MemorySession session) {
            return RuntimeHelper.upcallStub(TranslateAcceleratorA.class, fi, IOleInPlaceActiveObjectVtbl.TranslateAcceleratorA$FUNC, session);
        }
        static TranslateAcceleratorA ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.TranslateAcceleratorA$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle TranslateAcceleratorA$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TranslateAcceleratorA"));
    public static VarHandle TranslateAcceleratorA$VH() {
        return IOleInPlaceActiveObjectVtbl.TranslateAcceleratorA$VH;
    }
    public static MemoryAddress TranslateAcceleratorA$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.TranslateAcceleratorA$VH.get(seg);
    }
    public static void TranslateAcceleratorA$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.TranslateAcceleratorA$VH.set(seg, x);
    }
    public static MemoryAddress TranslateAcceleratorA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.TranslateAcceleratorA$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TranslateAcceleratorA$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.TranslateAcceleratorA$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static TranslateAcceleratorA TranslateAcceleratorA (MemorySegment segment, MemorySession session) {
        return TranslateAcceleratorA.ofAddress(TranslateAcceleratorA$get(segment), session);
    }
    static final FunctionDescriptor OnFrameWindowActivate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle OnFrameWindowActivate$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.OnFrameWindowActivate$FUNC
    );
    public interface OnFrameWindowActivate {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(OnFrameWindowActivate fi, MemorySession session) {
            return RuntimeHelper.upcallStub(OnFrameWindowActivate.class, fi, IOleInPlaceActiveObjectVtbl.OnFrameWindowActivate$FUNC, session);
        }
        static OnFrameWindowActivate ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.OnFrameWindowActivate$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnFrameWindowActivate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnFrameWindowActivate"));
    public static VarHandle OnFrameWindowActivate$VH() {
        return IOleInPlaceActiveObjectVtbl.OnFrameWindowActivate$VH;
    }
    public static MemoryAddress OnFrameWindowActivate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.OnFrameWindowActivate$VH.get(seg);
    }
    public static void OnFrameWindowActivate$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.OnFrameWindowActivate$VH.set(seg, x);
    }
    public static MemoryAddress OnFrameWindowActivate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.OnFrameWindowActivate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnFrameWindowActivate$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.OnFrameWindowActivate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnFrameWindowActivate OnFrameWindowActivate (MemorySegment segment, MemorySession session) {
        return OnFrameWindowActivate.ofAddress(OnFrameWindowActivate$get(segment), session);
    }
    static final FunctionDescriptor OnDocWindowActivate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle OnDocWindowActivate$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.OnDocWindowActivate$FUNC
    );
    public interface OnDocWindowActivate {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(OnDocWindowActivate fi, MemorySession session) {
            return RuntimeHelper.upcallStub(OnDocWindowActivate.class, fi, IOleInPlaceActiveObjectVtbl.OnDocWindowActivate$FUNC, session);
        }
        static OnDocWindowActivate ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.OnDocWindowActivate$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnDocWindowActivate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnDocWindowActivate"));
    public static VarHandle OnDocWindowActivate$VH() {
        return IOleInPlaceActiveObjectVtbl.OnDocWindowActivate$VH;
    }
    public static MemoryAddress OnDocWindowActivate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.OnDocWindowActivate$VH.get(seg);
    }
    public static void OnDocWindowActivate$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.OnDocWindowActivate$VH.set(seg, x);
    }
    public static MemoryAddress OnDocWindowActivate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.OnDocWindowActivate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnDocWindowActivate$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.OnDocWindowActivate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnDocWindowActivate OnDocWindowActivate (MemorySegment segment, MemorySession session) {
        return OnDocWindowActivate.ofAddress(OnDocWindowActivate$get(segment), session);
    }
    static final FunctionDescriptor ResizeBorder$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ResizeBorder$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.ResizeBorder$FUNC
    );
    public interface ResizeBorder {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3);
        static MemorySegment allocate(ResizeBorder fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ResizeBorder.class, fi, IOleInPlaceActiveObjectVtbl.ResizeBorder$FUNC, session);
        }
        static ResizeBorder ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.ResizeBorder$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ResizeBorder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ResizeBorder"));
    public static VarHandle ResizeBorder$VH() {
        return IOleInPlaceActiveObjectVtbl.ResizeBorder$VH;
    }
    public static MemoryAddress ResizeBorder$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.ResizeBorder$VH.get(seg);
    }
    public static void ResizeBorder$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.ResizeBorder$VH.set(seg, x);
    }
    public static MemoryAddress ResizeBorder$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.ResizeBorder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ResizeBorder$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.ResizeBorder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ResizeBorder ResizeBorder (MemorySegment segment, MemorySession session) {
        return ResizeBorder.ofAddress(ResizeBorder$get(segment), session);
    }
    static final FunctionDescriptor EnableModeless$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle EnableModeless$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.EnableModeless$FUNC
    );
    public interface EnableModeless {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(EnableModeless fi, MemorySession session) {
            return RuntimeHelper.upcallStub(EnableModeless.class, fi, IOleInPlaceActiveObjectVtbl.EnableModeless$FUNC, session);
        }
        static EnableModeless ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.EnableModeless$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle EnableModeless$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EnableModeless"));
    public static VarHandle EnableModeless$VH() {
        return IOleInPlaceActiveObjectVtbl.EnableModeless$VH;
    }
    public static MemoryAddress EnableModeless$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.EnableModeless$VH.get(seg);
    }
    public static void EnableModeless$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.EnableModeless$VH.set(seg, x);
    }
    public static MemoryAddress EnableModeless$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceActiveObjectVtbl.EnableModeless$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnableModeless$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceActiveObjectVtbl.EnableModeless$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnableModeless EnableModeless (MemorySegment segment, MemorySession session) {
        return EnableModeless.ofAddress(EnableModeless$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


