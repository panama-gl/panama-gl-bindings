// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNWGLCOPYIMAGESUBDATANVPROC {

    int apply(java.lang.foreign.MemoryAddress hSrcRC, int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, java.lang.foreign.MemoryAddress hDstRC, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth);
    static MemorySegment allocate(PFNWGLCOPYIMAGESUBDATANVPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNWGLCOPYIMAGESUBDATANVPROC.class, fi, constants$1396.PFNWGLCOPYIMAGESUBDATANVPROC$FUNC, session);
    }
    static PFNWGLCOPYIMAGESUBDATANVPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _hSrcRC, int _srcName, int _srcTarget, int _srcLevel, int _srcX, int _srcY, int _srcZ, java.lang.foreign.MemoryAddress _hDstRC, int _dstName, int _dstTarget, int _dstLevel, int _dstX, int _dstY, int _dstZ, int _width, int _height, int _depth) -> {
            try {
                return (int)constants$1396.PFNWGLCOPYIMAGESUBDATANVPROC$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_hSrcRC, _srcName, _srcTarget, _srcLevel, _srcX, _srcY, _srcZ, (java.lang.foreign.Addressable)_hDstRC, _dstName, _dstTarget, _dstLevel, _dstX, _dstY, _dstZ, _width, _height, _depth);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


