// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _RPC_BINDING_HANDLE_TEMPLATE_V1_W {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_LONG$LAYOUT.withName("ProtocolSequence"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("NetworkAddress"),
        Constants$root.C_POINTER$LAYOUT.withName("StringEndpoint"),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("Reserved")
        ).withName("u1"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Data1"),
            Constants$root.C_SHORT$LAYOUT.withName("Data2"),
            Constants$root.C_SHORT$LAYOUT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
        ).withName("ObjectUuid")
    ).withName("_RPC_BINDING_HANDLE_TEMPLATE_V1_W");
    public static MemoryLayout $LAYOUT() {
        return _RPC_BINDING_HANDLE_TEMPLATE_V1_W.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _RPC_BINDING_HANDLE_TEMPLATE_V1_W.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_RPC_BINDING_HANDLE_TEMPLATE_V1_W.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _RPC_BINDING_HANDLE_TEMPLATE_V1_W.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_RPC_BINDING_HANDLE_TEMPLATE_V1_W.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _RPC_BINDING_HANDLE_TEMPLATE_V1_W.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _RPC_BINDING_HANDLE_TEMPLATE_V1_W.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)_RPC_BINDING_HANDLE_TEMPLATE_V1_W.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        _RPC_BINDING_HANDLE_TEMPLATE_V1_W.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_RPC_BINDING_HANDLE_TEMPLATE_V1_W.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _RPC_BINDING_HANDLE_TEMPLATE_V1_W.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ProtocolSequence$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ProtocolSequence"));
    public static VarHandle ProtocolSequence$VH() {
        return _RPC_BINDING_HANDLE_TEMPLATE_V1_W.ProtocolSequence$VH;
    }
    public static int ProtocolSequence$get(MemorySegment seg) {
        return (int)_RPC_BINDING_HANDLE_TEMPLATE_V1_W.ProtocolSequence$VH.get(seg);
    }
    public static void ProtocolSequence$set( MemorySegment seg, int x) {
        _RPC_BINDING_HANDLE_TEMPLATE_V1_W.ProtocolSequence$VH.set(seg, x);
    }
    public static int ProtocolSequence$get(MemorySegment seg, long index) {
        return (int)_RPC_BINDING_HANDLE_TEMPLATE_V1_W.ProtocolSequence$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProtocolSequence$set(MemorySegment seg, long index, int x) {
        _RPC_BINDING_HANDLE_TEMPLATE_V1_W.ProtocolSequence$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NetworkAddress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NetworkAddress"));
    public static VarHandle NetworkAddress$VH() {
        return _RPC_BINDING_HANDLE_TEMPLATE_V1_W.NetworkAddress$VH;
    }
    public static MemoryAddress NetworkAddress$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_RPC_BINDING_HANDLE_TEMPLATE_V1_W.NetworkAddress$VH.get(seg);
    }
    public static void NetworkAddress$set( MemorySegment seg, MemoryAddress x) {
        _RPC_BINDING_HANDLE_TEMPLATE_V1_W.NetworkAddress$VH.set(seg, x);
    }
    public static MemoryAddress NetworkAddress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_RPC_BINDING_HANDLE_TEMPLATE_V1_W.NetworkAddress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NetworkAddress$set(MemorySegment seg, long index, MemoryAddress x) {
        _RPC_BINDING_HANDLE_TEMPLATE_V1_W.NetworkAddress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle StringEndpoint$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StringEndpoint"));
    public static VarHandle StringEndpoint$VH() {
        return _RPC_BINDING_HANDLE_TEMPLATE_V1_W.StringEndpoint$VH;
    }
    public static MemoryAddress StringEndpoint$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_RPC_BINDING_HANDLE_TEMPLATE_V1_W.StringEndpoint$VH.get(seg);
    }
    public static void StringEndpoint$set( MemorySegment seg, MemoryAddress x) {
        _RPC_BINDING_HANDLE_TEMPLATE_V1_W.StringEndpoint$VH.set(seg, x);
    }
    public static MemoryAddress StringEndpoint$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_RPC_BINDING_HANDLE_TEMPLATE_V1_W.StringEndpoint$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StringEndpoint$set(MemorySegment seg, long index, MemoryAddress x) {
        _RPC_BINDING_HANDLE_TEMPLATE_V1_W.StringEndpoint$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class u1 {

        static final  GroupLayout u1$union$LAYOUT = MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("Reserved")
        );
        public static MemoryLayout $LAYOUT() {
            return u1.u1$union$LAYOUT;
        }
        static final VarHandle Reserved$VH = u1$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved"));
        public static VarHandle Reserved$VH() {
            return u1.Reserved$VH;
        }
        public static MemoryAddress Reserved$get(MemorySegment seg) {
            return (java.lang.foreign.MemoryAddress)u1.Reserved$VH.get(seg);
        }
        public static void Reserved$set( MemorySegment seg, MemoryAddress x) {
            u1.Reserved$VH.set(seg, x);
        }
        public static MemoryAddress Reserved$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemoryAddress)u1.Reserved$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(MemorySegment seg, long index, MemoryAddress x) {
            u1.Reserved$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment u1$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    public static MemorySegment ObjectUuid$slice(MemorySegment seg) {
        return seg.asSlice(40, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


