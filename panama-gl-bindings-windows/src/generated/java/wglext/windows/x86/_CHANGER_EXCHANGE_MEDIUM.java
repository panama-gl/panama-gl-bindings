// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _CHANGER_EXCHANGE_MEDIUM {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("ElementType"),
            Constants$root.C_LONG$LAYOUT.withName("ElementAddress")
        ).withName("Transport"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("ElementType"),
            Constants$root.C_LONG$LAYOUT.withName("ElementAddress")
        ).withName("Source"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("ElementType"),
            Constants$root.C_LONG$LAYOUT.withName("ElementAddress")
        ).withName("Destination1"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("ElementType"),
            Constants$root.C_LONG$LAYOUT.withName("ElementAddress")
        ).withName("Destination2"),
        Constants$root.C_CHAR$LAYOUT.withName("Flip1"),
        Constants$root.C_CHAR$LAYOUT.withName("Flip2"),
        MemoryLayout.paddingLayout(16)
    ).withName("_CHANGER_EXCHANGE_MEDIUM");
    public static MemoryLayout $LAYOUT() {
        return _CHANGER_EXCHANGE_MEDIUM.$struct$LAYOUT;
    }
    public static MemorySegment Transport$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment Source$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static MemorySegment Destination1$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment Destination2$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    static final VarHandle Flip1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flip1"));
    public static VarHandle Flip1$VH() {
        return _CHANGER_EXCHANGE_MEDIUM.Flip1$VH;
    }
    public static byte Flip1$get(MemorySegment seg) {
        return (byte)_CHANGER_EXCHANGE_MEDIUM.Flip1$VH.get(seg);
    }
    public static void Flip1$set( MemorySegment seg, byte x) {
        _CHANGER_EXCHANGE_MEDIUM.Flip1$VH.set(seg, x);
    }
    public static byte Flip1$get(MemorySegment seg, long index) {
        return (byte)_CHANGER_EXCHANGE_MEDIUM.Flip1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flip1$set(MemorySegment seg, long index, byte x) {
        _CHANGER_EXCHANGE_MEDIUM.Flip1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flip2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flip2"));
    public static VarHandle Flip2$VH() {
        return _CHANGER_EXCHANGE_MEDIUM.Flip2$VH;
    }
    public static byte Flip2$get(MemorySegment seg) {
        return (byte)_CHANGER_EXCHANGE_MEDIUM.Flip2$VH.get(seg);
    }
    public static void Flip2$set( MemorySegment seg, byte x) {
        _CHANGER_EXCHANGE_MEDIUM.Flip2$VH.set(seg, x);
    }
    public static byte Flip2$get(MemorySegment seg, long index) {
        return (byte)_CHANGER_EXCHANGE_MEDIUM.Flip2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flip2$set(MemorySegment seg, long index, byte x) {
        _CHANGER_EXCHANGE_MEDIUM.Flip2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


