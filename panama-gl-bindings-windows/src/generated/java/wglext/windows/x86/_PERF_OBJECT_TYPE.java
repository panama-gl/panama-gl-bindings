// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _PERF_OBJECT_TYPE {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("TotalByteLength"),
        Constants$root.C_LONG$LAYOUT.withName("DefinitionLength"),
        Constants$root.C_LONG$LAYOUT.withName("HeaderLength"),
        Constants$root.C_LONG$LAYOUT.withName("ObjectNameTitleIndex"),
        Constants$root.C_LONG$LAYOUT.withName("ObjectNameTitle"),
        Constants$root.C_LONG$LAYOUT.withName("ObjectHelpTitleIndex"),
        Constants$root.C_LONG$LAYOUT.withName("ObjectHelpTitle"),
        Constants$root.C_LONG$LAYOUT.withName("DetailLevel"),
        Constants$root.C_LONG$LAYOUT.withName("NumCounters"),
        Constants$root.C_LONG$LAYOUT.withName("DefaultCounter"),
        Constants$root.C_LONG$LAYOUT.withName("NumInstances"),
        Constants$root.C_LONG$LAYOUT.withName("CodePage"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("PerfTime"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("PerfFreq")
    ).withName("_PERF_OBJECT_TYPE");
    public static MemoryLayout $LAYOUT() {
        return _PERF_OBJECT_TYPE.$struct$LAYOUT;
    }
    static final VarHandle TotalByteLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TotalByteLength"));
    public static VarHandle TotalByteLength$VH() {
        return _PERF_OBJECT_TYPE.TotalByteLength$VH;
    }
    public static int TotalByteLength$get(MemorySegment seg) {
        return (int)_PERF_OBJECT_TYPE.TotalByteLength$VH.get(seg);
    }
    public static void TotalByteLength$set( MemorySegment seg, int x) {
        _PERF_OBJECT_TYPE.TotalByteLength$VH.set(seg, x);
    }
    public static int TotalByteLength$get(MemorySegment seg, long index) {
        return (int)_PERF_OBJECT_TYPE.TotalByteLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TotalByteLength$set(MemorySegment seg, long index, int x) {
        _PERF_OBJECT_TYPE.TotalByteLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DefinitionLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DefinitionLength"));
    public static VarHandle DefinitionLength$VH() {
        return _PERF_OBJECT_TYPE.DefinitionLength$VH;
    }
    public static int DefinitionLength$get(MemorySegment seg) {
        return (int)_PERF_OBJECT_TYPE.DefinitionLength$VH.get(seg);
    }
    public static void DefinitionLength$set( MemorySegment seg, int x) {
        _PERF_OBJECT_TYPE.DefinitionLength$VH.set(seg, x);
    }
    public static int DefinitionLength$get(MemorySegment seg, long index) {
        return (int)_PERF_OBJECT_TYPE.DefinitionLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DefinitionLength$set(MemorySegment seg, long index, int x) {
        _PERF_OBJECT_TYPE.DefinitionLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle HeaderLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("HeaderLength"));
    public static VarHandle HeaderLength$VH() {
        return _PERF_OBJECT_TYPE.HeaderLength$VH;
    }
    public static int HeaderLength$get(MemorySegment seg) {
        return (int)_PERF_OBJECT_TYPE.HeaderLength$VH.get(seg);
    }
    public static void HeaderLength$set( MemorySegment seg, int x) {
        _PERF_OBJECT_TYPE.HeaderLength$VH.set(seg, x);
    }
    public static int HeaderLength$get(MemorySegment seg, long index) {
        return (int)_PERF_OBJECT_TYPE.HeaderLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HeaderLength$set(MemorySegment seg, long index, int x) {
        _PERF_OBJECT_TYPE.HeaderLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ObjectNameTitleIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ObjectNameTitleIndex"));
    public static VarHandle ObjectNameTitleIndex$VH() {
        return _PERF_OBJECT_TYPE.ObjectNameTitleIndex$VH;
    }
    public static int ObjectNameTitleIndex$get(MemorySegment seg) {
        return (int)_PERF_OBJECT_TYPE.ObjectNameTitleIndex$VH.get(seg);
    }
    public static void ObjectNameTitleIndex$set( MemorySegment seg, int x) {
        _PERF_OBJECT_TYPE.ObjectNameTitleIndex$VH.set(seg, x);
    }
    public static int ObjectNameTitleIndex$get(MemorySegment seg, long index) {
        return (int)_PERF_OBJECT_TYPE.ObjectNameTitleIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ObjectNameTitleIndex$set(MemorySegment seg, long index, int x) {
        _PERF_OBJECT_TYPE.ObjectNameTitleIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ObjectNameTitle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ObjectNameTitle"));
    public static VarHandle ObjectNameTitle$VH() {
        return _PERF_OBJECT_TYPE.ObjectNameTitle$VH;
    }
    public static int ObjectNameTitle$get(MemorySegment seg) {
        return (int)_PERF_OBJECT_TYPE.ObjectNameTitle$VH.get(seg);
    }
    public static void ObjectNameTitle$set( MemorySegment seg, int x) {
        _PERF_OBJECT_TYPE.ObjectNameTitle$VH.set(seg, x);
    }
    public static int ObjectNameTitle$get(MemorySegment seg, long index) {
        return (int)_PERF_OBJECT_TYPE.ObjectNameTitle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ObjectNameTitle$set(MemorySegment seg, long index, int x) {
        _PERF_OBJECT_TYPE.ObjectNameTitle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ObjectHelpTitleIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ObjectHelpTitleIndex"));
    public static VarHandle ObjectHelpTitleIndex$VH() {
        return _PERF_OBJECT_TYPE.ObjectHelpTitleIndex$VH;
    }
    public static int ObjectHelpTitleIndex$get(MemorySegment seg) {
        return (int)_PERF_OBJECT_TYPE.ObjectHelpTitleIndex$VH.get(seg);
    }
    public static void ObjectHelpTitleIndex$set( MemorySegment seg, int x) {
        _PERF_OBJECT_TYPE.ObjectHelpTitleIndex$VH.set(seg, x);
    }
    public static int ObjectHelpTitleIndex$get(MemorySegment seg, long index) {
        return (int)_PERF_OBJECT_TYPE.ObjectHelpTitleIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ObjectHelpTitleIndex$set(MemorySegment seg, long index, int x) {
        _PERF_OBJECT_TYPE.ObjectHelpTitleIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ObjectHelpTitle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ObjectHelpTitle"));
    public static VarHandle ObjectHelpTitle$VH() {
        return _PERF_OBJECT_TYPE.ObjectHelpTitle$VH;
    }
    public static int ObjectHelpTitle$get(MemorySegment seg) {
        return (int)_PERF_OBJECT_TYPE.ObjectHelpTitle$VH.get(seg);
    }
    public static void ObjectHelpTitle$set( MemorySegment seg, int x) {
        _PERF_OBJECT_TYPE.ObjectHelpTitle$VH.set(seg, x);
    }
    public static int ObjectHelpTitle$get(MemorySegment seg, long index) {
        return (int)_PERF_OBJECT_TYPE.ObjectHelpTitle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ObjectHelpTitle$set(MemorySegment seg, long index, int x) {
        _PERF_OBJECT_TYPE.ObjectHelpTitle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DetailLevel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DetailLevel"));
    public static VarHandle DetailLevel$VH() {
        return _PERF_OBJECT_TYPE.DetailLevel$VH;
    }
    public static int DetailLevel$get(MemorySegment seg) {
        return (int)_PERF_OBJECT_TYPE.DetailLevel$VH.get(seg);
    }
    public static void DetailLevel$set( MemorySegment seg, int x) {
        _PERF_OBJECT_TYPE.DetailLevel$VH.set(seg, x);
    }
    public static int DetailLevel$get(MemorySegment seg, long index) {
        return (int)_PERF_OBJECT_TYPE.DetailLevel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DetailLevel$set(MemorySegment seg, long index, int x) {
        _PERF_OBJECT_TYPE.DetailLevel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumCounters$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumCounters"));
    public static VarHandle NumCounters$VH() {
        return _PERF_OBJECT_TYPE.NumCounters$VH;
    }
    public static int NumCounters$get(MemorySegment seg) {
        return (int)_PERF_OBJECT_TYPE.NumCounters$VH.get(seg);
    }
    public static void NumCounters$set( MemorySegment seg, int x) {
        _PERF_OBJECT_TYPE.NumCounters$VH.set(seg, x);
    }
    public static int NumCounters$get(MemorySegment seg, long index) {
        return (int)_PERF_OBJECT_TYPE.NumCounters$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumCounters$set(MemorySegment seg, long index, int x) {
        _PERF_OBJECT_TYPE.NumCounters$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DefaultCounter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DefaultCounter"));
    public static VarHandle DefaultCounter$VH() {
        return _PERF_OBJECT_TYPE.DefaultCounter$VH;
    }
    public static int DefaultCounter$get(MemorySegment seg) {
        return (int)_PERF_OBJECT_TYPE.DefaultCounter$VH.get(seg);
    }
    public static void DefaultCounter$set( MemorySegment seg, int x) {
        _PERF_OBJECT_TYPE.DefaultCounter$VH.set(seg, x);
    }
    public static int DefaultCounter$get(MemorySegment seg, long index) {
        return (int)_PERF_OBJECT_TYPE.DefaultCounter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DefaultCounter$set(MemorySegment seg, long index, int x) {
        _PERF_OBJECT_TYPE.DefaultCounter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumInstances$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumInstances"));
    public static VarHandle NumInstances$VH() {
        return _PERF_OBJECT_TYPE.NumInstances$VH;
    }
    public static int NumInstances$get(MemorySegment seg) {
        return (int)_PERF_OBJECT_TYPE.NumInstances$VH.get(seg);
    }
    public static void NumInstances$set( MemorySegment seg, int x) {
        _PERF_OBJECT_TYPE.NumInstances$VH.set(seg, x);
    }
    public static int NumInstances$get(MemorySegment seg, long index) {
        return (int)_PERF_OBJECT_TYPE.NumInstances$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumInstances$set(MemorySegment seg, long index, int x) {
        _PERF_OBJECT_TYPE.NumInstances$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CodePage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CodePage"));
    public static VarHandle CodePage$VH() {
        return _PERF_OBJECT_TYPE.CodePage$VH;
    }
    public static int CodePage$get(MemorySegment seg) {
        return (int)_PERF_OBJECT_TYPE.CodePage$VH.get(seg);
    }
    public static void CodePage$set( MemorySegment seg, int x) {
        _PERF_OBJECT_TYPE.CodePage$VH.set(seg, x);
    }
    public static int CodePage$get(MemorySegment seg, long index) {
        return (int)_PERF_OBJECT_TYPE.CodePage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CodePage$set(MemorySegment seg, long index, int x) {
        _PERF_OBJECT_TYPE.CodePage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment PerfTime$slice(MemorySegment seg) {
        return seg.asSlice(48, 8);
    }
    public static MemorySegment PerfFreq$slice(MemorySegment seg) {
        return seg.asSlice(56, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


