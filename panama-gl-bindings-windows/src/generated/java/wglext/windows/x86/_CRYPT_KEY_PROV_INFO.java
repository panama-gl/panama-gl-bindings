// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _CRYPT_KEY_PROV_INFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("pwszContainerName"),
        Constants$root.C_POINTER$LAYOUT.withName("pwszProvName"),
        Constants$root.C_LONG$LAYOUT.withName("dwProvType"),
        Constants$root.C_LONG$LAYOUT.withName("dwFlags"),
        Constants$root.C_LONG$LAYOUT.withName("cProvParam"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("rgProvParam"),
        Constants$root.C_LONG$LAYOUT.withName("dwKeySpec"),
        MemoryLayout.paddingLayout(32)
    ).withName("_CRYPT_KEY_PROV_INFO");
    public static MemoryLayout $LAYOUT() {
        return _CRYPT_KEY_PROV_INFO.$struct$LAYOUT;
    }
    static final VarHandle pwszContainerName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pwszContainerName"));
    public static VarHandle pwszContainerName$VH() {
        return _CRYPT_KEY_PROV_INFO.pwszContainerName$VH;
    }
    public static MemoryAddress pwszContainerName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_KEY_PROV_INFO.pwszContainerName$VH.get(seg);
    }
    public static void pwszContainerName$set( MemorySegment seg, MemoryAddress x) {
        _CRYPT_KEY_PROV_INFO.pwszContainerName$VH.set(seg, x);
    }
    public static MemoryAddress pwszContainerName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_KEY_PROV_INFO.pwszContainerName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pwszContainerName$set(MemorySegment seg, long index, MemoryAddress x) {
        _CRYPT_KEY_PROV_INFO.pwszContainerName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pwszProvName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pwszProvName"));
    public static VarHandle pwszProvName$VH() {
        return _CRYPT_KEY_PROV_INFO.pwszProvName$VH;
    }
    public static MemoryAddress pwszProvName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_KEY_PROV_INFO.pwszProvName$VH.get(seg);
    }
    public static void pwszProvName$set( MemorySegment seg, MemoryAddress x) {
        _CRYPT_KEY_PROV_INFO.pwszProvName$VH.set(seg, x);
    }
    public static MemoryAddress pwszProvName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_KEY_PROV_INFO.pwszProvName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pwszProvName$set(MemorySegment seg, long index, MemoryAddress x) {
        _CRYPT_KEY_PROV_INFO.pwszProvName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwProvType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwProvType"));
    public static VarHandle dwProvType$VH() {
        return _CRYPT_KEY_PROV_INFO.dwProvType$VH;
    }
    public static int dwProvType$get(MemorySegment seg) {
        return (int)_CRYPT_KEY_PROV_INFO.dwProvType$VH.get(seg);
    }
    public static void dwProvType$set( MemorySegment seg, int x) {
        _CRYPT_KEY_PROV_INFO.dwProvType$VH.set(seg, x);
    }
    public static int dwProvType$get(MemorySegment seg, long index) {
        return (int)_CRYPT_KEY_PROV_INFO.dwProvType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwProvType$set(MemorySegment seg, long index, int x) {
        _CRYPT_KEY_PROV_INFO.dwProvType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwFlags"));
    public static VarHandle dwFlags$VH() {
        return _CRYPT_KEY_PROV_INFO.dwFlags$VH;
    }
    public static int dwFlags$get(MemorySegment seg) {
        return (int)_CRYPT_KEY_PROV_INFO.dwFlags$VH.get(seg);
    }
    public static void dwFlags$set( MemorySegment seg, int x) {
        _CRYPT_KEY_PROV_INFO.dwFlags$VH.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)_CRYPT_KEY_PROV_INFO.dwFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        _CRYPT_KEY_PROV_INFO.dwFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cProvParam$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cProvParam"));
    public static VarHandle cProvParam$VH() {
        return _CRYPT_KEY_PROV_INFO.cProvParam$VH;
    }
    public static int cProvParam$get(MemorySegment seg) {
        return (int)_CRYPT_KEY_PROV_INFO.cProvParam$VH.get(seg);
    }
    public static void cProvParam$set( MemorySegment seg, int x) {
        _CRYPT_KEY_PROV_INFO.cProvParam$VH.set(seg, x);
    }
    public static int cProvParam$get(MemorySegment seg, long index) {
        return (int)_CRYPT_KEY_PROV_INFO.cProvParam$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cProvParam$set(MemorySegment seg, long index, int x) {
        _CRYPT_KEY_PROV_INFO.cProvParam$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rgProvParam$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rgProvParam"));
    public static VarHandle rgProvParam$VH() {
        return _CRYPT_KEY_PROV_INFO.rgProvParam$VH;
    }
    public static MemoryAddress rgProvParam$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_KEY_PROV_INFO.rgProvParam$VH.get(seg);
    }
    public static void rgProvParam$set( MemorySegment seg, MemoryAddress x) {
        _CRYPT_KEY_PROV_INFO.rgProvParam$VH.set(seg, x);
    }
    public static MemoryAddress rgProvParam$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_KEY_PROV_INFO.rgProvParam$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rgProvParam$set(MemorySegment seg, long index, MemoryAddress x) {
        _CRYPT_KEY_PROV_INFO.rgProvParam$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwKeySpec$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwKeySpec"));
    public static VarHandle dwKeySpec$VH() {
        return _CRYPT_KEY_PROV_INFO.dwKeySpec$VH;
    }
    public static int dwKeySpec$get(MemorySegment seg) {
        return (int)_CRYPT_KEY_PROV_INFO.dwKeySpec$VH.get(seg);
    }
    public static void dwKeySpec$set( MemorySegment seg, int x) {
        _CRYPT_KEY_PROV_INFO.dwKeySpec$VH.set(seg, x);
    }
    public static int dwKeySpec$get(MemorySegment seg, long index) {
        return (int)_CRYPT_KEY_PROV_INFO.dwKeySpec$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwKeySpec$set(MemorySegment seg, long index, int x) {
        _CRYPT_KEY_PROV_INFO.dwKeySpec$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


