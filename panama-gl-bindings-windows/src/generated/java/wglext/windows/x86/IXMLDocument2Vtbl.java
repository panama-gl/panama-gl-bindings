// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IXMLDocument2Vtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfoCount"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("GetIDsOfNames"),
        Constants$root.C_POINTER$LAYOUT.withName("Invoke"),
        Constants$root.C_POINTER$LAYOUT.withName("get_root"),
        Constants$root.C_POINTER$LAYOUT.withName("get_fileSize"),
        Constants$root.C_POINTER$LAYOUT.withName("get_fileModifiedDate"),
        Constants$root.C_POINTER$LAYOUT.withName("get_fileUpdatedDate"),
        Constants$root.C_POINTER$LAYOUT.withName("get_URL"),
        Constants$root.C_POINTER$LAYOUT.withName("put_URL"),
        Constants$root.C_POINTER$LAYOUT.withName("get_mimeType"),
        Constants$root.C_POINTER$LAYOUT.withName("get_readyState"),
        Constants$root.C_POINTER$LAYOUT.withName("get_charset"),
        Constants$root.C_POINTER$LAYOUT.withName("put_charset"),
        Constants$root.C_POINTER$LAYOUT.withName("get_version"),
        Constants$root.C_POINTER$LAYOUT.withName("get_doctype"),
        Constants$root.C_POINTER$LAYOUT.withName("get_dtdURL"),
        Constants$root.C_POINTER$LAYOUT.withName("createElement"),
        Constants$root.C_POINTER$LAYOUT.withName("get_async"),
        Constants$root.C_POINTER$LAYOUT.withName("put_async")
    ).withName("IXMLDocument2Vtbl");
    public static MemoryLayout $LAYOUT() {
        return IXMLDocument2Vtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IXMLDocument2Vtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IXMLDocument2Vtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IXMLDocument2Vtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IXMLDocument2Vtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IXMLDocument2Vtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IXMLDocument2Vtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IXMLDocument2Vtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IXMLDocument2Vtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IXMLDocument2Vtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor GetTypeInfoCount$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoCount$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.GetTypeInfoCount$FUNC
    );
    public interface GetTypeInfoCount {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetTypeInfoCount fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, IXMLDocument2Vtbl.GetTypeInfoCount$FUNC, session);
        }
        static GetTypeInfoCount ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.GetTypeInfoCount$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfoCount"));
    public static VarHandle GetTypeInfoCount$VH() {
        return IXMLDocument2Vtbl.GetTypeInfoCount$VH;
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.GetTypeInfoCount$VH.get(seg);
    }
    public static void GetTypeInfoCount$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.GetTypeInfoCount$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.GetTypeInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.GetTypeInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount (MemorySegment segment, MemorySession session) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment), session);
    }
    static final FunctionDescriptor GetTypeInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfo$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.GetTypeInfo$FUNC
    );
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(GetTypeInfo fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, IXMLDocument2Vtbl.GetTypeInfo$FUNC, session);
        }
        static GetTypeInfo ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IXMLDocument2Vtbl.GetTypeInfo$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfo"));
    public static VarHandle GetTypeInfo$VH() {
        return IXMLDocument2Vtbl.GetTypeInfo$VH;
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.GetTypeInfo$VH.get(seg);
    }
    public static void GetTypeInfo$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.GetTypeInfo$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.GetTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.GetTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo (MemorySegment segment, MemorySession session) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), session);
    }
    static final FunctionDescriptor GetIDsOfNames$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIDsOfNames$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.GetIDsOfNames$FUNC
    );
    public interface GetIDsOfNames {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, int _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(GetIDsOfNames fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, IXMLDocument2Vtbl.GetIDsOfNames$FUNC, session);
        }
        static GetIDsOfNames ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, int __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    return (int)IXMLDocument2Vtbl.GetIDsOfNames$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, __x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIDsOfNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetIDsOfNames"));
    public static VarHandle GetIDsOfNames$VH() {
        return IXMLDocument2Vtbl.GetIDsOfNames$VH;
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.GetIDsOfNames$VH.get(seg);
    }
    public static void GetIDsOfNames$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.GetIDsOfNames$VH.set(seg, x);
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.GetIDsOfNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.GetIDsOfNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames (MemorySegment segment, MemorySession session) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment), session);
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invoke$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.Invoke$FUNC
    );
    public interface Invoke {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, int _x3, short _x4, java.lang.foreign.MemoryAddress _x5, java.lang.foreign.MemoryAddress _x6, java.lang.foreign.MemoryAddress _x7, java.lang.foreign.MemoryAddress _x8);
        static MemorySegment allocate(Invoke fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IXMLDocument2Vtbl.Invoke$FUNC, session);
        }
        static Invoke ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, int __x3, short __x4, java.lang.foreign.MemoryAddress __x5, java.lang.foreign.MemoryAddress __x6, java.lang.foreign.MemoryAddress __x7, java.lang.foreign.MemoryAddress __x8) -> {
                try {
                    return (int)IXMLDocument2Vtbl.Invoke$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, __x3, __x4, (java.lang.foreign.Addressable)__x5, (java.lang.foreign.Addressable)__x6, (java.lang.foreign.Addressable)__x7, (java.lang.foreign.Addressable)__x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Invoke"));
    public static VarHandle Invoke$VH() {
        return IXMLDocument2Vtbl.Invoke$VH;
    }
    public static MemoryAddress Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.Invoke$VH.get(seg);
    }
    public static void Invoke$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.Invoke$VH.set(seg, x);
    }
    public static MemoryAddress Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke (MemorySegment segment, MemorySession session) {
        return Invoke.ofAddress(Invoke$get(segment), session);
    }
    static final FunctionDescriptor get_root$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_root$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_root$FUNC
    );
    public interface get_root {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_root fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_root.class, fi, IXMLDocument2Vtbl.get_root$FUNC, session);
        }
        static get_root ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_root$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_root$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_root"));
    public static VarHandle get_root$VH() {
        return IXMLDocument2Vtbl.get_root$VH;
    }
    public static MemoryAddress get_root$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_root$VH.get(seg);
    }
    public static void get_root$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.get_root$VH.set(seg, x);
    }
    public static MemoryAddress get_root$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_root$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_root$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.get_root$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_root get_root (MemorySegment segment, MemorySession session) {
        return get_root.ofAddress(get_root$get(segment), session);
    }
    static final FunctionDescriptor get_fileSize$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_fileSize$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_fileSize$FUNC
    );
    public interface get_fileSize {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_fileSize fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_fileSize.class, fi, IXMLDocument2Vtbl.get_fileSize$FUNC, session);
        }
        static get_fileSize ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_fileSize$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_fileSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_fileSize"));
    public static VarHandle get_fileSize$VH() {
        return IXMLDocument2Vtbl.get_fileSize$VH;
    }
    public static MemoryAddress get_fileSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_fileSize$VH.get(seg);
    }
    public static void get_fileSize$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.get_fileSize$VH.set(seg, x);
    }
    public static MemoryAddress get_fileSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_fileSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_fileSize$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.get_fileSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_fileSize get_fileSize (MemorySegment segment, MemorySession session) {
        return get_fileSize.ofAddress(get_fileSize$get(segment), session);
    }
    static final FunctionDescriptor get_fileModifiedDate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_fileModifiedDate$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_fileModifiedDate$FUNC
    );
    public interface get_fileModifiedDate {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_fileModifiedDate fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_fileModifiedDate.class, fi, IXMLDocument2Vtbl.get_fileModifiedDate$FUNC, session);
        }
        static get_fileModifiedDate ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_fileModifiedDate$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_fileModifiedDate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_fileModifiedDate"));
    public static VarHandle get_fileModifiedDate$VH() {
        return IXMLDocument2Vtbl.get_fileModifiedDate$VH;
    }
    public static MemoryAddress get_fileModifiedDate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_fileModifiedDate$VH.get(seg);
    }
    public static void get_fileModifiedDate$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.get_fileModifiedDate$VH.set(seg, x);
    }
    public static MemoryAddress get_fileModifiedDate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_fileModifiedDate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_fileModifiedDate$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.get_fileModifiedDate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_fileModifiedDate get_fileModifiedDate (MemorySegment segment, MemorySession session) {
        return get_fileModifiedDate.ofAddress(get_fileModifiedDate$get(segment), session);
    }
    static final FunctionDescriptor get_fileUpdatedDate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_fileUpdatedDate$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_fileUpdatedDate$FUNC
    );
    public interface get_fileUpdatedDate {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_fileUpdatedDate fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_fileUpdatedDate.class, fi, IXMLDocument2Vtbl.get_fileUpdatedDate$FUNC, session);
        }
        static get_fileUpdatedDate ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_fileUpdatedDate$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_fileUpdatedDate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_fileUpdatedDate"));
    public static VarHandle get_fileUpdatedDate$VH() {
        return IXMLDocument2Vtbl.get_fileUpdatedDate$VH;
    }
    public static MemoryAddress get_fileUpdatedDate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_fileUpdatedDate$VH.get(seg);
    }
    public static void get_fileUpdatedDate$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.get_fileUpdatedDate$VH.set(seg, x);
    }
    public static MemoryAddress get_fileUpdatedDate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_fileUpdatedDate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_fileUpdatedDate$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.get_fileUpdatedDate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_fileUpdatedDate get_fileUpdatedDate (MemorySegment segment, MemorySession session) {
        return get_fileUpdatedDate.ofAddress(get_fileUpdatedDate$get(segment), session);
    }
    static final FunctionDescriptor get_URL$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_URL$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_URL$FUNC
    );
    public interface get_URL {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_URL fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_URL.class, fi, IXMLDocument2Vtbl.get_URL$FUNC, session);
        }
        static get_URL ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_URL$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_URL$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_URL"));
    public static VarHandle get_URL$VH() {
        return IXMLDocument2Vtbl.get_URL$VH;
    }
    public static MemoryAddress get_URL$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_URL$VH.get(seg);
    }
    public static void get_URL$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.get_URL$VH.set(seg, x);
    }
    public static MemoryAddress get_URL$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_URL$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_URL$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.get_URL$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_URL get_URL (MemorySegment segment, MemorySession session) {
        return get_URL.ofAddress(get_URL$get(segment), session);
    }
    static final FunctionDescriptor put_URL$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle put_URL$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.put_URL$FUNC
    );
    public interface put_URL {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(put_URL fi, MemorySession session) {
            return RuntimeHelper.upcallStub(put_URL.class, fi, IXMLDocument2Vtbl.put_URL$FUNC, session);
        }
        static put_URL ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.put_URL$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_URL$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("put_URL"));
    public static VarHandle put_URL$VH() {
        return IXMLDocument2Vtbl.put_URL$VH;
    }
    public static MemoryAddress put_URL$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.put_URL$VH.get(seg);
    }
    public static void put_URL$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.put_URL$VH.set(seg, x);
    }
    public static MemoryAddress put_URL$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.put_URL$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_URL$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.put_URL$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_URL put_URL (MemorySegment segment, MemorySession session) {
        return put_URL.ofAddress(put_URL$get(segment), session);
    }
    static final FunctionDescriptor get_mimeType$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_mimeType$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_mimeType$FUNC
    );
    public interface get_mimeType {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_mimeType fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_mimeType.class, fi, IXMLDocument2Vtbl.get_mimeType$FUNC, session);
        }
        static get_mimeType ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_mimeType$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_mimeType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_mimeType"));
    public static VarHandle get_mimeType$VH() {
        return IXMLDocument2Vtbl.get_mimeType$VH;
    }
    public static MemoryAddress get_mimeType$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_mimeType$VH.get(seg);
    }
    public static void get_mimeType$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.get_mimeType$VH.set(seg, x);
    }
    public static MemoryAddress get_mimeType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_mimeType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_mimeType$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.get_mimeType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_mimeType get_mimeType (MemorySegment segment, MemorySession session) {
        return get_mimeType.ofAddress(get_mimeType$get(segment), session);
    }
    static final FunctionDescriptor get_readyState$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_readyState$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_readyState$FUNC
    );
    public interface get_readyState {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_readyState fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_readyState.class, fi, IXMLDocument2Vtbl.get_readyState$FUNC, session);
        }
        static get_readyState ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_readyState$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_readyState$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_readyState"));
    public static VarHandle get_readyState$VH() {
        return IXMLDocument2Vtbl.get_readyState$VH;
    }
    public static MemoryAddress get_readyState$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_readyState$VH.get(seg);
    }
    public static void get_readyState$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.get_readyState$VH.set(seg, x);
    }
    public static MemoryAddress get_readyState$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_readyState$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_readyState$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.get_readyState$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_readyState get_readyState (MemorySegment segment, MemorySession session) {
        return get_readyState.ofAddress(get_readyState$get(segment), session);
    }
    static final FunctionDescriptor get_charset$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_charset$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_charset$FUNC
    );
    public interface get_charset {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_charset fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_charset.class, fi, IXMLDocument2Vtbl.get_charset$FUNC, session);
        }
        static get_charset ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_charset$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_charset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_charset"));
    public static VarHandle get_charset$VH() {
        return IXMLDocument2Vtbl.get_charset$VH;
    }
    public static MemoryAddress get_charset$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_charset$VH.get(seg);
    }
    public static void get_charset$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.get_charset$VH.set(seg, x);
    }
    public static MemoryAddress get_charset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_charset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_charset$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.get_charset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_charset get_charset (MemorySegment segment, MemorySession session) {
        return get_charset.ofAddress(get_charset$get(segment), session);
    }
    static final FunctionDescriptor put_charset$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle put_charset$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.put_charset$FUNC
    );
    public interface put_charset {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(put_charset fi, MemorySession session) {
            return RuntimeHelper.upcallStub(put_charset.class, fi, IXMLDocument2Vtbl.put_charset$FUNC, session);
        }
        static put_charset ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.put_charset$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_charset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("put_charset"));
    public static VarHandle put_charset$VH() {
        return IXMLDocument2Vtbl.put_charset$VH;
    }
    public static MemoryAddress put_charset$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.put_charset$VH.get(seg);
    }
    public static void put_charset$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.put_charset$VH.set(seg, x);
    }
    public static MemoryAddress put_charset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.put_charset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_charset$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.put_charset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_charset put_charset (MemorySegment segment, MemorySession session) {
        return put_charset.ofAddress(put_charset$get(segment), session);
    }
    static final FunctionDescriptor get_version$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_version$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_version$FUNC
    );
    public interface get_version {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_version fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_version.class, fi, IXMLDocument2Vtbl.get_version$FUNC, session);
        }
        static get_version ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_version$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_version"));
    public static VarHandle get_version$VH() {
        return IXMLDocument2Vtbl.get_version$VH;
    }
    public static MemoryAddress get_version$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_version$VH.get(seg);
    }
    public static void get_version$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.get_version$VH.set(seg, x);
    }
    public static MemoryAddress get_version$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_version$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.get_version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_version get_version (MemorySegment segment, MemorySession session) {
        return get_version.ofAddress(get_version$get(segment), session);
    }
    static final FunctionDescriptor get_doctype$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_doctype$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_doctype$FUNC
    );
    public interface get_doctype {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_doctype fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_doctype.class, fi, IXMLDocument2Vtbl.get_doctype$FUNC, session);
        }
        static get_doctype ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_doctype$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_doctype$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_doctype"));
    public static VarHandle get_doctype$VH() {
        return IXMLDocument2Vtbl.get_doctype$VH;
    }
    public static MemoryAddress get_doctype$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_doctype$VH.get(seg);
    }
    public static void get_doctype$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.get_doctype$VH.set(seg, x);
    }
    public static MemoryAddress get_doctype$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_doctype$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_doctype$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.get_doctype$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_doctype get_doctype (MemorySegment segment, MemorySession session) {
        return get_doctype.ofAddress(get_doctype$get(segment), session);
    }
    static final FunctionDescriptor get_dtdURL$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_dtdURL$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_dtdURL$FUNC
    );
    public interface get_dtdURL {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_dtdURL fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_dtdURL.class, fi, IXMLDocument2Vtbl.get_dtdURL$FUNC, session);
        }
        static get_dtdURL ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_dtdURL$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_dtdURL$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_dtdURL"));
    public static VarHandle get_dtdURL$VH() {
        return IXMLDocument2Vtbl.get_dtdURL$VH;
    }
    public static MemoryAddress get_dtdURL$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_dtdURL$VH.get(seg);
    }
    public static void get_dtdURL$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.get_dtdURL$VH.set(seg, x);
    }
    public static MemoryAddress get_dtdURL$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_dtdURL$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_dtdURL$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.get_dtdURL$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_dtdURL get_dtdURL (MemorySegment segment, MemorySession session) {
        return get_dtdURL.ofAddress(get_dtdURL$get(segment), session);
    }
    static final FunctionDescriptor createElement$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle createElement$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.createElement$FUNC
    );
    public interface createElement {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(createElement fi, MemorySession session) {
            return RuntimeHelper.upcallStub(createElement.class, fi, IXMLDocument2Vtbl.createElement$FUNC, session);
        }
        static createElement ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IXMLDocument2Vtbl.createElement$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle createElement$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("createElement"));
    public static VarHandle createElement$VH() {
        return IXMLDocument2Vtbl.createElement$VH;
    }
    public static MemoryAddress createElement$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.createElement$VH.get(seg);
    }
    public static void createElement$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.createElement$VH.set(seg, x);
    }
    public static MemoryAddress createElement$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.createElement$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void createElement$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.createElement$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static createElement createElement (MemorySegment segment, MemorySession session) {
        return createElement.ofAddress(createElement$get(segment), session);
    }
    static final FunctionDescriptor get_async$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_async$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_async$FUNC
    );
    public interface get_async {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_async fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_async.class, fi, IXMLDocument2Vtbl.get_async$FUNC, session);
        }
        static get_async ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_async$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_async"));
    public static VarHandle get_async$VH() {
        return IXMLDocument2Vtbl.get_async$VH;
    }
    public static MemoryAddress get_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_async$VH.get(seg);
    }
    public static void get_async$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.get_async$VH.set(seg, x);
    }
    public static MemoryAddress get_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.get_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_async$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.get_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_async get_async (MemorySegment segment, MemorySession session) {
        return get_async.ofAddress(get_async$get(segment), session);
    }
    static final FunctionDescriptor put_async$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle put_async$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.put_async$FUNC
    );
    public interface put_async {

        int apply(java.lang.foreign.MemoryAddress _x0, short _x1);
        static MemorySegment allocate(put_async fi, MemorySession session) {
            return RuntimeHelper.upcallStub(put_async.class, fi, IXMLDocument2Vtbl.put_async$FUNC, session);
        }
        static put_async ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, short __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.put_async$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("put_async"));
    public static VarHandle put_async$VH() {
        return IXMLDocument2Vtbl.put_async$VH;
    }
    public static MemoryAddress put_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.put_async$VH.get(seg);
    }
    public static void put_async$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocument2Vtbl.put_async$VH.set(seg, x);
    }
    public static MemoryAddress put_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDocument2Vtbl.put_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_async$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocument2Vtbl.put_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_async put_async (MemorySegment segment, MemorySession session) {
        return put_async.ofAddress(put_async$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


