// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _DEVICE_COPY_OFFLOAD_DESCRIPTOR {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("MaximumTokenLifetime"),
        Constants$root.C_LONG$LAYOUT.withName("DefaultTokenLifetime"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("MaximumTransferSize"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("OptimalTransferCount"),
        Constants$root.C_LONG$LAYOUT.withName("MaximumDataDescriptors"),
        Constants$root.C_LONG$LAYOUT.withName("MaximumTransferLengthPerDescriptor"),
        Constants$root.C_LONG$LAYOUT.withName("OptimalTransferLengthPerDescriptor"),
        Constants$root.C_SHORT$LAYOUT.withName("OptimalTransferLengthGranularity"),
        MemoryLayout.sequenceLayout(2, Constants$root.C_CHAR$LAYOUT).withName("Reserved")
    ).withName("_DEVICE_COPY_OFFLOAD_DESCRIPTOR");
    public static MemoryLayout $LAYOUT() {
        return _DEVICE_COPY_OFFLOAD_DESCRIPTOR.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _DEVICE_COPY_OFFLOAD_DESCRIPTOR.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _DEVICE_COPY_OFFLOAD_DESCRIPTOR.Size$VH;
    }
    public static int Size$get(MemorySegment seg) {
        return (int)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, int x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaximumTokenLifetime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaximumTokenLifetime"));
    public static VarHandle MaximumTokenLifetime$VH() {
        return _DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumTokenLifetime$VH;
    }
    public static int MaximumTokenLifetime$get(MemorySegment seg) {
        return (int)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumTokenLifetime$VH.get(seg);
    }
    public static void MaximumTokenLifetime$set( MemorySegment seg, int x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumTokenLifetime$VH.set(seg, x);
    }
    public static int MaximumTokenLifetime$get(MemorySegment seg, long index) {
        return (int)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumTokenLifetime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumTokenLifetime$set(MemorySegment seg, long index, int x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumTokenLifetime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DefaultTokenLifetime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DefaultTokenLifetime"));
    public static VarHandle DefaultTokenLifetime$VH() {
        return _DEVICE_COPY_OFFLOAD_DESCRIPTOR.DefaultTokenLifetime$VH;
    }
    public static int DefaultTokenLifetime$get(MemorySegment seg) {
        return (int)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.DefaultTokenLifetime$VH.get(seg);
    }
    public static void DefaultTokenLifetime$set( MemorySegment seg, int x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.DefaultTokenLifetime$VH.set(seg, x);
    }
    public static int DefaultTokenLifetime$get(MemorySegment seg, long index) {
        return (int)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.DefaultTokenLifetime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DefaultTokenLifetime$set(MemorySegment seg, long index, int x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.DefaultTokenLifetime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaximumTransferSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaximumTransferSize"));
    public static VarHandle MaximumTransferSize$VH() {
        return _DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumTransferSize$VH;
    }
    public static long MaximumTransferSize$get(MemorySegment seg) {
        return (long)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumTransferSize$VH.get(seg);
    }
    public static void MaximumTransferSize$set( MemorySegment seg, long x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumTransferSize$VH.set(seg, x);
    }
    public static long MaximumTransferSize$get(MemorySegment seg, long index) {
        return (long)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumTransferSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumTransferSize$set(MemorySegment seg, long index, long x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumTransferSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OptimalTransferCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OptimalTransferCount"));
    public static VarHandle OptimalTransferCount$VH() {
        return _DEVICE_COPY_OFFLOAD_DESCRIPTOR.OptimalTransferCount$VH;
    }
    public static long OptimalTransferCount$get(MemorySegment seg) {
        return (long)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.OptimalTransferCount$VH.get(seg);
    }
    public static void OptimalTransferCount$set( MemorySegment seg, long x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.OptimalTransferCount$VH.set(seg, x);
    }
    public static long OptimalTransferCount$get(MemorySegment seg, long index) {
        return (long)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.OptimalTransferCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OptimalTransferCount$set(MemorySegment seg, long index, long x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.OptimalTransferCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaximumDataDescriptors$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaximumDataDescriptors"));
    public static VarHandle MaximumDataDescriptors$VH() {
        return _DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumDataDescriptors$VH;
    }
    public static int MaximumDataDescriptors$get(MemorySegment seg) {
        return (int)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumDataDescriptors$VH.get(seg);
    }
    public static void MaximumDataDescriptors$set( MemorySegment seg, int x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumDataDescriptors$VH.set(seg, x);
    }
    public static int MaximumDataDescriptors$get(MemorySegment seg, long index) {
        return (int)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumDataDescriptors$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumDataDescriptors$set(MemorySegment seg, long index, int x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumDataDescriptors$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaximumTransferLengthPerDescriptor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaximumTransferLengthPerDescriptor"));
    public static VarHandle MaximumTransferLengthPerDescriptor$VH() {
        return _DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumTransferLengthPerDescriptor$VH;
    }
    public static int MaximumTransferLengthPerDescriptor$get(MemorySegment seg) {
        return (int)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumTransferLengthPerDescriptor$VH.get(seg);
    }
    public static void MaximumTransferLengthPerDescriptor$set( MemorySegment seg, int x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumTransferLengthPerDescriptor$VH.set(seg, x);
    }
    public static int MaximumTransferLengthPerDescriptor$get(MemorySegment seg, long index) {
        return (int)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumTransferLengthPerDescriptor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumTransferLengthPerDescriptor$set(MemorySegment seg, long index, int x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.MaximumTransferLengthPerDescriptor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OptimalTransferLengthPerDescriptor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OptimalTransferLengthPerDescriptor"));
    public static VarHandle OptimalTransferLengthPerDescriptor$VH() {
        return _DEVICE_COPY_OFFLOAD_DESCRIPTOR.OptimalTransferLengthPerDescriptor$VH;
    }
    public static int OptimalTransferLengthPerDescriptor$get(MemorySegment seg) {
        return (int)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.OptimalTransferLengthPerDescriptor$VH.get(seg);
    }
    public static void OptimalTransferLengthPerDescriptor$set( MemorySegment seg, int x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.OptimalTransferLengthPerDescriptor$VH.set(seg, x);
    }
    public static int OptimalTransferLengthPerDescriptor$get(MemorySegment seg, long index) {
        return (int)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.OptimalTransferLengthPerDescriptor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OptimalTransferLengthPerDescriptor$set(MemorySegment seg, long index, int x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.OptimalTransferLengthPerDescriptor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OptimalTransferLengthGranularity$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OptimalTransferLengthGranularity"));
    public static VarHandle OptimalTransferLengthGranularity$VH() {
        return _DEVICE_COPY_OFFLOAD_DESCRIPTOR.OptimalTransferLengthGranularity$VH;
    }
    public static short OptimalTransferLengthGranularity$get(MemorySegment seg) {
        return (short)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.OptimalTransferLengthGranularity$VH.get(seg);
    }
    public static void OptimalTransferLengthGranularity$set( MemorySegment seg, short x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.OptimalTransferLengthGranularity$VH.set(seg, x);
    }
    public static short OptimalTransferLengthGranularity$get(MemorySegment seg, long index) {
        return (short)_DEVICE_COPY_OFFLOAD_DESCRIPTOR.OptimalTransferLengthGranularity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OptimalTransferLengthGranularity$set(MemorySegment seg, long index, short x) {
        _DEVICE_COPY_OFFLOAD_DESCRIPTOR.OptimalTransferLengthGranularity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(46, 2);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


