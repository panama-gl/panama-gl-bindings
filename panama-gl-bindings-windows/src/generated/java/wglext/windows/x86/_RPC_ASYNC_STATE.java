// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _RPC_ASYNC_STATE {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("Signature"),
        Constants$root.C_LONG$LAYOUT.withName("Lock"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_POINTER$LAYOUT.withName("StubInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("UserInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("RuntimeInfo"),
        Constants$root.C_LONG$LAYOUT.withName("Event"),
        Constants$root.C_LONG$LAYOUT.withName("NotificationType"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("NotificationRoutine"),
                Constants$root.C_POINTER$LAYOUT.withName("hThread")
            ).withName("APC"),
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("hIOPort"),
                Constants$root.C_LONG$LAYOUT.withName("dwNumberOfBytesTransferred"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_LONG_LONG$LAYOUT.withName("dwCompletionKey"),
                Constants$root.C_POINTER$LAYOUT.withName("lpOverlapped")
            ).withName("IOC"),
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("hWnd"),
                Constants$root.C_LONG$LAYOUT.withName("Msg"),
                MemoryLayout.paddingLayout(32)
            ).withName("HWND"),
            Constants$root.C_POINTER$LAYOUT.withName("hEvent"),
            Constants$root.C_POINTER$LAYOUT.withName("NotificationRoutine")
        ).withName("u"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_LONG_LONG$LAYOUT).withName("Reserved")
    ).withName("_RPC_ASYNC_STATE");
    public static MemoryLayout $LAYOUT() {
        return _RPC_ASYNC_STATE.$struct$LAYOUT;
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _RPC_ASYNC_STATE.Size$VH;
    }
    public static int Size$get(MemorySegment seg) {
        return (int)_RPC_ASYNC_STATE.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, int x) {
        _RPC_ASYNC_STATE.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_RPC_ASYNC_STATE.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _RPC_ASYNC_STATE.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Signature$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Signature"));
    public static VarHandle Signature$VH() {
        return _RPC_ASYNC_STATE.Signature$VH;
    }
    public static int Signature$get(MemorySegment seg) {
        return (int)_RPC_ASYNC_STATE.Signature$VH.get(seg);
    }
    public static void Signature$set( MemorySegment seg, int x) {
        _RPC_ASYNC_STATE.Signature$VH.set(seg, x);
    }
    public static int Signature$get(MemorySegment seg, long index) {
        return (int)_RPC_ASYNC_STATE.Signature$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Signature$set(MemorySegment seg, long index, int x) {
        _RPC_ASYNC_STATE.Signature$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Lock$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Lock"));
    public static VarHandle Lock$VH() {
        return _RPC_ASYNC_STATE.Lock$VH;
    }
    public static int Lock$get(MemorySegment seg) {
        return (int)_RPC_ASYNC_STATE.Lock$VH.get(seg);
    }
    public static void Lock$set( MemorySegment seg, int x) {
        _RPC_ASYNC_STATE.Lock$VH.set(seg, x);
    }
    public static int Lock$get(MemorySegment seg, long index) {
        return (int)_RPC_ASYNC_STATE.Lock$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Lock$set(MemorySegment seg, long index, int x) {
        _RPC_ASYNC_STATE.Lock$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _RPC_ASYNC_STATE.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)_RPC_ASYNC_STATE.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        _RPC_ASYNC_STATE.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_RPC_ASYNC_STATE.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _RPC_ASYNC_STATE.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle StubInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StubInfo"));
    public static VarHandle StubInfo$VH() {
        return _RPC_ASYNC_STATE.StubInfo$VH;
    }
    public static MemoryAddress StubInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_RPC_ASYNC_STATE.StubInfo$VH.get(seg);
    }
    public static void StubInfo$set( MemorySegment seg, MemoryAddress x) {
        _RPC_ASYNC_STATE.StubInfo$VH.set(seg, x);
    }
    public static MemoryAddress StubInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_RPC_ASYNC_STATE.StubInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StubInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        _RPC_ASYNC_STATE.StubInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle UserInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UserInfo"));
    public static VarHandle UserInfo$VH() {
        return _RPC_ASYNC_STATE.UserInfo$VH;
    }
    public static MemoryAddress UserInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_RPC_ASYNC_STATE.UserInfo$VH.get(seg);
    }
    public static void UserInfo$set( MemorySegment seg, MemoryAddress x) {
        _RPC_ASYNC_STATE.UserInfo$VH.set(seg, x);
    }
    public static MemoryAddress UserInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_RPC_ASYNC_STATE.UserInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UserInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        _RPC_ASYNC_STATE.UserInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RuntimeInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RuntimeInfo"));
    public static VarHandle RuntimeInfo$VH() {
        return _RPC_ASYNC_STATE.RuntimeInfo$VH;
    }
    public static MemoryAddress RuntimeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_RPC_ASYNC_STATE.RuntimeInfo$VH.get(seg);
    }
    public static void RuntimeInfo$set( MemorySegment seg, MemoryAddress x) {
        _RPC_ASYNC_STATE.RuntimeInfo$VH.set(seg, x);
    }
    public static MemoryAddress RuntimeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_RPC_ASYNC_STATE.RuntimeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RuntimeInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        _RPC_ASYNC_STATE.RuntimeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Event$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Event"));
    public static VarHandle Event$VH() {
        return _RPC_ASYNC_STATE.Event$VH;
    }
    public static int Event$get(MemorySegment seg) {
        return (int)_RPC_ASYNC_STATE.Event$VH.get(seg);
    }
    public static void Event$set( MemorySegment seg, int x) {
        _RPC_ASYNC_STATE.Event$VH.set(seg, x);
    }
    public static int Event$get(MemorySegment seg, long index) {
        return (int)_RPC_ASYNC_STATE.Event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Event$set(MemorySegment seg, long index, int x) {
        _RPC_ASYNC_STATE.Event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NotificationType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NotificationType"));
    public static VarHandle NotificationType$VH() {
        return _RPC_ASYNC_STATE.NotificationType$VH;
    }
    public static int NotificationType$get(MemorySegment seg) {
        return (int)_RPC_ASYNC_STATE.NotificationType$VH.get(seg);
    }
    public static void NotificationType$set( MemorySegment seg, int x) {
        _RPC_ASYNC_STATE.NotificationType$VH.set(seg, x);
    }
    public static int NotificationType$get(MemorySegment seg, long index) {
        return (int)_RPC_ASYNC_STATE.NotificationType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NotificationType$set(MemorySegment seg, long index, int x) {
        _RPC_ASYNC_STATE.NotificationType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(48, 32);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(80, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


