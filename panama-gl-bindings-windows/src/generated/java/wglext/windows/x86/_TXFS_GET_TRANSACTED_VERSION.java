// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _TXFS_GET_TRANSACTED_VERSION {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("ThisBaseVersion"),
        Constants$root.C_LONG$LAYOUT.withName("LatestVersion"),
        Constants$root.C_SHORT$LAYOUT.withName("ThisMiniVersion"),
        Constants$root.C_SHORT$LAYOUT.withName("FirstMiniVersion"),
        Constants$root.C_SHORT$LAYOUT.withName("LatestMiniVersion"),
        MemoryLayout.paddingLayout(16)
    ).withName("_TXFS_GET_TRANSACTED_VERSION");
    public static MemoryLayout $LAYOUT() {
        return _TXFS_GET_TRANSACTED_VERSION.$struct$LAYOUT;
    }
    static final VarHandle ThisBaseVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ThisBaseVersion"));
    public static VarHandle ThisBaseVersion$VH() {
        return _TXFS_GET_TRANSACTED_VERSION.ThisBaseVersion$VH;
    }
    public static int ThisBaseVersion$get(MemorySegment seg) {
        return (int)_TXFS_GET_TRANSACTED_VERSION.ThisBaseVersion$VH.get(seg);
    }
    public static void ThisBaseVersion$set( MemorySegment seg, int x) {
        _TXFS_GET_TRANSACTED_VERSION.ThisBaseVersion$VH.set(seg, x);
    }
    public static int ThisBaseVersion$get(MemorySegment seg, long index) {
        return (int)_TXFS_GET_TRANSACTED_VERSION.ThisBaseVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ThisBaseVersion$set(MemorySegment seg, long index, int x) {
        _TXFS_GET_TRANSACTED_VERSION.ThisBaseVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LatestVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LatestVersion"));
    public static VarHandle LatestVersion$VH() {
        return _TXFS_GET_TRANSACTED_VERSION.LatestVersion$VH;
    }
    public static int LatestVersion$get(MemorySegment seg) {
        return (int)_TXFS_GET_TRANSACTED_VERSION.LatestVersion$VH.get(seg);
    }
    public static void LatestVersion$set( MemorySegment seg, int x) {
        _TXFS_GET_TRANSACTED_VERSION.LatestVersion$VH.set(seg, x);
    }
    public static int LatestVersion$get(MemorySegment seg, long index) {
        return (int)_TXFS_GET_TRANSACTED_VERSION.LatestVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LatestVersion$set(MemorySegment seg, long index, int x) {
        _TXFS_GET_TRANSACTED_VERSION.LatestVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ThisMiniVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ThisMiniVersion"));
    public static VarHandle ThisMiniVersion$VH() {
        return _TXFS_GET_TRANSACTED_VERSION.ThisMiniVersion$VH;
    }
    public static short ThisMiniVersion$get(MemorySegment seg) {
        return (short)_TXFS_GET_TRANSACTED_VERSION.ThisMiniVersion$VH.get(seg);
    }
    public static void ThisMiniVersion$set( MemorySegment seg, short x) {
        _TXFS_GET_TRANSACTED_VERSION.ThisMiniVersion$VH.set(seg, x);
    }
    public static short ThisMiniVersion$get(MemorySegment seg, long index) {
        return (short)_TXFS_GET_TRANSACTED_VERSION.ThisMiniVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ThisMiniVersion$set(MemorySegment seg, long index, short x) {
        _TXFS_GET_TRANSACTED_VERSION.ThisMiniVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FirstMiniVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FirstMiniVersion"));
    public static VarHandle FirstMiniVersion$VH() {
        return _TXFS_GET_TRANSACTED_VERSION.FirstMiniVersion$VH;
    }
    public static short FirstMiniVersion$get(MemorySegment seg) {
        return (short)_TXFS_GET_TRANSACTED_VERSION.FirstMiniVersion$VH.get(seg);
    }
    public static void FirstMiniVersion$set( MemorySegment seg, short x) {
        _TXFS_GET_TRANSACTED_VERSION.FirstMiniVersion$VH.set(seg, x);
    }
    public static short FirstMiniVersion$get(MemorySegment seg, long index) {
        return (short)_TXFS_GET_TRANSACTED_VERSION.FirstMiniVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FirstMiniVersion$set(MemorySegment seg, long index, short x) {
        _TXFS_GET_TRANSACTED_VERSION.FirstMiniVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LatestMiniVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LatestMiniVersion"));
    public static VarHandle LatestMiniVersion$VH() {
        return _TXFS_GET_TRANSACTED_VERSION.LatestMiniVersion$VH;
    }
    public static short LatestMiniVersion$get(MemorySegment seg) {
        return (short)_TXFS_GET_TRANSACTED_VERSION.LatestMiniVersion$VH.get(seg);
    }
    public static void LatestMiniVersion$set( MemorySegment seg, short x) {
        _TXFS_GET_TRANSACTED_VERSION.LatestMiniVersion$VH.set(seg, x);
    }
    public static short LatestMiniVersion$get(MemorySegment seg, long index) {
        return (short)_TXFS_GET_TRANSACTED_VERSION.LatestMiniVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LatestMiniVersion$set(MemorySegment seg, long index, short x) {
        _TXFS_GET_TRANSACTED_VERSION.LatestMiniVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


