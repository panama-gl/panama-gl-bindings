// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IXMLDOMParseErrorVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfoCount"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("GetIDsOfNames"),
        Constants$root.C_POINTER$LAYOUT.withName("Invoke"),
        Constants$root.C_POINTER$LAYOUT.withName("get_errorCode"),
        Constants$root.C_POINTER$LAYOUT.withName("get_url"),
        Constants$root.C_POINTER$LAYOUT.withName("get_reason"),
        Constants$root.C_POINTER$LAYOUT.withName("get_srcText"),
        Constants$root.C_POINTER$LAYOUT.withName("get_line"),
        Constants$root.C_POINTER$LAYOUT.withName("get_linepos"),
        Constants$root.C_POINTER$LAYOUT.withName("get_filepos")
    ).withName("IXMLDOMParseErrorVtbl");
    public static MemoryLayout $LAYOUT() {
        return IXMLDOMParseErrorVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IXMLDOMParseErrorVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IXMLDOMParseErrorVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IXMLDOMParseErrorVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IXMLDOMParseErrorVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IXMLDOMParseErrorVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IXMLDOMParseErrorVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IXMLDOMParseErrorVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IXMLDOMParseErrorVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IXMLDOMParseErrorVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor GetTypeInfoCount$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoCount$MH = RuntimeHelper.downcallHandle(
        IXMLDOMParseErrorVtbl.GetTypeInfoCount$FUNC
    );
    public interface GetTypeInfoCount {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetTypeInfoCount fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, IXMLDOMParseErrorVtbl.GetTypeInfoCount$FUNC, session);
        }
        static GetTypeInfoCount ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.GetTypeInfoCount$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfoCount"));
    public static VarHandle GetTypeInfoCount$VH() {
        return IXMLDOMParseErrorVtbl.GetTypeInfoCount$VH;
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.GetTypeInfoCount$VH.get(seg);
    }
    public static void GetTypeInfoCount$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.GetTypeInfoCount$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.GetTypeInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.GetTypeInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount (MemorySegment segment, MemorySession session) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment), session);
    }
    static final FunctionDescriptor GetTypeInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfo$MH = RuntimeHelper.downcallHandle(
        IXMLDOMParseErrorVtbl.GetTypeInfo$FUNC
    );
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(GetTypeInfo fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, IXMLDOMParseErrorVtbl.GetTypeInfo$FUNC, session);
        }
        static GetTypeInfo ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.GetTypeInfo$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfo"));
    public static VarHandle GetTypeInfo$VH() {
        return IXMLDOMParseErrorVtbl.GetTypeInfo$VH;
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.GetTypeInfo$VH.get(seg);
    }
    public static void GetTypeInfo$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.GetTypeInfo$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.GetTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.GetTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo (MemorySegment segment, MemorySession session) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), session);
    }
    static final FunctionDescriptor GetIDsOfNames$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIDsOfNames$MH = RuntimeHelper.downcallHandle(
        IXMLDOMParseErrorVtbl.GetIDsOfNames$FUNC
    );
    public interface GetIDsOfNames {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, int _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(GetIDsOfNames fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, IXMLDOMParseErrorVtbl.GetIDsOfNames$FUNC, session);
        }
        static GetIDsOfNames ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, int __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.GetIDsOfNames$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, __x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIDsOfNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetIDsOfNames"));
    public static VarHandle GetIDsOfNames$VH() {
        return IXMLDOMParseErrorVtbl.GetIDsOfNames$VH;
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.GetIDsOfNames$VH.get(seg);
    }
    public static void GetIDsOfNames$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.GetIDsOfNames$VH.set(seg, x);
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.GetIDsOfNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.GetIDsOfNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames (MemorySegment segment, MemorySession session) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment), session);
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invoke$MH = RuntimeHelper.downcallHandle(
        IXMLDOMParseErrorVtbl.Invoke$FUNC
    );
    public interface Invoke {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, int _x3, short _x4, java.lang.foreign.MemoryAddress _x5, java.lang.foreign.MemoryAddress _x6, java.lang.foreign.MemoryAddress _x7, java.lang.foreign.MemoryAddress _x8);
        static MemorySegment allocate(Invoke fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IXMLDOMParseErrorVtbl.Invoke$FUNC, session);
        }
        static Invoke ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, int __x3, short __x4, java.lang.foreign.MemoryAddress __x5, java.lang.foreign.MemoryAddress __x6, java.lang.foreign.MemoryAddress __x7, java.lang.foreign.MemoryAddress __x8) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.Invoke$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, __x3, __x4, (java.lang.foreign.Addressable)__x5, (java.lang.foreign.Addressable)__x6, (java.lang.foreign.Addressable)__x7, (java.lang.foreign.Addressable)__x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Invoke"));
    public static VarHandle Invoke$VH() {
        return IXMLDOMParseErrorVtbl.Invoke$VH;
    }
    public static MemoryAddress Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.Invoke$VH.get(seg);
    }
    public static void Invoke$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.Invoke$VH.set(seg, x);
    }
    public static MemoryAddress Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke (MemorySegment segment, MemorySession session) {
        return Invoke.ofAddress(Invoke$get(segment), session);
    }
    static final FunctionDescriptor get_errorCode$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_errorCode$MH = RuntimeHelper.downcallHandle(
        IXMLDOMParseErrorVtbl.get_errorCode$FUNC
    );
    public interface get_errorCode {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_errorCode fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_errorCode.class, fi, IXMLDOMParseErrorVtbl.get_errorCode$FUNC, session);
        }
        static get_errorCode ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.get_errorCode$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_errorCode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_errorCode"));
    public static VarHandle get_errorCode$VH() {
        return IXMLDOMParseErrorVtbl.get_errorCode$VH;
    }
    public static MemoryAddress get_errorCode$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_errorCode$VH.get(seg);
    }
    public static void get_errorCode$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_errorCode$VH.set(seg, x);
    }
    public static MemoryAddress get_errorCode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_errorCode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_errorCode$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_errorCode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_errorCode get_errorCode (MemorySegment segment, MemorySession session) {
        return get_errorCode.ofAddress(get_errorCode$get(segment), session);
    }
    static final FunctionDescriptor get_url$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_url$MH = RuntimeHelper.downcallHandle(
        IXMLDOMParseErrorVtbl.get_url$FUNC
    );
    public interface get_url {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_url fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_url.class, fi, IXMLDOMParseErrorVtbl.get_url$FUNC, session);
        }
        static get_url ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.get_url$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_url$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_url"));
    public static VarHandle get_url$VH() {
        return IXMLDOMParseErrorVtbl.get_url$VH;
    }
    public static MemoryAddress get_url$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_url$VH.get(seg);
    }
    public static void get_url$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_url$VH.set(seg, x);
    }
    public static MemoryAddress get_url$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_url$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_url$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_url$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_url get_url (MemorySegment segment, MemorySession session) {
        return get_url.ofAddress(get_url$get(segment), session);
    }
    static final FunctionDescriptor get_reason$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_reason$MH = RuntimeHelper.downcallHandle(
        IXMLDOMParseErrorVtbl.get_reason$FUNC
    );
    public interface get_reason {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_reason fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_reason.class, fi, IXMLDOMParseErrorVtbl.get_reason$FUNC, session);
        }
        static get_reason ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.get_reason$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_reason$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_reason"));
    public static VarHandle get_reason$VH() {
        return IXMLDOMParseErrorVtbl.get_reason$VH;
    }
    public static MemoryAddress get_reason$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_reason$VH.get(seg);
    }
    public static void get_reason$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_reason$VH.set(seg, x);
    }
    public static MemoryAddress get_reason$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_reason$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_reason$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_reason$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_reason get_reason (MemorySegment segment, MemorySession session) {
        return get_reason.ofAddress(get_reason$get(segment), session);
    }
    static final FunctionDescriptor get_srcText$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_srcText$MH = RuntimeHelper.downcallHandle(
        IXMLDOMParseErrorVtbl.get_srcText$FUNC
    );
    public interface get_srcText {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_srcText fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_srcText.class, fi, IXMLDOMParseErrorVtbl.get_srcText$FUNC, session);
        }
        static get_srcText ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.get_srcText$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_srcText$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_srcText"));
    public static VarHandle get_srcText$VH() {
        return IXMLDOMParseErrorVtbl.get_srcText$VH;
    }
    public static MemoryAddress get_srcText$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_srcText$VH.get(seg);
    }
    public static void get_srcText$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_srcText$VH.set(seg, x);
    }
    public static MemoryAddress get_srcText$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_srcText$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_srcText$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_srcText$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_srcText get_srcText (MemorySegment segment, MemorySession session) {
        return get_srcText.ofAddress(get_srcText$get(segment), session);
    }
    static final FunctionDescriptor get_line$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_line$MH = RuntimeHelper.downcallHandle(
        IXMLDOMParseErrorVtbl.get_line$FUNC
    );
    public interface get_line {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_line fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_line.class, fi, IXMLDOMParseErrorVtbl.get_line$FUNC, session);
        }
        static get_line ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.get_line$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_line$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_line"));
    public static VarHandle get_line$VH() {
        return IXMLDOMParseErrorVtbl.get_line$VH;
    }
    public static MemoryAddress get_line$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_line$VH.get(seg);
    }
    public static void get_line$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_line$VH.set(seg, x);
    }
    public static MemoryAddress get_line$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_line$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_line$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_line$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_line get_line (MemorySegment segment, MemorySession session) {
        return get_line.ofAddress(get_line$get(segment), session);
    }
    static final FunctionDescriptor get_linepos$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_linepos$MH = RuntimeHelper.downcallHandle(
        IXMLDOMParseErrorVtbl.get_linepos$FUNC
    );
    public interface get_linepos {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_linepos fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_linepos.class, fi, IXMLDOMParseErrorVtbl.get_linepos$FUNC, session);
        }
        static get_linepos ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.get_linepos$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_linepos$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_linepos"));
    public static VarHandle get_linepos$VH() {
        return IXMLDOMParseErrorVtbl.get_linepos$VH;
    }
    public static MemoryAddress get_linepos$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_linepos$VH.get(seg);
    }
    public static void get_linepos$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_linepos$VH.set(seg, x);
    }
    public static MemoryAddress get_linepos$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_linepos$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_linepos$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_linepos$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_linepos get_linepos (MemorySegment segment, MemorySession session) {
        return get_linepos.ofAddress(get_linepos$get(segment), session);
    }
    static final FunctionDescriptor get_filepos$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_filepos$MH = RuntimeHelper.downcallHandle(
        IXMLDOMParseErrorVtbl.get_filepos$FUNC
    );
    public interface get_filepos {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_filepos fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_filepos.class, fi, IXMLDOMParseErrorVtbl.get_filepos$FUNC, session);
        }
        static get_filepos ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.get_filepos$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_filepos$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_filepos"));
    public static VarHandle get_filepos$VH() {
        return IXMLDOMParseErrorVtbl.get_filepos$VH;
    }
    public static MemoryAddress get_filepos$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_filepos$VH.get(seg);
    }
    public static void get_filepos$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_filepos$VH.set(seg, x);
    }
    public static MemoryAddress get_filepos$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_filepos$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_filepos$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_filepos$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_filepos get_filepos (MemorySegment segment, MemorySession session) {
        return get_filepos.ofAddress(get_filepos$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


