// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class ISoftDistExtVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("ProcessSoftDist"),
        Constants$root.C_POINTER$LAYOUT.withName("GetFirstCodeBase"),
        Constants$root.C_POINTER$LAYOUT.withName("GetNextCodeBase"),
        Constants$root.C_POINTER$LAYOUT.withName("AsyncInstallDistributionUnit")
    ).withName("ISoftDistExtVtbl");
    public static MemoryLayout $LAYOUT() {
        return ISoftDistExtVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        ISoftDistExtVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ISoftDistExtVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)ISoftDistExtVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return ISoftDistExtVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ISoftDistExtVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        ISoftDistExtVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ISoftDistExtVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        ISoftDistExtVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        ISoftDistExtVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ISoftDistExtVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)ISoftDistExtVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return ISoftDistExtVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ISoftDistExtVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        ISoftDistExtVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ISoftDistExtVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        ISoftDistExtVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        ISoftDistExtVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, ISoftDistExtVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)ISoftDistExtVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return ISoftDistExtVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ISoftDistExtVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        ISoftDistExtVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ISoftDistExtVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        ISoftDistExtVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor ProcessSoftDist$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ProcessSoftDist$MH = RuntimeHelper.downcallHandle(
        ISoftDistExtVtbl.ProcessSoftDist$FUNC
    );
    public interface ProcessSoftDist {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(ProcessSoftDist fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ProcessSoftDist.class, fi, ISoftDistExtVtbl.ProcessSoftDist$FUNC, session);
        }
        static ProcessSoftDist ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)ISoftDistExtVtbl.ProcessSoftDist$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ProcessSoftDist$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ProcessSoftDist"));
    public static VarHandle ProcessSoftDist$VH() {
        return ISoftDistExtVtbl.ProcessSoftDist$VH;
    }
    public static MemoryAddress ProcessSoftDist$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ISoftDistExtVtbl.ProcessSoftDist$VH.get(seg);
    }
    public static void ProcessSoftDist$set( MemorySegment seg, MemoryAddress x) {
        ISoftDistExtVtbl.ProcessSoftDist$VH.set(seg, x);
    }
    public static MemoryAddress ProcessSoftDist$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ISoftDistExtVtbl.ProcessSoftDist$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessSoftDist$set(MemorySegment seg, long index, MemoryAddress x) {
        ISoftDistExtVtbl.ProcessSoftDist$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ProcessSoftDist ProcessSoftDist (MemorySegment segment, MemorySession session) {
        return ProcessSoftDist.ofAddress(ProcessSoftDist$get(segment), session);
    }
    static final FunctionDescriptor GetFirstCodeBase$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetFirstCodeBase$MH = RuntimeHelper.downcallHandle(
        ISoftDistExtVtbl.GetFirstCodeBase$FUNC
    );
    public interface GetFirstCodeBase {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetFirstCodeBase fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetFirstCodeBase.class, fi, ISoftDistExtVtbl.GetFirstCodeBase$FUNC, session);
        }
        static GetFirstCodeBase ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)ISoftDistExtVtbl.GetFirstCodeBase$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetFirstCodeBase$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetFirstCodeBase"));
    public static VarHandle GetFirstCodeBase$VH() {
        return ISoftDistExtVtbl.GetFirstCodeBase$VH;
    }
    public static MemoryAddress GetFirstCodeBase$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ISoftDistExtVtbl.GetFirstCodeBase$VH.get(seg);
    }
    public static void GetFirstCodeBase$set( MemorySegment seg, MemoryAddress x) {
        ISoftDistExtVtbl.GetFirstCodeBase$VH.set(seg, x);
    }
    public static MemoryAddress GetFirstCodeBase$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ISoftDistExtVtbl.GetFirstCodeBase$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFirstCodeBase$set(MemorySegment seg, long index, MemoryAddress x) {
        ISoftDistExtVtbl.GetFirstCodeBase$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFirstCodeBase GetFirstCodeBase (MemorySegment segment, MemorySession session) {
        return GetFirstCodeBase.ofAddress(GetFirstCodeBase$get(segment), session);
    }
    static final FunctionDescriptor GetNextCodeBase$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetNextCodeBase$MH = RuntimeHelper.downcallHandle(
        ISoftDistExtVtbl.GetNextCodeBase$FUNC
    );
    public interface GetNextCodeBase {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetNextCodeBase fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetNextCodeBase.class, fi, ISoftDistExtVtbl.GetNextCodeBase$FUNC, session);
        }
        static GetNextCodeBase ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)ISoftDistExtVtbl.GetNextCodeBase$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetNextCodeBase$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetNextCodeBase"));
    public static VarHandle GetNextCodeBase$VH() {
        return ISoftDistExtVtbl.GetNextCodeBase$VH;
    }
    public static MemoryAddress GetNextCodeBase$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ISoftDistExtVtbl.GetNextCodeBase$VH.get(seg);
    }
    public static void GetNextCodeBase$set( MemorySegment seg, MemoryAddress x) {
        ISoftDistExtVtbl.GetNextCodeBase$VH.set(seg, x);
    }
    public static MemoryAddress GetNextCodeBase$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ISoftDistExtVtbl.GetNextCodeBase$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetNextCodeBase$set(MemorySegment seg, long index, MemoryAddress x) {
        ISoftDistExtVtbl.GetNextCodeBase$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetNextCodeBase GetNextCodeBase (MemorySegment segment, MemorySession session) {
        return GetNextCodeBase.ofAddress(GetNextCodeBase$get(segment), session);
    }
    static final FunctionDescriptor AsyncInstallDistributionUnit$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AsyncInstallDistributionUnit$MH = RuntimeHelper.downcallHandle(
        ISoftDistExtVtbl.AsyncInstallDistributionUnit$FUNC
    );
    public interface AsyncInstallDistributionUnit {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(AsyncInstallDistributionUnit fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AsyncInstallDistributionUnit.class, fi, ISoftDistExtVtbl.AsyncInstallDistributionUnit$FUNC, session);
        }
        static AsyncInstallDistributionUnit ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (int)ISoftDistExtVtbl.AsyncInstallDistributionUnit$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AsyncInstallDistributionUnit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AsyncInstallDistributionUnit"));
    public static VarHandle AsyncInstallDistributionUnit$VH() {
        return ISoftDistExtVtbl.AsyncInstallDistributionUnit$VH;
    }
    public static MemoryAddress AsyncInstallDistributionUnit$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ISoftDistExtVtbl.AsyncInstallDistributionUnit$VH.get(seg);
    }
    public static void AsyncInstallDistributionUnit$set( MemorySegment seg, MemoryAddress x) {
        ISoftDistExtVtbl.AsyncInstallDistributionUnit$VH.set(seg, x);
    }
    public static MemoryAddress AsyncInstallDistributionUnit$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ISoftDistExtVtbl.AsyncInstallDistributionUnit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AsyncInstallDistributionUnit$set(MemorySegment seg, long index, MemoryAddress x) {
        ISoftDistExtVtbl.AsyncInstallDistributionUnit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AsyncInstallDistributionUnit AsyncInstallDistributionUnit (MemorySegment segment, MemorySession session) {
        return AsyncInstallDistributionUnit.ofAddress(AsyncInstallDistributionUnit$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


