// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$502 {

    static final FunctionDescriptor FindWindowW$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle FindWindowW$MH = RuntimeHelper.downcallHandle(
        "FindWindowW",
        constants$502.FindWindowW$FUNC
    );
    static final FunctionDescriptor FindWindowExA$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle FindWindowExA$MH = RuntimeHelper.downcallHandle(
        "FindWindowExA",
        constants$502.FindWindowExA$FUNC
    );
    static final FunctionDescriptor FindWindowExW$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle FindWindowExW$MH = RuntimeHelper.downcallHandle(
        "FindWindowExW",
        constants$502.FindWindowExW$FUNC
    );
    static final FunctionDescriptor GetShellWindow$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle GetShellWindow$MH = RuntimeHelper.downcallHandle(
        "GetShellWindow",
        constants$502.GetShellWindow$FUNC
    );
    static final FunctionDescriptor RegisterShellHookWindow$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RegisterShellHookWindow$MH = RuntimeHelper.downcallHandle(
        "RegisterShellHookWindow",
        constants$502.RegisterShellHookWindow$FUNC
    );
    static final FunctionDescriptor DeregisterShellHookWindow$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DeregisterShellHookWindow$MH = RuntimeHelper.downcallHandle(
        "DeregisterShellHookWindow",
        constants$502.DeregisterShellHookWindow$FUNC
    );
}


