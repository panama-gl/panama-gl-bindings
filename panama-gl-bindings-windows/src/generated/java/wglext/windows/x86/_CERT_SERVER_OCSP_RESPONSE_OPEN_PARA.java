// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        Constants$root.C_LONG$LAYOUT.withName("dwFlags"),
        Constants$root.C_POINTER$LAYOUT.withName("pcbUsedSize"),
        Constants$root.C_POINTER$LAYOUT.withName("pwszOcspDirectory"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnUpdateCallback"),
        Constants$root.C_POINTER$LAYOUT.withName("pvUpdateCallbackArg")
    ).withName("_CERT_SERVER_OCSP_RESPONSE_OPEN_PARA");
    public static MemoryLayout $LAYOUT() {
        return _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)_CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)_CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwFlags"));
    public static VarHandle dwFlags$VH() {
        return _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.dwFlags$VH;
    }
    public static int dwFlags$get(MemorySegment seg) {
        return (int)_CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.dwFlags$VH.get(seg);
    }
    public static void dwFlags$set( MemorySegment seg, int x) {
        _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.dwFlags$VH.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)_CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.dwFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.dwFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pcbUsedSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pcbUsedSize"));
    public static VarHandle pcbUsedSize$VH() {
        return _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pcbUsedSize$VH;
    }
    public static MemoryAddress pcbUsedSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pcbUsedSize$VH.get(seg);
    }
    public static void pcbUsedSize$set( MemorySegment seg, MemoryAddress x) {
        _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pcbUsedSize$VH.set(seg, x);
    }
    public static MemoryAddress pcbUsedSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pcbUsedSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pcbUsedSize$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pcbUsedSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pwszOcspDirectory$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pwszOcspDirectory"));
    public static VarHandle pwszOcspDirectory$VH() {
        return _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pwszOcspDirectory$VH;
    }
    public static MemoryAddress pwszOcspDirectory$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pwszOcspDirectory$VH.get(seg);
    }
    public static void pwszOcspDirectory$set( MemorySegment seg, MemoryAddress x) {
        _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pwszOcspDirectory$VH.set(seg, x);
    }
    public static MemoryAddress pwszOcspDirectory$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pwszOcspDirectory$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pwszOcspDirectory$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pwszOcspDirectory$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pfnUpdateCallback$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnUpdateCallback"));
    public static VarHandle pfnUpdateCallback$VH() {
        return _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pfnUpdateCallback$VH;
    }
    public static MemoryAddress pfnUpdateCallback$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pfnUpdateCallback$VH.get(seg);
    }
    public static void pfnUpdateCallback$set( MemorySegment seg, MemoryAddress x) {
        _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pfnUpdateCallback$VH.set(seg, x);
    }
    public static MemoryAddress pfnUpdateCallback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pfnUpdateCallback$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnUpdateCallback$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pfnUpdateCallback$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK pfnUpdateCallback (MemorySegment segment, MemorySession session) {
        return PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK.ofAddress(pfnUpdateCallback$get(segment), session);
    }
    static final VarHandle pvUpdateCallbackArg$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pvUpdateCallbackArg"));
    public static VarHandle pvUpdateCallbackArg$VH() {
        return _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pvUpdateCallbackArg$VH;
    }
    public static MemoryAddress pvUpdateCallbackArg$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pvUpdateCallbackArg$VH.get(seg);
    }
    public static void pvUpdateCallbackArg$set( MemorySegment seg, MemoryAddress x) {
        _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pvUpdateCallbackArg$VH.set(seg, x);
    }
    public static MemoryAddress pvUpdateCallbackArg$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pvUpdateCallbackArg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pvUpdateCallbackArg$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA.pvUpdateCallbackArg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


