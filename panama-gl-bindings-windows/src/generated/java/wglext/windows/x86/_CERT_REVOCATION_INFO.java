// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _CERT_REVOCATION_INFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        Constants$root.C_LONG$LAYOUT.withName("dwRevocationResult"),
        Constants$root.C_POINTER$LAYOUT.withName("pszRevocationOid"),
        Constants$root.C_POINTER$LAYOUT.withName("pvOidSpecificInfo"),
        Constants$root.C_LONG$LAYOUT.withName("fHasFreshnessTime"),
        Constants$root.C_LONG$LAYOUT.withName("dwFreshnessTime"),
        Constants$root.C_POINTER$LAYOUT.withName("pCrlInfo")
    ).withName("_CERT_REVOCATION_INFO");
    public static MemoryLayout $LAYOUT() {
        return _CERT_REVOCATION_INFO.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return _CERT_REVOCATION_INFO.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)_CERT_REVOCATION_INFO.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        _CERT_REVOCATION_INFO.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)_CERT_REVOCATION_INFO.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        _CERT_REVOCATION_INFO.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwRevocationResult$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwRevocationResult"));
    public static VarHandle dwRevocationResult$VH() {
        return _CERT_REVOCATION_INFO.dwRevocationResult$VH;
    }
    public static int dwRevocationResult$get(MemorySegment seg) {
        return (int)_CERT_REVOCATION_INFO.dwRevocationResult$VH.get(seg);
    }
    public static void dwRevocationResult$set( MemorySegment seg, int x) {
        _CERT_REVOCATION_INFO.dwRevocationResult$VH.set(seg, x);
    }
    public static int dwRevocationResult$get(MemorySegment seg, long index) {
        return (int)_CERT_REVOCATION_INFO.dwRevocationResult$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwRevocationResult$set(MemorySegment seg, long index, int x) {
        _CERT_REVOCATION_INFO.dwRevocationResult$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pszRevocationOid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pszRevocationOid"));
    public static VarHandle pszRevocationOid$VH() {
        return _CERT_REVOCATION_INFO.pszRevocationOid$VH;
    }
    public static MemoryAddress pszRevocationOid$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CERT_REVOCATION_INFO.pszRevocationOid$VH.get(seg);
    }
    public static void pszRevocationOid$set( MemorySegment seg, MemoryAddress x) {
        _CERT_REVOCATION_INFO.pszRevocationOid$VH.set(seg, x);
    }
    public static MemoryAddress pszRevocationOid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CERT_REVOCATION_INFO.pszRevocationOid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszRevocationOid$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_REVOCATION_INFO.pszRevocationOid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pvOidSpecificInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pvOidSpecificInfo"));
    public static VarHandle pvOidSpecificInfo$VH() {
        return _CERT_REVOCATION_INFO.pvOidSpecificInfo$VH;
    }
    public static MemoryAddress pvOidSpecificInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CERT_REVOCATION_INFO.pvOidSpecificInfo$VH.get(seg);
    }
    public static void pvOidSpecificInfo$set( MemorySegment seg, MemoryAddress x) {
        _CERT_REVOCATION_INFO.pvOidSpecificInfo$VH.set(seg, x);
    }
    public static MemoryAddress pvOidSpecificInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CERT_REVOCATION_INFO.pvOidSpecificInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pvOidSpecificInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_REVOCATION_INFO.pvOidSpecificInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fHasFreshnessTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fHasFreshnessTime"));
    public static VarHandle fHasFreshnessTime$VH() {
        return _CERT_REVOCATION_INFO.fHasFreshnessTime$VH;
    }
    public static int fHasFreshnessTime$get(MemorySegment seg) {
        return (int)_CERT_REVOCATION_INFO.fHasFreshnessTime$VH.get(seg);
    }
    public static void fHasFreshnessTime$set( MemorySegment seg, int x) {
        _CERT_REVOCATION_INFO.fHasFreshnessTime$VH.set(seg, x);
    }
    public static int fHasFreshnessTime$get(MemorySegment seg, long index) {
        return (int)_CERT_REVOCATION_INFO.fHasFreshnessTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fHasFreshnessTime$set(MemorySegment seg, long index, int x) {
        _CERT_REVOCATION_INFO.fHasFreshnessTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwFreshnessTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwFreshnessTime"));
    public static VarHandle dwFreshnessTime$VH() {
        return _CERT_REVOCATION_INFO.dwFreshnessTime$VH;
    }
    public static int dwFreshnessTime$get(MemorySegment seg) {
        return (int)_CERT_REVOCATION_INFO.dwFreshnessTime$VH.get(seg);
    }
    public static void dwFreshnessTime$set( MemorySegment seg, int x) {
        _CERT_REVOCATION_INFO.dwFreshnessTime$VH.set(seg, x);
    }
    public static int dwFreshnessTime$get(MemorySegment seg, long index) {
        return (int)_CERT_REVOCATION_INFO.dwFreshnessTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFreshnessTime$set(MemorySegment seg, long index, int x) {
        _CERT_REVOCATION_INFO.dwFreshnessTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pCrlInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pCrlInfo"));
    public static VarHandle pCrlInfo$VH() {
        return _CERT_REVOCATION_INFO.pCrlInfo$VH;
    }
    public static MemoryAddress pCrlInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CERT_REVOCATION_INFO.pCrlInfo$VH.get(seg);
    }
    public static void pCrlInfo$set( MemorySegment seg, MemoryAddress x) {
        _CERT_REVOCATION_INFO.pCrlInfo$VH.set(seg, x);
    }
    public static MemoryAddress pCrlInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CERT_REVOCATION_INFO.pCrlInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pCrlInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_REVOCATION_INFO.pCrlInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


