// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class tagOIFI {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cb"),
        Constants$root.C_LONG$LAYOUT.withName("fMDIApp"),
        Constants$root.C_POINTER$LAYOUT.withName("hwndFrame"),
        Constants$root.C_POINTER$LAYOUT.withName("haccel"),
        Constants$root.C_LONG$LAYOUT.withName("cAccelEntries"),
        MemoryLayout.paddingLayout(32)
    ).withName("tagOIFI");
    public static MemoryLayout $LAYOUT() {
        return tagOIFI.$struct$LAYOUT;
    }
    static final VarHandle cb$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cb"));
    public static VarHandle cb$VH() {
        return tagOIFI.cb$VH;
    }
    public static int cb$get(MemorySegment seg) {
        return (int)tagOIFI.cb$VH.get(seg);
    }
    public static void cb$set( MemorySegment seg, int x) {
        tagOIFI.cb$VH.set(seg, x);
    }
    public static int cb$get(MemorySegment seg, long index) {
        return (int)tagOIFI.cb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cb$set(MemorySegment seg, long index, int x) {
        tagOIFI.cb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fMDIApp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fMDIApp"));
    public static VarHandle fMDIApp$VH() {
        return tagOIFI.fMDIApp$VH;
    }
    public static int fMDIApp$get(MemorySegment seg) {
        return (int)tagOIFI.fMDIApp$VH.get(seg);
    }
    public static void fMDIApp$set( MemorySegment seg, int x) {
        tagOIFI.fMDIApp$VH.set(seg, x);
    }
    public static int fMDIApp$get(MemorySegment seg, long index) {
        return (int)tagOIFI.fMDIApp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fMDIApp$set(MemorySegment seg, long index, int x) {
        tagOIFI.fMDIApp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwndFrame$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwndFrame"));
    public static VarHandle hwndFrame$VH() {
        return tagOIFI.hwndFrame$VH;
    }
    public static MemoryAddress hwndFrame$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagOIFI.hwndFrame$VH.get(seg);
    }
    public static void hwndFrame$set( MemorySegment seg, MemoryAddress x) {
        tagOIFI.hwndFrame$VH.set(seg, x);
    }
    public static MemoryAddress hwndFrame$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagOIFI.hwndFrame$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndFrame$set(MemorySegment seg, long index, MemoryAddress x) {
        tagOIFI.hwndFrame$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle haccel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("haccel"));
    public static VarHandle haccel$VH() {
        return tagOIFI.haccel$VH;
    }
    public static MemoryAddress haccel$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagOIFI.haccel$VH.get(seg);
    }
    public static void haccel$set( MemorySegment seg, MemoryAddress x) {
        tagOIFI.haccel$VH.set(seg, x);
    }
    public static MemoryAddress haccel$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagOIFI.haccel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void haccel$set(MemorySegment seg, long index, MemoryAddress x) {
        tagOIFI.haccel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cAccelEntries$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cAccelEntries"));
    public static VarHandle cAccelEntries$VH() {
        return tagOIFI.cAccelEntries$VH;
    }
    public static int cAccelEntries$get(MemorySegment seg) {
        return (int)tagOIFI.cAccelEntries$VH.get(seg);
    }
    public static void cAccelEntries$set( MemorySegment seg, int x) {
        tagOIFI.cAccelEntries$VH.set(seg, x);
    }
    public static int cAccelEntries$get(MemorySegment seg, long index) {
        return (int)tagOIFI.cAccelEntries$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cAccelEntries$set(MemorySegment seg, long index, int x) {
        tagOIFI.cAccelEntries$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


