// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _CRYPT_TIMESTAMP_REQUEST {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dwVersion"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("pszObjId"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("cbData"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_POINTER$LAYOUT.withName("pbData")
            ).withName("Parameters")
        ).withName("HashAlgorithm"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("cbData"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("pbData")
        ).withName("HashedMessage"),
        Constants$root.C_POINTER$LAYOUT.withName("pszTSAPolicyId"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("cbData"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("pbData")
        ).withName("Nonce"),
        Constants$root.C_LONG$LAYOUT.withName("fCertReq"),
        Constants$root.C_LONG$LAYOUT.withName("cExtension"),
        Constants$root.C_POINTER$LAYOUT.withName("rgExtension")
    ).withName("_CRYPT_TIMESTAMP_REQUEST");
    public static MemoryLayout $LAYOUT() {
        return _CRYPT_TIMESTAMP_REQUEST.$struct$LAYOUT;
    }
    static final VarHandle dwVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwVersion"));
    public static VarHandle dwVersion$VH() {
        return _CRYPT_TIMESTAMP_REQUEST.dwVersion$VH;
    }
    public static int dwVersion$get(MemorySegment seg) {
        return (int)_CRYPT_TIMESTAMP_REQUEST.dwVersion$VH.get(seg);
    }
    public static void dwVersion$set( MemorySegment seg, int x) {
        _CRYPT_TIMESTAMP_REQUEST.dwVersion$VH.set(seg, x);
    }
    public static int dwVersion$get(MemorySegment seg, long index) {
        return (int)_CRYPT_TIMESTAMP_REQUEST.dwVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwVersion$set(MemorySegment seg, long index, int x) {
        _CRYPT_TIMESTAMP_REQUEST.dwVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment HashAlgorithm$slice(MemorySegment seg) {
        return seg.asSlice(8, 24);
    }
    public static MemorySegment HashedMessage$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    static final VarHandle pszTSAPolicyId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pszTSAPolicyId"));
    public static VarHandle pszTSAPolicyId$VH() {
        return _CRYPT_TIMESTAMP_REQUEST.pszTSAPolicyId$VH;
    }
    public static MemoryAddress pszTSAPolicyId$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_TIMESTAMP_REQUEST.pszTSAPolicyId$VH.get(seg);
    }
    public static void pszTSAPolicyId$set( MemorySegment seg, MemoryAddress x) {
        _CRYPT_TIMESTAMP_REQUEST.pszTSAPolicyId$VH.set(seg, x);
    }
    public static MemoryAddress pszTSAPolicyId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_TIMESTAMP_REQUEST.pszTSAPolicyId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszTSAPolicyId$set(MemorySegment seg, long index, MemoryAddress x) {
        _CRYPT_TIMESTAMP_REQUEST.pszTSAPolicyId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Nonce$slice(MemorySegment seg) {
        return seg.asSlice(56, 16);
    }
    static final VarHandle fCertReq$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fCertReq"));
    public static VarHandle fCertReq$VH() {
        return _CRYPT_TIMESTAMP_REQUEST.fCertReq$VH;
    }
    public static int fCertReq$get(MemorySegment seg) {
        return (int)_CRYPT_TIMESTAMP_REQUEST.fCertReq$VH.get(seg);
    }
    public static void fCertReq$set( MemorySegment seg, int x) {
        _CRYPT_TIMESTAMP_REQUEST.fCertReq$VH.set(seg, x);
    }
    public static int fCertReq$get(MemorySegment seg, long index) {
        return (int)_CRYPT_TIMESTAMP_REQUEST.fCertReq$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fCertReq$set(MemorySegment seg, long index, int x) {
        _CRYPT_TIMESTAMP_REQUEST.fCertReq$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cExtension$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cExtension"));
    public static VarHandle cExtension$VH() {
        return _CRYPT_TIMESTAMP_REQUEST.cExtension$VH;
    }
    public static int cExtension$get(MemorySegment seg) {
        return (int)_CRYPT_TIMESTAMP_REQUEST.cExtension$VH.get(seg);
    }
    public static void cExtension$set( MemorySegment seg, int x) {
        _CRYPT_TIMESTAMP_REQUEST.cExtension$VH.set(seg, x);
    }
    public static int cExtension$get(MemorySegment seg, long index) {
        return (int)_CRYPT_TIMESTAMP_REQUEST.cExtension$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cExtension$set(MemorySegment seg, long index, int x) {
        _CRYPT_TIMESTAMP_REQUEST.cExtension$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rgExtension$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rgExtension"));
    public static VarHandle rgExtension$VH() {
        return _CRYPT_TIMESTAMP_REQUEST.rgExtension$VH;
    }
    public static MemoryAddress rgExtension$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_TIMESTAMP_REQUEST.rgExtension$VH.get(seg);
    }
    public static void rgExtension$set( MemorySegment seg, MemoryAddress x) {
        _CRYPT_TIMESTAMP_REQUEST.rgExtension$VH.set(seg, x);
    }
    public static MemoryAddress rgExtension$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_TIMESTAMP_REQUEST.rgExtension$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rgExtension$set(MemorySegment seg, long index, MemoryAddress x) {
        _CRYPT_TIMESTAMP_REQUEST.rgExtension$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


