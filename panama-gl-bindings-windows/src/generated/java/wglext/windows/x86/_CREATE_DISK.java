// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _CREATE_DISK {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("PartitionStyle"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("Signature")
            ).withName("Mbr"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("Data1"),
                    Constants$root.C_SHORT$LAYOUT.withName("Data2"),
                    Constants$root.C_SHORT$LAYOUT.withName("Data3"),
                    MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
                ).withName("DiskId"),
                Constants$root.C_LONG$LAYOUT.withName("MaxPartitionCount")
            ).withName("Gpt")
        ).withName("$anon$0")
    ).withName("_CREATE_DISK");
    public static MemoryLayout $LAYOUT() {
        return _CREATE_DISK.$struct$LAYOUT;
    }
    static final VarHandle PartitionStyle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PartitionStyle"));
    public static VarHandle PartitionStyle$VH() {
        return _CREATE_DISK.PartitionStyle$VH;
    }
    public static int PartitionStyle$get(MemorySegment seg) {
        return (int)_CREATE_DISK.PartitionStyle$VH.get(seg);
    }
    public static void PartitionStyle$set( MemorySegment seg, int x) {
        _CREATE_DISK.PartitionStyle$VH.set(seg, x);
    }
    public static int PartitionStyle$get(MemorySegment seg, long index) {
        return (int)_CREATE_DISK.PartitionStyle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PartitionStyle$set(MemorySegment seg, long index, int x) {
        _CREATE_DISK.PartitionStyle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Mbr$slice(MemorySegment seg) {
        return seg.asSlice(4, 4);
    }
    public static MemorySegment Gpt$slice(MemorySegment seg) {
        return seg.asSlice(4, 20);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


