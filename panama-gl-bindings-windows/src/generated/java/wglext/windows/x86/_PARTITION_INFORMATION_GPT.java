// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _PARTITION_INFORMATION_GPT {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Data1"),
            Constants$root.C_SHORT$LAYOUT.withName("Data2"),
            Constants$root.C_SHORT$LAYOUT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
        ).withName("PartitionType"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Data1"),
            Constants$root.C_SHORT$LAYOUT.withName("Data2"),
            Constants$root.C_SHORT$LAYOUT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
        ).withName("PartitionId"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Attributes"),
        MemoryLayout.sequenceLayout(36, Constants$root.C_SHORT$LAYOUT).withName("Name")
    ).withName("_PARTITION_INFORMATION_GPT");
    public static MemoryLayout $LAYOUT() {
        return _PARTITION_INFORMATION_GPT.$struct$LAYOUT;
    }
    public static MemorySegment PartitionType$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment PartitionId$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    static final VarHandle Attributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Attributes"));
    public static VarHandle Attributes$VH() {
        return _PARTITION_INFORMATION_GPT.Attributes$VH;
    }
    public static long Attributes$get(MemorySegment seg) {
        return (long)_PARTITION_INFORMATION_GPT.Attributes$VH.get(seg);
    }
    public static void Attributes$set( MemorySegment seg, long x) {
        _PARTITION_INFORMATION_GPT.Attributes$VH.set(seg, x);
    }
    public static long Attributes$get(MemorySegment seg, long index) {
        return (long)_PARTITION_INFORMATION_GPT.Attributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Attributes$set(MemorySegment seg, long index, long x) {
        _PARTITION_INFORMATION_GPT.Attributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Name$slice(MemorySegment seg) {
        return seg.asSlice(40, 72);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


