// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface RPC_SECURITY_CALLBACK_FN {

    void apply(java.lang.foreign.MemoryAddress Context);
    static MemorySegment allocate(RPC_SECURITY_CALLBACK_FN fi, MemorySession session) {
        return RuntimeHelper.upcallStub(RPC_SECURITY_CALLBACK_FN.class, fi, constants$647.RPC_SECURITY_CALLBACK_FN$FUNC, session);
    }
    static RPC_SECURITY_CALLBACK_FN ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _Context) -> {
            try {
                constants$647.RPC_SECURITY_CALLBACK_FN$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_Context);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


