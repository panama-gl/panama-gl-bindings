// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _RPC_HTTP_TRANSPORT_CREDENTIALS_W {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("TransportCredentials"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_LONG$LAYOUT.withName("AuthenticationTarget"),
        Constants$root.C_LONG$LAYOUT.withName("NumberOfAuthnSchemes"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("AuthnSchemes"),
        Constants$root.C_POINTER$LAYOUT.withName("ServerCertificateSubject")
    ).withName("_RPC_HTTP_TRANSPORT_CREDENTIALS_W");
    public static MemoryLayout $LAYOUT() {
        return _RPC_HTTP_TRANSPORT_CREDENTIALS_W.$struct$LAYOUT;
    }
    static final VarHandle TransportCredentials$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TransportCredentials"));
    public static VarHandle TransportCredentials$VH() {
        return _RPC_HTTP_TRANSPORT_CREDENTIALS_W.TransportCredentials$VH;
    }
    public static MemoryAddress TransportCredentials$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_RPC_HTTP_TRANSPORT_CREDENTIALS_W.TransportCredentials$VH.get(seg);
    }
    public static void TransportCredentials$set( MemorySegment seg, MemoryAddress x) {
        _RPC_HTTP_TRANSPORT_CREDENTIALS_W.TransportCredentials$VH.set(seg, x);
    }
    public static MemoryAddress TransportCredentials$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_RPC_HTTP_TRANSPORT_CREDENTIALS_W.TransportCredentials$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TransportCredentials$set(MemorySegment seg, long index, MemoryAddress x) {
        _RPC_HTTP_TRANSPORT_CREDENTIALS_W.TransportCredentials$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _RPC_HTTP_TRANSPORT_CREDENTIALS_W.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)_RPC_HTTP_TRANSPORT_CREDENTIALS_W.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        _RPC_HTTP_TRANSPORT_CREDENTIALS_W.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_RPC_HTTP_TRANSPORT_CREDENTIALS_W.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _RPC_HTTP_TRANSPORT_CREDENTIALS_W.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AuthenticationTarget$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AuthenticationTarget"));
    public static VarHandle AuthenticationTarget$VH() {
        return _RPC_HTTP_TRANSPORT_CREDENTIALS_W.AuthenticationTarget$VH;
    }
    public static int AuthenticationTarget$get(MemorySegment seg) {
        return (int)_RPC_HTTP_TRANSPORT_CREDENTIALS_W.AuthenticationTarget$VH.get(seg);
    }
    public static void AuthenticationTarget$set( MemorySegment seg, int x) {
        _RPC_HTTP_TRANSPORT_CREDENTIALS_W.AuthenticationTarget$VH.set(seg, x);
    }
    public static int AuthenticationTarget$get(MemorySegment seg, long index) {
        return (int)_RPC_HTTP_TRANSPORT_CREDENTIALS_W.AuthenticationTarget$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AuthenticationTarget$set(MemorySegment seg, long index, int x) {
        _RPC_HTTP_TRANSPORT_CREDENTIALS_W.AuthenticationTarget$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumberOfAuthnSchemes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumberOfAuthnSchemes"));
    public static VarHandle NumberOfAuthnSchemes$VH() {
        return _RPC_HTTP_TRANSPORT_CREDENTIALS_W.NumberOfAuthnSchemes$VH;
    }
    public static int NumberOfAuthnSchemes$get(MemorySegment seg) {
        return (int)_RPC_HTTP_TRANSPORT_CREDENTIALS_W.NumberOfAuthnSchemes$VH.get(seg);
    }
    public static void NumberOfAuthnSchemes$set( MemorySegment seg, int x) {
        _RPC_HTTP_TRANSPORT_CREDENTIALS_W.NumberOfAuthnSchemes$VH.set(seg, x);
    }
    public static int NumberOfAuthnSchemes$get(MemorySegment seg, long index) {
        return (int)_RPC_HTTP_TRANSPORT_CREDENTIALS_W.NumberOfAuthnSchemes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfAuthnSchemes$set(MemorySegment seg, long index, int x) {
        _RPC_HTTP_TRANSPORT_CREDENTIALS_W.NumberOfAuthnSchemes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AuthnSchemes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AuthnSchemes"));
    public static VarHandle AuthnSchemes$VH() {
        return _RPC_HTTP_TRANSPORT_CREDENTIALS_W.AuthnSchemes$VH;
    }
    public static MemoryAddress AuthnSchemes$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_RPC_HTTP_TRANSPORT_CREDENTIALS_W.AuthnSchemes$VH.get(seg);
    }
    public static void AuthnSchemes$set( MemorySegment seg, MemoryAddress x) {
        _RPC_HTTP_TRANSPORT_CREDENTIALS_W.AuthnSchemes$VH.set(seg, x);
    }
    public static MemoryAddress AuthnSchemes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_RPC_HTTP_TRANSPORT_CREDENTIALS_W.AuthnSchemes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AuthnSchemes$set(MemorySegment seg, long index, MemoryAddress x) {
        _RPC_HTTP_TRANSPORT_CREDENTIALS_W.AuthnSchemes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ServerCertificateSubject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ServerCertificateSubject"));
    public static VarHandle ServerCertificateSubject$VH() {
        return _RPC_HTTP_TRANSPORT_CREDENTIALS_W.ServerCertificateSubject$VH;
    }
    public static MemoryAddress ServerCertificateSubject$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_RPC_HTTP_TRANSPORT_CREDENTIALS_W.ServerCertificateSubject$VH.get(seg);
    }
    public static void ServerCertificateSubject$set( MemorySegment seg, MemoryAddress x) {
        _RPC_HTTP_TRANSPORT_CREDENTIALS_W.ServerCertificateSubject$VH.set(seg, x);
    }
    public static MemoryAddress ServerCertificateSubject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_RPC_HTTP_TRANSPORT_CREDENTIALS_W.ServerCertificateSubject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ServerCertificateSubject$set(MemorySegment seg, long index, MemoryAddress x) {
        _RPC_HTTP_TRANSPORT_CREDENTIALS_W.ServerCertificateSubject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


