// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _IDEREGS {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("bFeaturesReg"),
        Constants$root.C_CHAR$LAYOUT.withName("bSectorCountReg"),
        Constants$root.C_CHAR$LAYOUT.withName("bSectorNumberReg"),
        Constants$root.C_CHAR$LAYOUT.withName("bCylLowReg"),
        Constants$root.C_CHAR$LAYOUT.withName("bCylHighReg"),
        Constants$root.C_CHAR$LAYOUT.withName("bDriveHeadReg"),
        Constants$root.C_CHAR$LAYOUT.withName("bCommandReg"),
        Constants$root.C_CHAR$LAYOUT.withName("bReserved")
    ).withName("_IDEREGS");
    public static MemoryLayout $LAYOUT() {
        return _IDEREGS.$struct$LAYOUT;
    }
    static final VarHandle bFeaturesReg$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bFeaturesReg"));
    public static VarHandle bFeaturesReg$VH() {
        return _IDEREGS.bFeaturesReg$VH;
    }
    public static byte bFeaturesReg$get(MemorySegment seg) {
        return (byte)_IDEREGS.bFeaturesReg$VH.get(seg);
    }
    public static void bFeaturesReg$set( MemorySegment seg, byte x) {
        _IDEREGS.bFeaturesReg$VH.set(seg, x);
    }
    public static byte bFeaturesReg$get(MemorySegment seg, long index) {
        return (byte)_IDEREGS.bFeaturesReg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bFeaturesReg$set(MemorySegment seg, long index, byte x) {
        _IDEREGS.bFeaturesReg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bSectorCountReg$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bSectorCountReg"));
    public static VarHandle bSectorCountReg$VH() {
        return _IDEREGS.bSectorCountReg$VH;
    }
    public static byte bSectorCountReg$get(MemorySegment seg) {
        return (byte)_IDEREGS.bSectorCountReg$VH.get(seg);
    }
    public static void bSectorCountReg$set( MemorySegment seg, byte x) {
        _IDEREGS.bSectorCountReg$VH.set(seg, x);
    }
    public static byte bSectorCountReg$get(MemorySegment seg, long index) {
        return (byte)_IDEREGS.bSectorCountReg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bSectorCountReg$set(MemorySegment seg, long index, byte x) {
        _IDEREGS.bSectorCountReg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bSectorNumberReg$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bSectorNumberReg"));
    public static VarHandle bSectorNumberReg$VH() {
        return _IDEREGS.bSectorNumberReg$VH;
    }
    public static byte bSectorNumberReg$get(MemorySegment seg) {
        return (byte)_IDEREGS.bSectorNumberReg$VH.get(seg);
    }
    public static void bSectorNumberReg$set( MemorySegment seg, byte x) {
        _IDEREGS.bSectorNumberReg$VH.set(seg, x);
    }
    public static byte bSectorNumberReg$get(MemorySegment seg, long index) {
        return (byte)_IDEREGS.bSectorNumberReg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bSectorNumberReg$set(MemorySegment seg, long index, byte x) {
        _IDEREGS.bSectorNumberReg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bCylLowReg$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bCylLowReg"));
    public static VarHandle bCylLowReg$VH() {
        return _IDEREGS.bCylLowReg$VH;
    }
    public static byte bCylLowReg$get(MemorySegment seg) {
        return (byte)_IDEREGS.bCylLowReg$VH.get(seg);
    }
    public static void bCylLowReg$set( MemorySegment seg, byte x) {
        _IDEREGS.bCylLowReg$VH.set(seg, x);
    }
    public static byte bCylLowReg$get(MemorySegment seg, long index) {
        return (byte)_IDEREGS.bCylLowReg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bCylLowReg$set(MemorySegment seg, long index, byte x) {
        _IDEREGS.bCylLowReg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bCylHighReg$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bCylHighReg"));
    public static VarHandle bCylHighReg$VH() {
        return _IDEREGS.bCylHighReg$VH;
    }
    public static byte bCylHighReg$get(MemorySegment seg) {
        return (byte)_IDEREGS.bCylHighReg$VH.get(seg);
    }
    public static void bCylHighReg$set( MemorySegment seg, byte x) {
        _IDEREGS.bCylHighReg$VH.set(seg, x);
    }
    public static byte bCylHighReg$get(MemorySegment seg, long index) {
        return (byte)_IDEREGS.bCylHighReg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bCylHighReg$set(MemorySegment seg, long index, byte x) {
        _IDEREGS.bCylHighReg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bDriveHeadReg$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bDriveHeadReg"));
    public static VarHandle bDriveHeadReg$VH() {
        return _IDEREGS.bDriveHeadReg$VH;
    }
    public static byte bDriveHeadReg$get(MemorySegment seg) {
        return (byte)_IDEREGS.bDriveHeadReg$VH.get(seg);
    }
    public static void bDriveHeadReg$set( MemorySegment seg, byte x) {
        _IDEREGS.bDriveHeadReg$VH.set(seg, x);
    }
    public static byte bDriveHeadReg$get(MemorySegment seg, long index) {
        return (byte)_IDEREGS.bDriveHeadReg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bDriveHeadReg$set(MemorySegment seg, long index, byte x) {
        _IDEREGS.bDriveHeadReg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bCommandReg$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bCommandReg"));
    public static VarHandle bCommandReg$VH() {
        return _IDEREGS.bCommandReg$VH;
    }
    public static byte bCommandReg$get(MemorySegment seg) {
        return (byte)_IDEREGS.bCommandReg$VH.get(seg);
    }
    public static void bCommandReg$set( MemorySegment seg, byte x) {
        _IDEREGS.bCommandReg$VH.set(seg, x);
    }
    public static byte bCommandReg$get(MemorySegment seg, long index) {
        return (byte)_IDEREGS.bCommandReg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bCommandReg$set(MemorySegment seg, long index, byte x) {
        _IDEREGS.bCommandReg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bReserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bReserved"));
    public static VarHandle bReserved$VH() {
        return _IDEREGS.bReserved$VH;
    }
    public static byte bReserved$get(MemorySegment seg) {
        return (byte)_IDEREGS.bReserved$VH.get(seg);
    }
    public static void bReserved$set( MemorySegment seg, byte x) {
        _IDEREGS.bReserved$VH.set(seg, x);
    }
    public static byte bReserved$get(MemorySegment seg, long index) {
        return (byte)_IDEREGS.bReserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bReserved$set(MemorySegment seg, long index, byte x) {
        _IDEREGS.bReserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


