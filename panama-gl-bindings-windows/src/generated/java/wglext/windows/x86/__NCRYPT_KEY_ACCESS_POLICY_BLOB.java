// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class __NCRYPT_KEY_ACCESS_POLICY_BLOB {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dwVersion"),
        Constants$root.C_LONG$LAYOUT.withName("dwPolicyFlags"),
        Constants$root.C_LONG$LAYOUT.withName("cbUserSid"),
        Constants$root.C_LONG$LAYOUT.withName("cbApplicationSid")
    ).withName("__NCRYPT_KEY_ACCESS_POLICY_BLOB");
    public static MemoryLayout $LAYOUT() {
        return __NCRYPT_KEY_ACCESS_POLICY_BLOB.$struct$LAYOUT;
    }
    static final VarHandle dwVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwVersion"));
    public static VarHandle dwVersion$VH() {
        return __NCRYPT_KEY_ACCESS_POLICY_BLOB.dwVersion$VH;
    }
    public static int dwVersion$get(MemorySegment seg) {
        return (int)__NCRYPT_KEY_ACCESS_POLICY_BLOB.dwVersion$VH.get(seg);
    }
    public static void dwVersion$set( MemorySegment seg, int x) {
        __NCRYPT_KEY_ACCESS_POLICY_BLOB.dwVersion$VH.set(seg, x);
    }
    public static int dwVersion$get(MemorySegment seg, long index) {
        return (int)__NCRYPT_KEY_ACCESS_POLICY_BLOB.dwVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwVersion$set(MemorySegment seg, long index, int x) {
        __NCRYPT_KEY_ACCESS_POLICY_BLOB.dwVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwPolicyFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwPolicyFlags"));
    public static VarHandle dwPolicyFlags$VH() {
        return __NCRYPT_KEY_ACCESS_POLICY_BLOB.dwPolicyFlags$VH;
    }
    public static int dwPolicyFlags$get(MemorySegment seg) {
        return (int)__NCRYPT_KEY_ACCESS_POLICY_BLOB.dwPolicyFlags$VH.get(seg);
    }
    public static void dwPolicyFlags$set( MemorySegment seg, int x) {
        __NCRYPT_KEY_ACCESS_POLICY_BLOB.dwPolicyFlags$VH.set(seg, x);
    }
    public static int dwPolicyFlags$get(MemorySegment seg, long index) {
        return (int)__NCRYPT_KEY_ACCESS_POLICY_BLOB.dwPolicyFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwPolicyFlags$set(MemorySegment seg, long index, int x) {
        __NCRYPT_KEY_ACCESS_POLICY_BLOB.dwPolicyFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbUserSid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbUserSid"));
    public static VarHandle cbUserSid$VH() {
        return __NCRYPT_KEY_ACCESS_POLICY_BLOB.cbUserSid$VH;
    }
    public static int cbUserSid$get(MemorySegment seg) {
        return (int)__NCRYPT_KEY_ACCESS_POLICY_BLOB.cbUserSid$VH.get(seg);
    }
    public static void cbUserSid$set( MemorySegment seg, int x) {
        __NCRYPT_KEY_ACCESS_POLICY_BLOB.cbUserSid$VH.set(seg, x);
    }
    public static int cbUserSid$get(MemorySegment seg, long index) {
        return (int)__NCRYPT_KEY_ACCESS_POLICY_BLOB.cbUserSid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbUserSid$set(MemorySegment seg, long index, int x) {
        __NCRYPT_KEY_ACCESS_POLICY_BLOB.cbUserSid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbApplicationSid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbApplicationSid"));
    public static VarHandle cbApplicationSid$VH() {
        return __NCRYPT_KEY_ACCESS_POLICY_BLOB.cbApplicationSid$VH;
    }
    public static int cbApplicationSid$get(MemorySegment seg) {
        return (int)__NCRYPT_KEY_ACCESS_POLICY_BLOB.cbApplicationSid$VH.get(seg);
    }
    public static void cbApplicationSid$set( MemorySegment seg, int x) {
        __NCRYPT_KEY_ACCESS_POLICY_BLOB.cbApplicationSid$VH.set(seg, x);
    }
    public static int cbApplicationSid$get(MemorySegment seg, long index) {
        return (int)__NCRYPT_KEY_ACCESS_POLICY_BLOB.cbApplicationSid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbApplicationSid$set(MemorySegment seg, long index, int x) {
        __NCRYPT_KEY_ACCESS_POLICY_BLOB.cbApplicationSid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


