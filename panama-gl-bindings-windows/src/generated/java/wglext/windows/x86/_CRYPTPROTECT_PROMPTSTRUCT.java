// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _CRYPTPROTECT_PROMPTSTRUCT {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        Constants$root.C_LONG$LAYOUT.withName("dwPromptFlags"),
        Constants$root.C_POINTER$LAYOUT.withName("hwndApp"),
        Constants$root.C_POINTER$LAYOUT.withName("szPrompt")
    ).withName("_CRYPTPROTECT_PROMPTSTRUCT");
    public static MemoryLayout $LAYOUT() {
        return _CRYPTPROTECT_PROMPTSTRUCT.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return _CRYPTPROTECT_PROMPTSTRUCT.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)_CRYPTPROTECT_PROMPTSTRUCT.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        _CRYPTPROTECT_PROMPTSTRUCT.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)_CRYPTPROTECT_PROMPTSTRUCT.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        _CRYPTPROTECT_PROMPTSTRUCT.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwPromptFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwPromptFlags"));
    public static VarHandle dwPromptFlags$VH() {
        return _CRYPTPROTECT_PROMPTSTRUCT.dwPromptFlags$VH;
    }
    public static int dwPromptFlags$get(MemorySegment seg) {
        return (int)_CRYPTPROTECT_PROMPTSTRUCT.dwPromptFlags$VH.get(seg);
    }
    public static void dwPromptFlags$set( MemorySegment seg, int x) {
        _CRYPTPROTECT_PROMPTSTRUCT.dwPromptFlags$VH.set(seg, x);
    }
    public static int dwPromptFlags$get(MemorySegment seg, long index) {
        return (int)_CRYPTPROTECT_PROMPTSTRUCT.dwPromptFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwPromptFlags$set(MemorySegment seg, long index, int x) {
        _CRYPTPROTECT_PROMPTSTRUCT.dwPromptFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwndApp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwndApp"));
    public static VarHandle hwndApp$VH() {
        return _CRYPTPROTECT_PROMPTSTRUCT.hwndApp$VH;
    }
    public static MemoryAddress hwndApp$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CRYPTPROTECT_PROMPTSTRUCT.hwndApp$VH.get(seg);
    }
    public static void hwndApp$set( MemorySegment seg, MemoryAddress x) {
        _CRYPTPROTECT_PROMPTSTRUCT.hwndApp$VH.set(seg, x);
    }
    public static MemoryAddress hwndApp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CRYPTPROTECT_PROMPTSTRUCT.hwndApp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndApp$set(MemorySegment seg, long index, MemoryAddress x) {
        _CRYPTPROTECT_PROMPTSTRUCT.hwndApp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle szPrompt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("szPrompt"));
    public static VarHandle szPrompt$VH() {
        return _CRYPTPROTECT_PROMPTSTRUCT.szPrompt$VH;
    }
    public static MemoryAddress szPrompt$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CRYPTPROTECT_PROMPTSTRUCT.szPrompt$VH.get(seg);
    }
    public static void szPrompt$set( MemorySegment seg, MemoryAddress x) {
        _CRYPTPROTECT_PROMPTSTRUCT.szPrompt$VH.set(seg, x);
    }
    public static MemoryAddress szPrompt$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CRYPTPROTECT_PROMPTSTRUCT.szPrompt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void szPrompt$set(MemorySegment seg, long index, MemoryAddress x) {
        _CRYPTPROTECT_PROMPTSTRUCT.szPrompt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


