// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IOleInPlaceFrameVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetWindow"),
        Constants$root.C_POINTER$LAYOUT.withName("ContextSensitiveHelp"),
        Constants$root.C_POINTER$LAYOUT.withName("GetBorder"),
        Constants$root.C_POINTER$LAYOUT.withName("RequestBorderSpace"),
        Constants$root.C_POINTER$LAYOUT.withName("SetBorderSpace"),
        Constants$root.C_POINTER$LAYOUT.withName("SetActiveObject"),
        Constants$root.C_POINTER$LAYOUT.withName("InsertMenus"),
        Constants$root.C_POINTER$LAYOUT.withName("SetMenu"),
        Constants$root.C_POINTER$LAYOUT.withName("RemoveMenus"),
        Constants$root.C_POINTER$LAYOUT.withName("SetStatusText"),
        Constants$root.C_POINTER$LAYOUT.withName("EnableModeless"),
        Constants$root.C_POINTER$LAYOUT.withName("TranslateAcceleratorA")
    ).withName("IOleInPlaceFrameVtbl");
    public static MemoryLayout $LAYOUT() {
        return IOleInPlaceFrameVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IOleInPlaceFrameVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IOleInPlaceFrameVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceFrameVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceFrameVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IOleInPlaceFrameVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IOleInPlaceFrameVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceFrameVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceFrameVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IOleInPlaceFrameVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IOleInPlaceFrameVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceFrameVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceFrameVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor GetWindow$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetWindow$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.GetWindow$FUNC
    );
    public interface GetWindow {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetWindow fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetWindow.class, fi, IOleInPlaceFrameVtbl.GetWindow$FUNC, session);
        }
        static GetWindow ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.GetWindow$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetWindow$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetWindow"));
    public static VarHandle GetWindow$VH() {
        return IOleInPlaceFrameVtbl.GetWindow$VH;
    }
    public static MemoryAddress GetWindow$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.GetWindow$VH.get(seg);
    }
    public static void GetWindow$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceFrameVtbl.GetWindow$VH.set(seg, x);
    }
    public static MemoryAddress GetWindow$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.GetWindow$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetWindow$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceFrameVtbl.GetWindow$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetWindow GetWindow (MemorySegment segment, MemorySession session) {
        return GetWindow.ofAddress(GetWindow$get(segment), session);
    }
    static final FunctionDescriptor ContextSensitiveHelp$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ContextSensitiveHelp$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.ContextSensitiveHelp$FUNC
    );
    public interface ContextSensitiveHelp {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(ContextSensitiveHelp fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ContextSensitiveHelp.class, fi, IOleInPlaceFrameVtbl.ContextSensitiveHelp$FUNC, session);
        }
        static ContextSensitiveHelp ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.ContextSensitiveHelp$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ContextSensitiveHelp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ContextSensitiveHelp"));
    public static VarHandle ContextSensitiveHelp$VH() {
        return IOleInPlaceFrameVtbl.ContextSensitiveHelp$VH;
    }
    public static MemoryAddress ContextSensitiveHelp$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.ContextSensitiveHelp$VH.get(seg);
    }
    public static void ContextSensitiveHelp$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceFrameVtbl.ContextSensitiveHelp$VH.set(seg, x);
    }
    public static MemoryAddress ContextSensitiveHelp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.ContextSensitiveHelp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ContextSensitiveHelp$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceFrameVtbl.ContextSensitiveHelp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ContextSensitiveHelp ContextSensitiveHelp (MemorySegment segment, MemorySession session) {
        return ContextSensitiveHelp.ofAddress(ContextSensitiveHelp$get(segment), session);
    }
    static final FunctionDescriptor GetBorder$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBorder$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.GetBorder$FUNC
    );
    public interface GetBorder {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetBorder fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetBorder.class, fi, IOleInPlaceFrameVtbl.GetBorder$FUNC, session);
        }
        static GetBorder ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.GetBorder$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetBorder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetBorder"));
    public static VarHandle GetBorder$VH() {
        return IOleInPlaceFrameVtbl.GetBorder$VH;
    }
    public static MemoryAddress GetBorder$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.GetBorder$VH.get(seg);
    }
    public static void GetBorder$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceFrameVtbl.GetBorder$VH.set(seg, x);
    }
    public static MemoryAddress GetBorder$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.GetBorder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBorder$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceFrameVtbl.GetBorder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBorder GetBorder (MemorySegment segment, MemorySession session) {
        return GetBorder.ofAddress(GetBorder$get(segment), session);
    }
    static final FunctionDescriptor RequestBorderSpace$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RequestBorderSpace$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.RequestBorderSpace$FUNC
    );
    public interface RequestBorderSpace {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(RequestBorderSpace fi, MemorySession session) {
            return RuntimeHelper.upcallStub(RequestBorderSpace.class, fi, IOleInPlaceFrameVtbl.RequestBorderSpace$FUNC, session);
        }
        static RequestBorderSpace ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.RequestBorderSpace$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RequestBorderSpace$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RequestBorderSpace"));
    public static VarHandle RequestBorderSpace$VH() {
        return IOleInPlaceFrameVtbl.RequestBorderSpace$VH;
    }
    public static MemoryAddress RequestBorderSpace$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.RequestBorderSpace$VH.get(seg);
    }
    public static void RequestBorderSpace$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceFrameVtbl.RequestBorderSpace$VH.set(seg, x);
    }
    public static MemoryAddress RequestBorderSpace$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.RequestBorderSpace$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RequestBorderSpace$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceFrameVtbl.RequestBorderSpace$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RequestBorderSpace RequestBorderSpace (MemorySegment segment, MemorySession session) {
        return RequestBorderSpace.ofAddress(RequestBorderSpace$get(segment), session);
    }
    static final FunctionDescriptor SetBorderSpace$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetBorderSpace$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.SetBorderSpace$FUNC
    );
    public interface SetBorderSpace {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(SetBorderSpace fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetBorderSpace.class, fi, IOleInPlaceFrameVtbl.SetBorderSpace$FUNC, session);
        }
        static SetBorderSpace ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.SetBorderSpace$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetBorderSpace$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetBorderSpace"));
    public static VarHandle SetBorderSpace$VH() {
        return IOleInPlaceFrameVtbl.SetBorderSpace$VH;
    }
    public static MemoryAddress SetBorderSpace$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.SetBorderSpace$VH.get(seg);
    }
    public static void SetBorderSpace$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceFrameVtbl.SetBorderSpace$VH.set(seg, x);
    }
    public static MemoryAddress SetBorderSpace$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.SetBorderSpace$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetBorderSpace$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceFrameVtbl.SetBorderSpace$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetBorderSpace SetBorderSpace (MemorySegment segment, MemorySession session) {
        return SetBorderSpace.ofAddress(SetBorderSpace$get(segment), session);
    }
    static final FunctionDescriptor SetActiveObject$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetActiveObject$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.SetActiveObject$FUNC
    );
    public interface SetActiveObject {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(SetActiveObject fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetActiveObject.class, fi, IOleInPlaceFrameVtbl.SetActiveObject$FUNC, session);
        }
        static SetActiveObject ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.SetActiveObject$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetActiveObject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetActiveObject"));
    public static VarHandle SetActiveObject$VH() {
        return IOleInPlaceFrameVtbl.SetActiveObject$VH;
    }
    public static MemoryAddress SetActiveObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.SetActiveObject$VH.get(seg);
    }
    public static void SetActiveObject$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceFrameVtbl.SetActiveObject$VH.set(seg, x);
    }
    public static MemoryAddress SetActiveObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.SetActiveObject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetActiveObject$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceFrameVtbl.SetActiveObject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetActiveObject SetActiveObject (MemorySegment segment, MemorySession session) {
        return SetActiveObject.ofAddress(SetActiveObject$get(segment), session);
    }
    static final FunctionDescriptor InsertMenus$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle InsertMenus$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.InsertMenus$FUNC
    );
    public interface InsertMenus {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(InsertMenus fi, MemorySession session) {
            return RuntimeHelper.upcallStub(InsertMenus.class, fi, IOleInPlaceFrameVtbl.InsertMenus$FUNC, session);
        }
        static InsertMenus ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.InsertMenus$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle InsertMenus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("InsertMenus"));
    public static VarHandle InsertMenus$VH() {
        return IOleInPlaceFrameVtbl.InsertMenus$VH;
    }
    public static MemoryAddress InsertMenus$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.InsertMenus$VH.get(seg);
    }
    public static void InsertMenus$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceFrameVtbl.InsertMenus$VH.set(seg, x);
    }
    public static MemoryAddress InsertMenus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.InsertMenus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void InsertMenus$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceFrameVtbl.InsertMenus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static InsertMenus InsertMenus (MemorySegment segment, MemorySession session) {
        return InsertMenus.ofAddress(InsertMenus$get(segment), session);
    }
    static final FunctionDescriptor SetMenu$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetMenu$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.SetMenu$FUNC
    );
    public interface SetMenu {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(SetMenu fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetMenu.class, fi, IOleInPlaceFrameVtbl.SetMenu$FUNC, session);
        }
        static SetMenu ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.SetMenu$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetMenu$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetMenu"));
    public static VarHandle SetMenu$VH() {
        return IOleInPlaceFrameVtbl.SetMenu$VH;
    }
    public static MemoryAddress SetMenu$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.SetMenu$VH.get(seg);
    }
    public static void SetMenu$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceFrameVtbl.SetMenu$VH.set(seg, x);
    }
    public static MemoryAddress SetMenu$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.SetMenu$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetMenu$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceFrameVtbl.SetMenu$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetMenu SetMenu (MemorySegment segment, MemorySession session) {
        return SetMenu.ofAddress(SetMenu$get(segment), session);
    }
    static final FunctionDescriptor RemoveMenus$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RemoveMenus$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.RemoveMenus$FUNC
    );
    public interface RemoveMenus {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(RemoveMenus fi, MemorySession session) {
            return RuntimeHelper.upcallStub(RemoveMenus.class, fi, IOleInPlaceFrameVtbl.RemoveMenus$FUNC, session);
        }
        static RemoveMenus ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.RemoveMenus$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RemoveMenus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RemoveMenus"));
    public static VarHandle RemoveMenus$VH() {
        return IOleInPlaceFrameVtbl.RemoveMenus$VH;
    }
    public static MemoryAddress RemoveMenus$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.RemoveMenus$VH.get(seg);
    }
    public static void RemoveMenus$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceFrameVtbl.RemoveMenus$VH.set(seg, x);
    }
    public static MemoryAddress RemoveMenus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.RemoveMenus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RemoveMenus$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceFrameVtbl.RemoveMenus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RemoveMenus RemoveMenus (MemorySegment segment, MemorySession session) {
        return RemoveMenus.ofAddress(RemoveMenus$get(segment), session);
    }
    static final FunctionDescriptor SetStatusText$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetStatusText$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.SetStatusText$FUNC
    );
    public interface SetStatusText {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(SetStatusText fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetStatusText.class, fi, IOleInPlaceFrameVtbl.SetStatusText$FUNC, session);
        }
        static SetStatusText ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.SetStatusText$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetStatusText$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetStatusText"));
    public static VarHandle SetStatusText$VH() {
        return IOleInPlaceFrameVtbl.SetStatusText$VH;
    }
    public static MemoryAddress SetStatusText$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.SetStatusText$VH.get(seg);
    }
    public static void SetStatusText$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceFrameVtbl.SetStatusText$VH.set(seg, x);
    }
    public static MemoryAddress SetStatusText$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.SetStatusText$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetStatusText$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceFrameVtbl.SetStatusText$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetStatusText SetStatusText (MemorySegment segment, MemorySession session) {
        return SetStatusText.ofAddress(SetStatusText$get(segment), session);
    }
    static final FunctionDescriptor EnableModeless$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle EnableModeless$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.EnableModeless$FUNC
    );
    public interface EnableModeless {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(EnableModeless fi, MemorySession session) {
            return RuntimeHelper.upcallStub(EnableModeless.class, fi, IOleInPlaceFrameVtbl.EnableModeless$FUNC, session);
        }
        static EnableModeless ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.EnableModeless$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle EnableModeless$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EnableModeless"));
    public static VarHandle EnableModeless$VH() {
        return IOleInPlaceFrameVtbl.EnableModeless$VH;
    }
    public static MemoryAddress EnableModeless$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.EnableModeless$VH.get(seg);
    }
    public static void EnableModeless$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceFrameVtbl.EnableModeless$VH.set(seg, x);
    }
    public static MemoryAddress EnableModeless$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.EnableModeless$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnableModeless$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceFrameVtbl.EnableModeless$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnableModeless EnableModeless (MemorySegment segment, MemorySession session) {
        return EnableModeless.ofAddress(EnableModeless$get(segment), session);
    }
    static final FunctionDescriptor TranslateAcceleratorA$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle TranslateAcceleratorA$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.TranslateAcceleratorA$FUNC
    );
    public interface TranslateAcceleratorA {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, short _x2);
        static MemorySegment allocate(TranslateAcceleratorA fi, MemorySession session) {
            return RuntimeHelper.upcallStub(TranslateAcceleratorA.class, fi, IOleInPlaceFrameVtbl.TranslateAcceleratorA$FUNC, session);
        }
        static TranslateAcceleratorA ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, short __x2) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.TranslateAcceleratorA$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle TranslateAcceleratorA$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TranslateAcceleratorA"));
    public static VarHandle TranslateAcceleratorA$VH() {
        return IOleInPlaceFrameVtbl.TranslateAcceleratorA$VH;
    }
    public static MemoryAddress TranslateAcceleratorA$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.TranslateAcceleratorA$VH.get(seg);
    }
    public static void TranslateAcceleratorA$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceFrameVtbl.TranslateAcceleratorA$VH.set(seg, x);
    }
    public static MemoryAddress TranslateAcceleratorA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleInPlaceFrameVtbl.TranslateAcceleratorA$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TranslateAcceleratorA$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceFrameVtbl.TranslateAcceleratorA$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static TranslateAcceleratorA TranslateAcceleratorA (MemorySegment segment, MemorySession session) {
        return TranslateAcceleratorA.ofAddress(TranslateAcceleratorA$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


