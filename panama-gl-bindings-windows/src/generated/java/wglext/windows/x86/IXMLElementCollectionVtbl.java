// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IXMLElementCollectionVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfoCount"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("GetIDsOfNames"),
        Constants$root.C_POINTER$LAYOUT.withName("Invoke"),
        Constants$root.C_POINTER$LAYOUT.withName("put_length"),
        Constants$root.C_POINTER$LAYOUT.withName("get_length"),
        Constants$root.C_POINTER$LAYOUT.withName("get__newEnum"),
        Constants$root.C_POINTER$LAYOUT.withName("item")
    ).withName("IXMLElementCollectionVtbl");
    public static MemoryLayout $LAYOUT() {
        return IXMLElementCollectionVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IXMLElementCollectionVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IXMLElementCollectionVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IXMLElementCollectionVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IXMLElementCollectionVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IXMLElementCollectionVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElementCollectionVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IXMLElementCollectionVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IXMLElementCollectionVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IXMLElementCollectionVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IXMLElementCollectionVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IXMLElementCollectionVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElementCollectionVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IXMLElementCollectionVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IXMLElementCollectionVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IXMLElementCollectionVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IXMLElementCollectionVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IXMLElementCollectionVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElementCollectionVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor GetTypeInfoCount$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoCount$MH = RuntimeHelper.downcallHandle(
        IXMLElementCollectionVtbl.GetTypeInfoCount$FUNC
    );
    public interface GetTypeInfoCount {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetTypeInfoCount fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, IXMLElementCollectionVtbl.GetTypeInfoCount$FUNC, session);
        }
        static GetTypeInfoCount ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLElementCollectionVtbl.GetTypeInfoCount$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfoCount"));
    public static VarHandle GetTypeInfoCount$VH() {
        return IXMLElementCollectionVtbl.GetTypeInfoCount$VH;
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.GetTypeInfoCount$VH.get(seg);
    }
    public static void GetTypeInfoCount$set( MemorySegment seg, MemoryAddress x) {
        IXMLElementCollectionVtbl.GetTypeInfoCount$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.GetTypeInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElementCollectionVtbl.GetTypeInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount (MemorySegment segment, MemorySession session) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment), session);
    }
    static final FunctionDescriptor GetTypeInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfo$MH = RuntimeHelper.downcallHandle(
        IXMLElementCollectionVtbl.GetTypeInfo$FUNC
    );
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(GetTypeInfo fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, IXMLElementCollectionVtbl.GetTypeInfo$FUNC, session);
        }
        static GetTypeInfo ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IXMLElementCollectionVtbl.GetTypeInfo$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfo"));
    public static VarHandle GetTypeInfo$VH() {
        return IXMLElementCollectionVtbl.GetTypeInfo$VH;
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.GetTypeInfo$VH.get(seg);
    }
    public static void GetTypeInfo$set( MemorySegment seg, MemoryAddress x) {
        IXMLElementCollectionVtbl.GetTypeInfo$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.GetTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElementCollectionVtbl.GetTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo (MemorySegment segment, MemorySession session) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), session);
    }
    static final FunctionDescriptor GetIDsOfNames$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIDsOfNames$MH = RuntimeHelper.downcallHandle(
        IXMLElementCollectionVtbl.GetIDsOfNames$FUNC
    );
    public interface GetIDsOfNames {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, int _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(GetIDsOfNames fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, IXMLElementCollectionVtbl.GetIDsOfNames$FUNC, session);
        }
        static GetIDsOfNames ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, int __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    return (int)IXMLElementCollectionVtbl.GetIDsOfNames$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, __x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIDsOfNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetIDsOfNames"));
    public static VarHandle GetIDsOfNames$VH() {
        return IXMLElementCollectionVtbl.GetIDsOfNames$VH;
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.GetIDsOfNames$VH.get(seg);
    }
    public static void GetIDsOfNames$set( MemorySegment seg, MemoryAddress x) {
        IXMLElementCollectionVtbl.GetIDsOfNames$VH.set(seg, x);
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.GetIDsOfNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElementCollectionVtbl.GetIDsOfNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames (MemorySegment segment, MemorySession session) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment), session);
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invoke$MH = RuntimeHelper.downcallHandle(
        IXMLElementCollectionVtbl.Invoke$FUNC
    );
    public interface Invoke {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, int _x3, short _x4, java.lang.foreign.MemoryAddress _x5, java.lang.foreign.MemoryAddress _x6, java.lang.foreign.MemoryAddress _x7, java.lang.foreign.MemoryAddress _x8);
        static MemorySegment allocate(Invoke fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IXMLElementCollectionVtbl.Invoke$FUNC, session);
        }
        static Invoke ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, int __x3, short __x4, java.lang.foreign.MemoryAddress __x5, java.lang.foreign.MemoryAddress __x6, java.lang.foreign.MemoryAddress __x7, java.lang.foreign.MemoryAddress __x8) -> {
                try {
                    return (int)IXMLElementCollectionVtbl.Invoke$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, __x3, __x4, (java.lang.foreign.Addressable)__x5, (java.lang.foreign.Addressable)__x6, (java.lang.foreign.Addressable)__x7, (java.lang.foreign.Addressable)__x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Invoke"));
    public static VarHandle Invoke$VH() {
        return IXMLElementCollectionVtbl.Invoke$VH;
    }
    public static MemoryAddress Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.Invoke$VH.get(seg);
    }
    public static void Invoke$set( MemorySegment seg, MemoryAddress x) {
        IXMLElementCollectionVtbl.Invoke$VH.set(seg, x);
    }
    public static MemoryAddress Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElementCollectionVtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke (MemorySegment segment, MemorySession session) {
        return Invoke.ofAddress(Invoke$get(segment), session);
    }
    static final FunctionDescriptor put_length$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle put_length$MH = RuntimeHelper.downcallHandle(
        IXMLElementCollectionVtbl.put_length$FUNC
    );
    public interface put_length {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(put_length fi, MemorySession session) {
            return RuntimeHelper.upcallStub(put_length.class, fi, IXMLElementCollectionVtbl.put_length$FUNC, session);
        }
        static put_length ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)IXMLElementCollectionVtbl.put_length$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("put_length"));
    public static VarHandle put_length$VH() {
        return IXMLElementCollectionVtbl.put_length$VH;
    }
    public static MemoryAddress put_length$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.put_length$VH.get(seg);
    }
    public static void put_length$set( MemorySegment seg, MemoryAddress x) {
        IXMLElementCollectionVtbl.put_length$VH.set(seg, x);
    }
    public static MemoryAddress put_length$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.put_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_length$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElementCollectionVtbl.put_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_length put_length (MemorySegment segment, MemorySession session) {
        return put_length.ofAddress(put_length$get(segment), session);
    }
    static final FunctionDescriptor get_length$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_length$MH = RuntimeHelper.downcallHandle(
        IXMLElementCollectionVtbl.get_length$FUNC
    );
    public interface get_length {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_length fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_length.class, fi, IXMLElementCollectionVtbl.get_length$FUNC, session);
        }
        static get_length ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLElementCollectionVtbl.get_length$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_length"));
    public static VarHandle get_length$VH() {
        return IXMLElementCollectionVtbl.get_length$VH;
    }
    public static MemoryAddress get_length$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.get_length$VH.get(seg);
    }
    public static void get_length$set( MemorySegment seg, MemoryAddress x) {
        IXMLElementCollectionVtbl.get_length$VH.set(seg, x);
    }
    public static MemoryAddress get_length$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.get_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_length$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElementCollectionVtbl.get_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_length get_length (MemorySegment segment, MemorySession session) {
        return get_length.ofAddress(get_length$get(segment), session);
    }
    static final FunctionDescriptor get__newEnum$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get__newEnum$MH = RuntimeHelper.downcallHandle(
        IXMLElementCollectionVtbl.get__newEnum$FUNC
    );
    public interface get__newEnum {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get__newEnum fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get__newEnum.class, fi, IXMLElementCollectionVtbl.get__newEnum$FUNC, session);
        }
        static get__newEnum ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLElementCollectionVtbl.get__newEnum$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get__newEnum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get__newEnum"));
    public static VarHandle get__newEnum$VH() {
        return IXMLElementCollectionVtbl.get__newEnum$VH;
    }
    public static MemoryAddress get__newEnum$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.get__newEnum$VH.get(seg);
    }
    public static void get__newEnum$set( MemorySegment seg, MemoryAddress x) {
        IXMLElementCollectionVtbl.get__newEnum$VH.set(seg, x);
    }
    public static MemoryAddress get__newEnum$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.get__newEnum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get__newEnum$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElementCollectionVtbl.get__newEnum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get__newEnum get__newEnum (MemorySegment segment, MemorySession session) {
        return get__newEnum.ofAddress(get__newEnum$get(segment), session);
    }
    static final FunctionDescriptor item$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle item$MH = RuntimeHelper.downcallHandle(
        IXMLElementCollectionVtbl.item$FUNC
    );
    public interface item {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(item fi, MemorySession session) {
            return RuntimeHelper.upcallStub(item.class, fi, IXMLElementCollectionVtbl.item$FUNC, session);
        }
        static item ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IXMLElementCollectionVtbl.item$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle item$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("item"));
    public static VarHandle item$VH() {
        return IXMLElementCollectionVtbl.item$VH;
    }
    public static MemoryAddress item$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.item$VH.get(seg);
    }
    public static void item$set( MemorySegment seg, MemoryAddress x) {
        IXMLElementCollectionVtbl.item$VH.set(seg, x);
    }
    public static MemoryAddress item$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLElementCollectionVtbl.item$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void item$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElementCollectionVtbl.item$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static item item (MemorySegment segment, MemorySession session) {
        return item.ofAddress(item$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


