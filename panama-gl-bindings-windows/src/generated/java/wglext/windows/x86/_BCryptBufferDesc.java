// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _BCryptBufferDesc {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("ulVersion"),
        Constants$root.C_LONG$LAYOUT.withName("cBuffers"),
        Constants$root.C_POINTER$LAYOUT.withName("pBuffers")
    ).withName("_BCryptBufferDesc");
    public static MemoryLayout $LAYOUT() {
        return _BCryptBufferDesc.$struct$LAYOUT;
    }
    static final VarHandle ulVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ulVersion"));
    public static VarHandle ulVersion$VH() {
        return _BCryptBufferDesc.ulVersion$VH;
    }
    public static int ulVersion$get(MemorySegment seg) {
        return (int)_BCryptBufferDesc.ulVersion$VH.get(seg);
    }
    public static void ulVersion$set( MemorySegment seg, int x) {
        _BCryptBufferDesc.ulVersion$VH.set(seg, x);
    }
    public static int ulVersion$get(MemorySegment seg, long index) {
        return (int)_BCryptBufferDesc.ulVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ulVersion$set(MemorySegment seg, long index, int x) {
        _BCryptBufferDesc.ulVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cBuffers$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cBuffers"));
    public static VarHandle cBuffers$VH() {
        return _BCryptBufferDesc.cBuffers$VH;
    }
    public static int cBuffers$get(MemorySegment seg) {
        return (int)_BCryptBufferDesc.cBuffers$VH.get(seg);
    }
    public static void cBuffers$set( MemorySegment seg, int x) {
        _BCryptBufferDesc.cBuffers$VH.set(seg, x);
    }
    public static int cBuffers$get(MemorySegment seg, long index) {
        return (int)_BCryptBufferDesc.cBuffers$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cBuffers$set(MemorySegment seg, long index, int x) {
        _BCryptBufferDesc.cBuffers$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pBuffers$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pBuffers"));
    public static VarHandle pBuffers$VH() {
        return _BCryptBufferDesc.pBuffers$VH;
    }
    public static MemoryAddress pBuffers$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_BCryptBufferDesc.pBuffers$VH.get(seg);
    }
    public static void pBuffers$set( MemorySegment seg, MemoryAddress x) {
        _BCryptBufferDesc.pBuffers$VH.set(seg, x);
    }
    public static MemoryAddress pBuffers$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_BCryptBufferDesc.pBuffers$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pBuffers$set(MemorySegment seg, long index, MemoryAddress x) {
        _BCryptBufferDesc.pBuffers$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


