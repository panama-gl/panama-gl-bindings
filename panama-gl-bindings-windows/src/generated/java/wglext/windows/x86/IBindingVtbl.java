// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IBindingVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("Abort"),
        Constants$root.C_POINTER$LAYOUT.withName("Suspend"),
        Constants$root.C_POINTER$LAYOUT.withName("Resume"),
        Constants$root.C_POINTER$LAYOUT.withName("SetPriority"),
        Constants$root.C_POINTER$LAYOUT.withName("GetPriority"),
        Constants$root.C_POINTER$LAYOUT.withName("GetBindResult")
    ).withName("IBindingVtbl");
    public static MemoryLayout $LAYOUT() {
        return IBindingVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IBindingVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IBindingVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IBindingVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IBindingVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IBindingVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IBindingVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IBindingVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindingVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IBindingVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IBindingVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IBindingVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IBindingVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IBindingVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IBindingVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IBindingVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindingVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IBindingVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IBindingVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IBindingVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IBindingVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IBindingVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IBindingVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IBindingVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindingVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor Abort$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Abort$MH = RuntimeHelper.downcallHandle(
        IBindingVtbl.Abort$FUNC
    );
    public interface Abort {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Abort fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Abort.class, fi, IBindingVtbl.Abort$FUNC, session);
        }
        static Abort ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IBindingVtbl.Abort$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Abort$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Abort"));
    public static VarHandle Abort$VH() {
        return IBindingVtbl.Abort$VH;
    }
    public static MemoryAddress Abort$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IBindingVtbl.Abort$VH.get(seg);
    }
    public static void Abort$set( MemorySegment seg, MemoryAddress x) {
        IBindingVtbl.Abort$VH.set(seg, x);
    }
    public static MemoryAddress Abort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IBindingVtbl.Abort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Abort$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindingVtbl.Abort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Abort Abort (MemorySegment segment, MemorySession session) {
        return Abort.ofAddress(Abort$get(segment), session);
    }
    static final FunctionDescriptor Suspend$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Suspend$MH = RuntimeHelper.downcallHandle(
        IBindingVtbl.Suspend$FUNC
    );
    public interface Suspend {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Suspend fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Suspend.class, fi, IBindingVtbl.Suspend$FUNC, session);
        }
        static Suspend ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IBindingVtbl.Suspend$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Suspend$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Suspend"));
    public static VarHandle Suspend$VH() {
        return IBindingVtbl.Suspend$VH;
    }
    public static MemoryAddress Suspend$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IBindingVtbl.Suspend$VH.get(seg);
    }
    public static void Suspend$set( MemorySegment seg, MemoryAddress x) {
        IBindingVtbl.Suspend$VH.set(seg, x);
    }
    public static MemoryAddress Suspend$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IBindingVtbl.Suspend$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Suspend$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindingVtbl.Suspend$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Suspend Suspend (MemorySegment segment, MemorySession session) {
        return Suspend.ofAddress(Suspend$get(segment), session);
    }
    static final FunctionDescriptor Resume$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Resume$MH = RuntimeHelper.downcallHandle(
        IBindingVtbl.Resume$FUNC
    );
    public interface Resume {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Resume fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Resume.class, fi, IBindingVtbl.Resume$FUNC, session);
        }
        static Resume ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IBindingVtbl.Resume$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Resume$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Resume"));
    public static VarHandle Resume$VH() {
        return IBindingVtbl.Resume$VH;
    }
    public static MemoryAddress Resume$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IBindingVtbl.Resume$VH.get(seg);
    }
    public static void Resume$set( MemorySegment seg, MemoryAddress x) {
        IBindingVtbl.Resume$VH.set(seg, x);
    }
    public static MemoryAddress Resume$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IBindingVtbl.Resume$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Resume$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindingVtbl.Resume$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Resume Resume (MemorySegment segment, MemorySession session) {
        return Resume.ofAddress(Resume$get(segment), session);
    }
    static final FunctionDescriptor SetPriority$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetPriority$MH = RuntimeHelper.downcallHandle(
        IBindingVtbl.SetPriority$FUNC
    );
    public interface SetPriority {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(SetPriority fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetPriority.class, fi, IBindingVtbl.SetPriority$FUNC, session);
        }
        static SetPriority ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)IBindingVtbl.SetPriority$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetPriority$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetPriority"));
    public static VarHandle SetPriority$VH() {
        return IBindingVtbl.SetPriority$VH;
    }
    public static MemoryAddress SetPriority$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IBindingVtbl.SetPriority$VH.get(seg);
    }
    public static void SetPriority$set( MemorySegment seg, MemoryAddress x) {
        IBindingVtbl.SetPriority$VH.set(seg, x);
    }
    public static MemoryAddress SetPriority$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IBindingVtbl.SetPriority$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetPriority$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindingVtbl.SetPriority$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetPriority SetPriority (MemorySegment segment, MemorySession session) {
        return SetPriority.ofAddress(SetPriority$get(segment), session);
    }
    static final FunctionDescriptor GetPriority$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetPriority$MH = RuntimeHelper.downcallHandle(
        IBindingVtbl.GetPriority$FUNC
    );
    public interface GetPriority {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetPriority fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetPriority.class, fi, IBindingVtbl.GetPriority$FUNC, session);
        }
        static GetPriority ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IBindingVtbl.GetPriority$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPriority$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetPriority"));
    public static VarHandle GetPriority$VH() {
        return IBindingVtbl.GetPriority$VH;
    }
    public static MemoryAddress GetPriority$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IBindingVtbl.GetPriority$VH.get(seg);
    }
    public static void GetPriority$set( MemorySegment seg, MemoryAddress x) {
        IBindingVtbl.GetPriority$VH.set(seg, x);
    }
    public static MemoryAddress GetPriority$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IBindingVtbl.GetPriority$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPriority$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindingVtbl.GetPriority$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPriority GetPriority (MemorySegment segment, MemorySession session) {
        return GetPriority.ofAddress(GetPriority$get(segment), session);
    }
    static final FunctionDescriptor GetBindResult$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBindResult$MH = RuntimeHelper.downcallHandle(
        IBindingVtbl.GetBindResult$FUNC
    );
    public interface GetBindResult {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(GetBindResult fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetBindResult.class, fi, IBindingVtbl.GetBindResult$FUNC, session);
        }
        static GetBindResult ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (int)IBindingVtbl.GetBindResult$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetBindResult$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetBindResult"));
    public static VarHandle GetBindResult$VH() {
        return IBindingVtbl.GetBindResult$VH;
    }
    public static MemoryAddress GetBindResult$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IBindingVtbl.GetBindResult$VH.get(seg);
    }
    public static void GetBindResult$set( MemorySegment seg, MemoryAddress x) {
        IBindingVtbl.GetBindResult$VH.set(seg, x);
    }
    public static MemoryAddress GetBindResult$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IBindingVtbl.GetBindResult$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBindResult$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindingVtbl.GetBindResult$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBindResult GetBindResult (MemorySegment segment, MemorySession session) {
        return GetBindResult.ofAddress(GetBindResult$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


