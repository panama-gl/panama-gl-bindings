// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _SHFILEOPSTRUCTW {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("hwnd"),
        Constants$root.C_LONG$LAYOUT.withName("wFunc"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("pFrom"),
        Constants$root.C_POINTER$LAYOUT.withName("pTo"),
        Constants$root.C_SHORT$LAYOUT.withName("fFlags"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_LONG$LAYOUT.withName("fAnyOperationsAborted"),
        Constants$root.C_POINTER$LAYOUT.withName("hNameMappings"),
        Constants$root.C_POINTER$LAYOUT.withName("lpszProgressTitle")
    ).withName("_SHFILEOPSTRUCTW");
    public static MemoryLayout $LAYOUT() {
        return _SHFILEOPSTRUCTW.$struct$LAYOUT;
    }
    static final VarHandle hwnd$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwnd"));
    public static VarHandle hwnd$VH() {
        return _SHFILEOPSTRUCTW.hwnd$VH;
    }
    public static MemoryAddress hwnd$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_SHFILEOPSTRUCTW.hwnd$VH.get(seg);
    }
    public static void hwnd$set( MemorySegment seg, MemoryAddress x) {
        _SHFILEOPSTRUCTW.hwnd$VH.set(seg, x);
    }
    public static MemoryAddress hwnd$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_SHFILEOPSTRUCTW.hwnd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwnd$set(MemorySegment seg, long index, MemoryAddress x) {
        _SHFILEOPSTRUCTW.hwnd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wFunc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wFunc"));
    public static VarHandle wFunc$VH() {
        return _SHFILEOPSTRUCTW.wFunc$VH;
    }
    public static int wFunc$get(MemorySegment seg) {
        return (int)_SHFILEOPSTRUCTW.wFunc$VH.get(seg);
    }
    public static void wFunc$set( MemorySegment seg, int x) {
        _SHFILEOPSTRUCTW.wFunc$VH.set(seg, x);
    }
    public static int wFunc$get(MemorySegment seg, long index) {
        return (int)_SHFILEOPSTRUCTW.wFunc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wFunc$set(MemorySegment seg, long index, int x) {
        _SHFILEOPSTRUCTW.wFunc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pFrom$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pFrom"));
    public static VarHandle pFrom$VH() {
        return _SHFILEOPSTRUCTW.pFrom$VH;
    }
    public static MemoryAddress pFrom$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_SHFILEOPSTRUCTW.pFrom$VH.get(seg);
    }
    public static void pFrom$set( MemorySegment seg, MemoryAddress x) {
        _SHFILEOPSTRUCTW.pFrom$VH.set(seg, x);
    }
    public static MemoryAddress pFrom$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_SHFILEOPSTRUCTW.pFrom$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pFrom$set(MemorySegment seg, long index, MemoryAddress x) {
        _SHFILEOPSTRUCTW.pFrom$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pTo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pTo"));
    public static VarHandle pTo$VH() {
        return _SHFILEOPSTRUCTW.pTo$VH;
    }
    public static MemoryAddress pTo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_SHFILEOPSTRUCTW.pTo$VH.get(seg);
    }
    public static void pTo$set( MemorySegment seg, MemoryAddress x) {
        _SHFILEOPSTRUCTW.pTo$VH.set(seg, x);
    }
    public static MemoryAddress pTo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_SHFILEOPSTRUCTW.pTo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pTo$set(MemorySegment seg, long index, MemoryAddress x) {
        _SHFILEOPSTRUCTW.pTo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fFlags"));
    public static VarHandle fFlags$VH() {
        return _SHFILEOPSTRUCTW.fFlags$VH;
    }
    public static short fFlags$get(MemorySegment seg) {
        return (short)_SHFILEOPSTRUCTW.fFlags$VH.get(seg);
    }
    public static void fFlags$set( MemorySegment seg, short x) {
        _SHFILEOPSTRUCTW.fFlags$VH.set(seg, x);
    }
    public static short fFlags$get(MemorySegment seg, long index) {
        return (short)_SHFILEOPSTRUCTW.fFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fFlags$set(MemorySegment seg, long index, short x) {
        _SHFILEOPSTRUCTW.fFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fAnyOperationsAborted$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fAnyOperationsAborted"));
    public static VarHandle fAnyOperationsAborted$VH() {
        return _SHFILEOPSTRUCTW.fAnyOperationsAborted$VH;
    }
    public static int fAnyOperationsAborted$get(MemorySegment seg) {
        return (int)_SHFILEOPSTRUCTW.fAnyOperationsAborted$VH.get(seg);
    }
    public static void fAnyOperationsAborted$set( MemorySegment seg, int x) {
        _SHFILEOPSTRUCTW.fAnyOperationsAborted$VH.set(seg, x);
    }
    public static int fAnyOperationsAborted$get(MemorySegment seg, long index) {
        return (int)_SHFILEOPSTRUCTW.fAnyOperationsAborted$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fAnyOperationsAborted$set(MemorySegment seg, long index, int x) {
        _SHFILEOPSTRUCTW.fAnyOperationsAborted$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hNameMappings$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hNameMappings"));
    public static VarHandle hNameMappings$VH() {
        return _SHFILEOPSTRUCTW.hNameMappings$VH;
    }
    public static MemoryAddress hNameMappings$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_SHFILEOPSTRUCTW.hNameMappings$VH.get(seg);
    }
    public static void hNameMappings$set( MemorySegment seg, MemoryAddress x) {
        _SHFILEOPSTRUCTW.hNameMappings$VH.set(seg, x);
    }
    public static MemoryAddress hNameMappings$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_SHFILEOPSTRUCTW.hNameMappings$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hNameMappings$set(MemorySegment seg, long index, MemoryAddress x) {
        _SHFILEOPSTRUCTW.hNameMappings$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpszProgressTitle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpszProgressTitle"));
    public static VarHandle lpszProgressTitle$VH() {
        return _SHFILEOPSTRUCTW.lpszProgressTitle$VH;
    }
    public static MemoryAddress lpszProgressTitle$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_SHFILEOPSTRUCTW.lpszProgressTitle$VH.get(seg);
    }
    public static void lpszProgressTitle$set( MemorySegment seg, MemoryAddress x) {
        _SHFILEOPSTRUCTW.lpszProgressTitle$VH.set(seg, x);
    }
    public static MemoryAddress lpszProgressTitle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_SHFILEOPSTRUCTW.lpszProgressTitle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpszProgressTitle$set(MemorySegment seg, long index, MemoryAddress x) {
        _SHFILEOPSTRUCTW.lpszProgressTitle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


