// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _SD_CHANGE_MACHINE_SID_OUTPUT {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("NumSDChangedSuccess"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("NumSDChangedFail"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("NumSDUnused"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("NumSDTotal"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("NumMftSDChangedSuccess"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("NumMftSDChangedFail"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("NumMftSDTotal")
    ).withName("_SD_CHANGE_MACHINE_SID_OUTPUT");
    public static MemoryLayout $LAYOUT() {
        return _SD_CHANGE_MACHINE_SID_OUTPUT.$struct$LAYOUT;
    }
    static final VarHandle NumSDChangedSuccess$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumSDChangedSuccess"));
    public static VarHandle NumSDChangedSuccess$VH() {
        return _SD_CHANGE_MACHINE_SID_OUTPUT.NumSDChangedSuccess$VH;
    }
    public static long NumSDChangedSuccess$get(MemorySegment seg) {
        return (long)_SD_CHANGE_MACHINE_SID_OUTPUT.NumSDChangedSuccess$VH.get(seg);
    }
    public static void NumSDChangedSuccess$set( MemorySegment seg, long x) {
        _SD_CHANGE_MACHINE_SID_OUTPUT.NumSDChangedSuccess$VH.set(seg, x);
    }
    public static long NumSDChangedSuccess$get(MemorySegment seg, long index) {
        return (long)_SD_CHANGE_MACHINE_SID_OUTPUT.NumSDChangedSuccess$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumSDChangedSuccess$set(MemorySegment seg, long index, long x) {
        _SD_CHANGE_MACHINE_SID_OUTPUT.NumSDChangedSuccess$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumSDChangedFail$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumSDChangedFail"));
    public static VarHandle NumSDChangedFail$VH() {
        return _SD_CHANGE_MACHINE_SID_OUTPUT.NumSDChangedFail$VH;
    }
    public static long NumSDChangedFail$get(MemorySegment seg) {
        return (long)_SD_CHANGE_MACHINE_SID_OUTPUT.NumSDChangedFail$VH.get(seg);
    }
    public static void NumSDChangedFail$set( MemorySegment seg, long x) {
        _SD_CHANGE_MACHINE_SID_OUTPUT.NumSDChangedFail$VH.set(seg, x);
    }
    public static long NumSDChangedFail$get(MemorySegment seg, long index) {
        return (long)_SD_CHANGE_MACHINE_SID_OUTPUT.NumSDChangedFail$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumSDChangedFail$set(MemorySegment seg, long index, long x) {
        _SD_CHANGE_MACHINE_SID_OUTPUT.NumSDChangedFail$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumSDUnused$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumSDUnused"));
    public static VarHandle NumSDUnused$VH() {
        return _SD_CHANGE_MACHINE_SID_OUTPUT.NumSDUnused$VH;
    }
    public static long NumSDUnused$get(MemorySegment seg) {
        return (long)_SD_CHANGE_MACHINE_SID_OUTPUT.NumSDUnused$VH.get(seg);
    }
    public static void NumSDUnused$set( MemorySegment seg, long x) {
        _SD_CHANGE_MACHINE_SID_OUTPUT.NumSDUnused$VH.set(seg, x);
    }
    public static long NumSDUnused$get(MemorySegment seg, long index) {
        return (long)_SD_CHANGE_MACHINE_SID_OUTPUT.NumSDUnused$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumSDUnused$set(MemorySegment seg, long index, long x) {
        _SD_CHANGE_MACHINE_SID_OUTPUT.NumSDUnused$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumSDTotal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumSDTotal"));
    public static VarHandle NumSDTotal$VH() {
        return _SD_CHANGE_MACHINE_SID_OUTPUT.NumSDTotal$VH;
    }
    public static long NumSDTotal$get(MemorySegment seg) {
        return (long)_SD_CHANGE_MACHINE_SID_OUTPUT.NumSDTotal$VH.get(seg);
    }
    public static void NumSDTotal$set( MemorySegment seg, long x) {
        _SD_CHANGE_MACHINE_SID_OUTPUT.NumSDTotal$VH.set(seg, x);
    }
    public static long NumSDTotal$get(MemorySegment seg, long index) {
        return (long)_SD_CHANGE_MACHINE_SID_OUTPUT.NumSDTotal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumSDTotal$set(MemorySegment seg, long index, long x) {
        _SD_CHANGE_MACHINE_SID_OUTPUT.NumSDTotal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumMftSDChangedSuccess$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumMftSDChangedSuccess"));
    public static VarHandle NumMftSDChangedSuccess$VH() {
        return _SD_CHANGE_MACHINE_SID_OUTPUT.NumMftSDChangedSuccess$VH;
    }
    public static long NumMftSDChangedSuccess$get(MemorySegment seg) {
        return (long)_SD_CHANGE_MACHINE_SID_OUTPUT.NumMftSDChangedSuccess$VH.get(seg);
    }
    public static void NumMftSDChangedSuccess$set( MemorySegment seg, long x) {
        _SD_CHANGE_MACHINE_SID_OUTPUT.NumMftSDChangedSuccess$VH.set(seg, x);
    }
    public static long NumMftSDChangedSuccess$get(MemorySegment seg, long index) {
        return (long)_SD_CHANGE_MACHINE_SID_OUTPUT.NumMftSDChangedSuccess$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumMftSDChangedSuccess$set(MemorySegment seg, long index, long x) {
        _SD_CHANGE_MACHINE_SID_OUTPUT.NumMftSDChangedSuccess$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumMftSDChangedFail$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumMftSDChangedFail"));
    public static VarHandle NumMftSDChangedFail$VH() {
        return _SD_CHANGE_MACHINE_SID_OUTPUT.NumMftSDChangedFail$VH;
    }
    public static long NumMftSDChangedFail$get(MemorySegment seg) {
        return (long)_SD_CHANGE_MACHINE_SID_OUTPUT.NumMftSDChangedFail$VH.get(seg);
    }
    public static void NumMftSDChangedFail$set( MemorySegment seg, long x) {
        _SD_CHANGE_MACHINE_SID_OUTPUT.NumMftSDChangedFail$VH.set(seg, x);
    }
    public static long NumMftSDChangedFail$get(MemorySegment seg, long index) {
        return (long)_SD_CHANGE_MACHINE_SID_OUTPUT.NumMftSDChangedFail$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumMftSDChangedFail$set(MemorySegment seg, long index, long x) {
        _SD_CHANGE_MACHINE_SID_OUTPUT.NumMftSDChangedFail$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumMftSDTotal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumMftSDTotal"));
    public static VarHandle NumMftSDTotal$VH() {
        return _SD_CHANGE_MACHINE_SID_OUTPUT.NumMftSDTotal$VH;
    }
    public static long NumMftSDTotal$get(MemorySegment seg) {
        return (long)_SD_CHANGE_MACHINE_SID_OUTPUT.NumMftSDTotal$VH.get(seg);
    }
    public static void NumMftSDTotal$set( MemorySegment seg, long x) {
        _SD_CHANGE_MACHINE_SID_OUTPUT.NumMftSDTotal$VH.set(seg, x);
    }
    public static long NumMftSDTotal$get(MemorySegment seg, long index) {
        return (long)_SD_CHANGE_MACHINE_SID_OUTPUT.NumMftSDTotal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumMftSDTotal$set(MemorySegment seg, long index, long x) {
        _SD_CHANGE_MACHINE_SID_OUTPUT.NumMftSDTotal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


