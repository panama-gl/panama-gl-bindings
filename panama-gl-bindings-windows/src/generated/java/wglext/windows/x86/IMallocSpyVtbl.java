// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IMallocSpyVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("PreAlloc"),
        Constants$root.C_POINTER$LAYOUT.withName("PostAlloc"),
        Constants$root.C_POINTER$LAYOUT.withName("PreFree"),
        Constants$root.C_POINTER$LAYOUT.withName("PostFree"),
        Constants$root.C_POINTER$LAYOUT.withName("PreRealloc"),
        Constants$root.C_POINTER$LAYOUT.withName("PostRealloc"),
        Constants$root.C_POINTER$LAYOUT.withName("PreGetSize"),
        Constants$root.C_POINTER$LAYOUT.withName("PostGetSize"),
        Constants$root.C_POINTER$LAYOUT.withName("PreDidAlloc"),
        Constants$root.C_POINTER$LAYOUT.withName("PostDidAlloc"),
        Constants$root.C_POINTER$LAYOUT.withName("PreHeapMinimize"),
        Constants$root.C_POINTER$LAYOUT.withName("PostHeapMinimize")
    ).withName("IMallocSpyVtbl");
    public static MemoryLayout $LAYOUT() {
        return IMallocSpyVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IMallocSpyVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IMallocSpyVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IMallocSpyVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IMallocSpyVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IMallocSpyVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IMallocSpyVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IMallocSpyVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IMallocSpyVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IMallocSpyVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor PreAlloc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle PreAlloc$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PreAlloc$FUNC
    );
    public interface PreAlloc {

        long apply(java.lang.foreign.MemoryAddress _x0, long _x1);
        static MemorySegment allocate(PreAlloc fi, MemorySession session) {
            return RuntimeHelper.upcallStub(PreAlloc.class, fi, IMallocSpyVtbl.PreAlloc$FUNC, session);
        }
        static PreAlloc ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, long __x1) -> {
                try {
                    return (long)IMallocSpyVtbl.PreAlloc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreAlloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PreAlloc"));
    public static VarHandle PreAlloc$VH() {
        return IMallocSpyVtbl.PreAlloc$VH;
    }
    public static MemoryAddress PreAlloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PreAlloc$VH.get(seg);
    }
    public static void PreAlloc$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PreAlloc$VH.set(seg, x);
    }
    public static MemoryAddress PreAlloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PreAlloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreAlloc$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PreAlloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreAlloc PreAlloc (MemorySegment segment, MemorySession session) {
        return PreAlloc.ofAddress(PreAlloc$get(segment), session);
    }
    static final FunctionDescriptor PostAlloc$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle PostAlloc$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PostAlloc$FUNC
    );
    public interface PostAlloc {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(PostAlloc fi, MemorySession session) {
            return RuntimeHelper.upcallStub(PostAlloc.class, fi, IMallocSpyVtbl.PostAlloc$FUNC, session);
        }
        static PostAlloc ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PostAlloc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostAlloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PostAlloc"));
    public static VarHandle PostAlloc$VH() {
        return IMallocSpyVtbl.PostAlloc$VH;
    }
    public static MemoryAddress PostAlloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PostAlloc$VH.get(seg);
    }
    public static void PostAlloc$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PostAlloc$VH.set(seg, x);
    }
    public static MemoryAddress PostAlloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PostAlloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostAlloc$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PostAlloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostAlloc PostAlloc (MemorySegment segment, MemorySession session) {
        return PostAlloc.ofAddress(PostAlloc$get(segment), session);
    }
    static final FunctionDescriptor PreFree$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PreFree$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PreFree$FUNC
    );
    public interface PreFree {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2);
        static MemorySegment allocate(PreFree fi, MemorySession session) {
            return RuntimeHelper.upcallStub(PreFree.class, fi, IMallocSpyVtbl.PreFree$FUNC, session);
        }
        static PreFree ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PreFree$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreFree$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PreFree"));
    public static VarHandle PreFree$VH() {
        return IMallocSpyVtbl.PreFree$VH;
    }
    public static MemoryAddress PreFree$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PreFree$VH.get(seg);
    }
    public static void PreFree$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PreFree$VH.set(seg, x);
    }
    public static MemoryAddress PreFree$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PreFree$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreFree$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PreFree$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreFree PreFree (MemorySegment segment, MemorySession session) {
        return PreFree.ofAddress(PreFree$get(segment), session);
    }
    static final FunctionDescriptor PostFree$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PostFree$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PostFree$FUNC
    );
    public interface PostFree {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(PostFree fi, MemorySession session) {
            return RuntimeHelper.upcallStub(PostFree.class, fi, IMallocSpyVtbl.PostFree$FUNC, session);
        }
        static PostFree ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    IMallocSpyVtbl.PostFree$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostFree$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PostFree"));
    public static VarHandle PostFree$VH() {
        return IMallocSpyVtbl.PostFree$VH;
    }
    public static MemoryAddress PostFree$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PostFree$VH.get(seg);
    }
    public static void PostFree$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PostFree$VH.set(seg, x);
    }
    public static MemoryAddress PostFree$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PostFree$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostFree$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PostFree$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostFree PostFree (MemorySegment segment, MemorySession session) {
        return PostFree.ofAddress(PostFree$get(segment), session);
    }
    static final FunctionDescriptor PreRealloc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PreRealloc$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PreRealloc$FUNC
    );
    public interface PreRealloc {

        long apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, long _x2, java.lang.foreign.MemoryAddress _x3, int _x4);
        static MemorySegment allocate(PreRealloc fi, MemorySession session) {
            return RuntimeHelper.upcallStub(PreRealloc.class, fi, IMallocSpyVtbl.PreRealloc$FUNC, session);
        }
        static PreRealloc ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, long __x2, java.lang.foreign.MemoryAddress __x3, int __x4) -> {
                try {
                    return (long)IMallocSpyVtbl.PreRealloc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreRealloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PreRealloc"));
    public static VarHandle PreRealloc$VH() {
        return IMallocSpyVtbl.PreRealloc$VH;
    }
    public static MemoryAddress PreRealloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PreRealloc$VH.get(seg);
    }
    public static void PreRealloc$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PreRealloc$VH.set(seg, x);
    }
    public static MemoryAddress PreRealloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PreRealloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreRealloc$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PreRealloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreRealloc PreRealloc (MemorySegment segment, MemorySession session) {
        return PreRealloc.ofAddress(PreRealloc$get(segment), session);
    }
    static final FunctionDescriptor PostRealloc$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PostRealloc$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PostRealloc$FUNC
    );
    public interface PostRealloc {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2);
        static MemorySegment allocate(PostRealloc fi, MemorySession session) {
            return RuntimeHelper.upcallStub(PostRealloc.class, fi, IMallocSpyVtbl.PostRealloc$FUNC, session);
        }
        static PostRealloc ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PostRealloc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostRealloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PostRealloc"));
    public static VarHandle PostRealloc$VH() {
        return IMallocSpyVtbl.PostRealloc$VH;
    }
    public static MemoryAddress PostRealloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PostRealloc$VH.get(seg);
    }
    public static void PostRealloc$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PostRealloc$VH.set(seg, x);
    }
    public static MemoryAddress PostRealloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PostRealloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostRealloc$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PostRealloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostRealloc PostRealloc (MemorySegment segment, MemorySession session) {
        return PostRealloc.ofAddress(PostRealloc$get(segment), session);
    }
    static final FunctionDescriptor PreGetSize$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PreGetSize$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PreGetSize$FUNC
    );
    public interface PreGetSize {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2);
        static MemorySegment allocate(PreGetSize fi, MemorySession session) {
            return RuntimeHelper.upcallStub(PreGetSize.class, fi, IMallocSpyVtbl.PreGetSize$FUNC, session);
        }
        static PreGetSize ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PreGetSize$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreGetSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PreGetSize"));
    public static VarHandle PreGetSize$VH() {
        return IMallocSpyVtbl.PreGetSize$VH;
    }
    public static MemoryAddress PreGetSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PreGetSize$VH.get(seg);
    }
    public static void PreGetSize$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PreGetSize$VH.set(seg, x);
    }
    public static MemoryAddress PreGetSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PreGetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreGetSize$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PreGetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreGetSize PreGetSize (MemorySegment segment, MemorySession session) {
        return PreGetSize.ofAddress(PreGetSize$get(segment), session);
    }
    static final FunctionDescriptor PostGetSize$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PostGetSize$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PostGetSize$FUNC
    );
    public interface PostGetSize {

        long apply(java.lang.foreign.MemoryAddress _x0, long _x1, int _x2);
        static MemorySegment allocate(PostGetSize fi, MemorySession session) {
            return RuntimeHelper.upcallStub(PostGetSize.class, fi, IMallocSpyVtbl.PostGetSize$FUNC, session);
        }
        static PostGetSize ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, long __x1, int __x2) -> {
                try {
                    return (long)IMallocSpyVtbl.PostGetSize$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostGetSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PostGetSize"));
    public static VarHandle PostGetSize$VH() {
        return IMallocSpyVtbl.PostGetSize$VH;
    }
    public static MemoryAddress PostGetSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PostGetSize$VH.get(seg);
    }
    public static void PostGetSize$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PostGetSize$VH.set(seg, x);
    }
    public static MemoryAddress PostGetSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PostGetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostGetSize$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PostGetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostGetSize PostGetSize (MemorySegment segment, MemorySession session) {
        return PostGetSize.ofAddress(PostGetSize$get(segment), session);
    }
    static final FunctionDescriptor PreDidAlloc$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PreDidAlloc$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PreDidAlloc$FUNC
    );
    public interface PreDidAlloc {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2);
        static MemorySegment allocate(PreDidAlloc fi, MemorySession session) {
            return RuntimeHelper.upcallStub(PreDidAlloc.class, fi, IMallocSpyVtbl.PreDidAlloc$FUNC, session);
        }
        static PreDidAlloc ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PreDidAlloc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreDidAlloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PreDidAlloc"));
    public static VarHandle PreDidAlloc$VH() {
        return IMallocSpyVtbl.PreDidAlloc$VH;
    }
    public static MemoryAddress PreDidAlloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PreDidAlloc$VH.get(seg);
    }
    public static void PreDidAlloc$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PreDidAlloc$VH.set(seg, x);
    }
    public static MemoryAddress PreDidAlloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PreDidAlloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreDidAlloc$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PreDidAlloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreDidAlloc PreDidAlloc (MemorySegment segment, MemorySession session) {
        return PreDidAlloc.ofAddress(PreDidAlloc$get(segment), session);
    }
    static final FunctionDescriptor PostDidAlloc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PostDidAlloc$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PostDidAlloc$FUNC
    );
    public interface PostDidAlloc {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, int _x3);
        static MemorySegment allocate(PostDidAlloc fi, MemorySession session) {
            return RuntimeHelper.upcallStub(PostDidAlloc.class, fi, IMallocSpyVtbl.PostDidAlloc$FUNC, session);
        }
        static PostDidAlloc ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, int __x3) -> {
                try {
                    return (int)IMallocSpyVtbl.PostDidAlloc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostDidAlloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PostDidAlloc"));
    public static VarHandle PostDidAlloc$VH() {
        return IMallocSpyVtbl.PostDidAlloc$VH;
    }
    public static MemoryAddress PostDidAlloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PostDidAlloc$VH.get(seg);
    }
    public static void PostDidAlloc$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PostDidAlloc$VH.set(seg, x);
    }
    public static MemoryAddress PostDidAlloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PostDidAlloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostDidAlloc$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PostDidAlloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostDidAlloc PostDidAlloc (MemorySegment segment, MemorySession session) {
        return PostDidAlloc.ofAddress(PostDidAlloc$get(segment), session);
    }
    static final FunctionDescriptor PreHeapMinimize$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle PreHeapMinimize$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PreHeapMinimize$FUNC
    );
    public interface PreHeapMinimize {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(PreHeapMinimize fi, MemorySession session) {
            return RuntimeHelper.upcallStub(PreHeapMinimize.class, fi, IMallocSpyVtbl.PreHeapMinimize$FUNC, session);
        }
        static PreHeapMinimize ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    IMallocSpyVtbl.PreHeapMinimize$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreHeapMinimize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PreHeapMinimize"));
    public static VarHandle PreHeapMinimize$VH() {
        return IMallocSpyVtbl.PreHeapMinimize$VH;
    }
    public static MemoryAddress PreHeapMinimize$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PreHeapMinimize$VH.get(seg);
    }
    public static void PreHeapMinimize$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PreHeapMinimize$VH.set(seg, x);
    }
    public static MemoryAddress PreHeapMinimize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PreHeapMinimize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreHeapMinimize$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PreHeapMinimize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreHeapMinimize PreHeapMinimize (MemorySegment segment, MemorySession session) {
        return PreHeapMinimize.ofAddress(PreHeapMinimize$get(segment), session);
    }
    static final FunctionDescriptor PostHeapMinimize$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle PostHeapMinimize$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PostHeapMinimize$FUNC
    );
    public interface PostHeapMinimize {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(PostHeapMinimize fi, MemorySession session) {
            return RuntimeHelper.upcallStub(PostHeapMinimize.class, fi, IMallocSpyVtbl.PostHeapMinimize$FUNC, session);
        }
        static PostHeapMinimize ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    IMallocSpyVtbl.PostHeapMinimize$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostHeapMinimize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PostHeapMinimize"));
    public static VarHandle PostHeapMinimize$VH() {
        return IMallocSpyVtbl.PostHeapMinimize$VH;
    }
    public static MemoryAddress PostHeapMinimize$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PostHeapMinimize$VH.get(seg);
    }
    public static void PostHeapMinimize$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PostHeapMinimize$VH.set(seg, x);
    }
    public static MemoryAddress PostHeapMinimize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMallocSpyVtbl.PostHeapMinimize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostHeapMinimize$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PostHeapMinimize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostHeapMinimize PostHeapMinimize (MemorySegment segment, MemorySession session) {
        return PostHeapMinimize.ofAddress(PostHeapMinimize$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


