// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IDataAdviseHolderVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("Advise"),
        Constants$root.C_POINTER$LAYOUT.withName("Unadvise"),
        Constants$root.C_POINTER$LAYOUT.withName("EnumAdvise"),
        Constants$root.C_POINTER$LAYOUT.withName("SendOnDataChange")
    ).withName("IDataAdviseHolderVtbl");
    public static MemoryLayout $LAYOUT() {
        return IDataAdviseHolderVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IDataAdviseHolderVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IDataAdviseHolderVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IDataAdviseHolderVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IDataAdviseHolderVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IDataAdviseHolderVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IDataAdviseHolderVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IDataAdviseHolderVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IDataAdviseHolderVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IDataAdviseHolderVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IDataAdviseHolderVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IDataAdviseHolderVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IDataAdviseHolderVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IDataAdviseHolderVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IDataAdviseHolderVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IDataAdviseHolderVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IDataAdviseHolderVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IDataAdviseHolderVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IDataAdviseHolderVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IDataAdviseHolderVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IDataAdviseHolderVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IDataAdviseHolderVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IDataAdviseHolderVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IDataAdviseHolderVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IDataAdviseHolderVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor Advise$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Advise$MH = RuntimeHelper.downcallHandle(
        IDataAdviseHolderVtbl.Advise$FUNC
    );
    public interface Advise {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(Advise fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Advise.class, fi, IDataAdviseHolderVtbl.Advise$FUNC, session);
        }
        static Advise ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    return (int)IDataAdviseHolderVtbl.Advise$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Advise$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Advise"));
    public static VarHandle Advise$VH() {
        return IDataAdviseHolderVtbl.Advise$VH;
    }
    public static MemoryAddress Advise$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IDataAdviseHolderVtbl.Advise$VH.get(seg);
    }
    public static void Advise$set( MemorySegment seg, MemoryAddress x) {
        IDataAdviseHolderVtbl.Advise$VH.set(seg, x);
    }
    public static MemoryAddress Advise$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IDataAdviseHolderVtbl.Advise$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Advise$set(MemorySegment seg, long index, MemoryAddress x) {
        IDataAdviseHolderVtbl.Advise$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Advise Advise (MemorySegment segment, MemorySession session) {
        return Advise.ofAddress(Advise$get(segment), session);
    }
    static final FunctionDescriptor Unadvise$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Unadvise$MH = RuntimeHelper.downcallHandle(
        IDataAdviseHolderVtbl.Unadvise$FUNC
    );
    public interface Unadvise {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(Unadvise fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Unadvise.class, fi, IDataAdviseHolderVtbl.Unadvise$FUNC, session);
        }
        static Unadvise ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)IDataAdviseHolderVtbl.Unadvise$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Unadvise$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Unadvise"));
    public static VarHandle Unadvise$VH() {
        return IDataAdviseHolderVtbl.Unadvise$VH;
    }
    public static MemoryAddress Unadvise$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IDataAdviseHolderVtbl.Unadvise$VH.get(seg);
    }
    public static void Unadvise$set( MemorySegment seg, MemoryAddress x) {
        IDataAdviseHolderVtbl.Unadvise$VH.set(seg, x);
    }
    public static MemoryAddress Unadvise$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IDataAdviseHolderVtbl.Unadvise$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Unadvise$set(MemorySegment seg, long index, MemoryAddress x) {
        IDataAdviseHolderVtbl.Unadvise$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Unadvise Unadvise (MemorySegment segment, MemorySession session) {
        return Unadvise.ofAddress(Unadvise$get(segment), session);
    }
    static final FunctionDescriptor EnumAdvise$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle EnumAdvise$MH = RuntimeHelper.downcallHandle(
        IDataAdviseHolderVtbl.EnumAdvise$FUNC
    );
    public interface EnumAdvise {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(EnumAdvise fi, MemorySession session) {
            return RuntimeHelper.upcallStub(EnumAdvise.class, fi, IDataAdviseHolderVtbl.EnumAdvise$FUNC, session);
        }
        static EnumAdvise ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IDataAdviseHolderVtbl.EnumAdvise$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle EnumAdvise$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EnumAdvise"));
    public static VarHandle EnumAdvise$VH() {
        return IDataAdviseHolderVtbl.EnumAdvise$VH;
    }
    public static MemoryAddress EnumAdvise$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IDataAdviseHolderVtbl.EnumAdvise$VH.get(seg);
    }
    public static void EnumAdvise$set( MemorySegment seg, MemoryAddress x) {
        IDataAdviseHolderVtbl.EnumAdvise$VH.set(seg, x);
    }
    public static MemoryAddress EnumAdvise$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IDataAdviseHolderVtbl.EnumAdvise$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumAdvise$set(MemorySegment seg, long index, MemoryAddress x) {
        IDataAdviseHolderVtbl.EnumAdvise$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumAdvise EnumAdvise (MemorySegment segment, MemorySession session) {
        return EnumAdvise.ofAddress(EnumAdvise$get(segment), session);
    }
    static final FunctionDescriptor SendOnDataChange$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SendOnDataChange$MH = RuntimeHelper.downcallHandle(
        IDataAdviseHolderVtbl.SendOnDataChange$FUNC
    );
    public interface SendOnDataChange {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, int _x3);
        static MemorySegment allocate(SendOnDataChange fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SendOnDataChange.class, fi, IDataAdviseHolderVtbl.SendOnDataChange$FUNC, session);
        }
        static SendOnDataChange ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, int __x3) -> {
                try {
                    return (int)IDataAdviseHolderVtbl.SendOnDataChange$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SendOnDataChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SendOnDataChange"));
    public static VarHandle SendOnDataChange$VH() {
        return IDataAdviseHolderVtbl.SendOnDataChange$VH;
    }
    public static MemoryAddress SendOnDataChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IDataAdviseHolderVtbl.SendOnDataChange$VH.get(seg);
    }
    public static void SendOnDataChange$set( MemorySegment seg, MemoryAddress x) {
        IDataAdviseHolderVtbl.SendOnDataChange$VH.set(seg, x);
    }
    public static MemoryAddress SendOnDataChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IDataAdviseHolderVtbl.SendOnDataChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SendOnDataChange$set(MemorySegment seg, long index, MemoryAddress x) {
        IDataAdviseHolderVtbl.SendOnDataChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SendOnDataChange SendOnDataChange (MemorySegment segment, MemorySession session) {
        return SendOnDataChange.ofAddress(SendOnDataChange$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


