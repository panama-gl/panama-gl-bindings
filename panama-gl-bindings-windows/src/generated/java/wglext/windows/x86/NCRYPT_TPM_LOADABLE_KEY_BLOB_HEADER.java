// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("magic"),
        Constants$root.C_LONG$LAYOUT.withName("cbHeader"),
        Constants$root.C_LONG$LAYOUT.withName("cbPublic"),
        Constants$root.C_LONG$LAYOUT.withName("cbPrivate"),
        Constants$root.C_LONG$LAYOUT.withName("cbName")
    ).withName("NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER");
    public static MemoryLayout $LAYOUT() {
        return NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.$struct$LAYOUT;
    }
    static final VarHandle magic$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("magic"));
    public static VarHandle magic$VH() {
        return NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.magic$VH;
    }
    public static int magic$get(MemorySegment seg) {
        return (int)NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.magic$VH.get(seg);
    }
    public static void magic$set( MemorySegment seg, int x) {
        NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.magic$VH.set(seg, x);
    }
    public static int magic$get(MemorySegment seg, long index) {
        return (int)NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.magic$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void magic$set(MemorySegment seg, long index, int x) {
        NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.magic$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbHeader$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbHeader"));
    public static VarHandle cbHeader$VH() {
        return NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbHeader$VH;
    }
    public static int cbHeader$get(MemorySegment seg) {
        return (int)NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbHeader$VH.get(seg);
    }
    public static void cbHeader$set( MemorySegment seg, int x) {
        NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbHeader$VH.set(seg, x);
    }
    public static int cbHeader$get(MemorySegment seg, long index) {
        return (int)NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbHeader$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbHeader$set(MemorySegment seg, long index, int x) {
        NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbHeader$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbPublic$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbPublic"));
    public static VarHandle cbPublic$VH() {
        return NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbPublic$VH;
    }
    public static int cbPublic$get(MemorySegment seg) {
        return (int)NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbPublic$VH.get(seg);
    }
    public static void cbPublic$set( MemorySegment seg, int x) {
        NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbPublic$VH.set(seg, x);
    }
    public static int cbPublic$get(MemorySegment seg, long index) {
        return (int)NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbPublic$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbPublic$set(MemorySegment seg, long index, int x) {
        NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbPublic$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbPrivate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbPrivate"));
    public static VarHandle cbPrivate$VH() {
        return NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbPrivate$VH;
    }
    public static int cbPrivate$get(MemorySegment seg) {
        return (int)NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbPrivate$VH.get(seg);
    }
    public static void cbPrivate$set( MemorySegment seg, int x) {
        NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbPrivate$VH.set(seg, x);
    }
    public static int cbPrivate$get(MemorySegment seg, long index) {
        return (int)NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbPrivate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbPrivate$set(MemorySegment seg, long index, int x) {
        NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbPrivate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbName"));
    public static VarHandle cbName$VH() {
        return NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbName$VH;
    }
    public static int cbName$get(MemorySegment seg) {
        return (int)NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbName$VH.get(seg);
    }
    public static void cbName$set( MemorySegment seg, int x) {
        NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbName$VH.set(seg, x);
    }
    public static int cbName$get(MemorySegment seg, long index) {
        return (int)NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbName$set(MemorySegment seg, long index, int x) {
        NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER.cbName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


