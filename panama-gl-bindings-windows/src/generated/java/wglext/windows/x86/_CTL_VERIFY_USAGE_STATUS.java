// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _CTL_VERIFY_USAGE_STATUS {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        Constants$root.C_LONG$LAYOUT.withName("dwError"),
        Constants$root.C_LONG$LAYOUT.withName("dwFlags"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("ppCtl"),
        Constants$root.C_LONG$LAYOUT.withName("dwCtlEntryIndex"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("ppSigner"),
        Constants$root.C_LONG$LAYOUT.withName("dwSignerIndex"),
        MemoryLayout.paddingLayout(32)
    ).withName("_CTL_VERIFY_USAGE_STATUS");
    public static MemoryLayout $LAYOUT() {
        return _CTL_VERIFY_USAGE_STATUS.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return _CTL_VERIFY_USAGE_STATUS.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)_CTL_VERIFY_USAGE_STATUS.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        _CTL_VERIFY_USAGE_STATUS.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)_CTL_VERIFY_USAGE_STATUS.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        _CTL_VERIFY_USAGE_STATUS.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwError$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwError"));
    public static VarHandle dwError$VH() {
        return _CTL_VERIFY_USAGE_STATUS.dwError$VH;
    }
    public static int dwError$get(MemorySegment seg) {
        return (int)_CTL_VERIFY_USAGE_STATUS.dwError$VH.get(seg);
    }
    public static void dwError$set( MemorySegment seg, int x) {
        _CTL_VERIFY_USAGE_STATUS.dwError$VH.set(seg, x);
    }
    public static int dwError$get(MemorySegment seg, long index) {
        return (int)_CTL_VERIFY_USAGE_STATUS.dwError$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwError$set(MemorySegment seg, long index, int x) {
        _CTL_VERIFY_USAGE_STATUS.dwError$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwFlags"));
    public static VarHandle dwFlags$VH() {
        return _CTL_VERIFY_USAGE_STATUS.dwFlags$VH;
    }
    public static int dwFlags$get(MemorySegment seg) {
        return (int)_CTL_VERIFY_USAGE_STATUS.dwFlags$VH.get(seg);
    }
    public static void dwFlags$set( MemorySegment seg, int x) {
        _CTL_VERIFY_USAGE_STATUS.dwFlags$VH.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)_CTL_VERIFY_USAGE_STATUS.dwFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        _CTL_VERIFY_USAGE_STATUS.dwFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ppCtl$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ppCtl"));
    public static VarHandle ppCtl$VH() {
        return _CTL_VERIFY_USAGE_STATUS.ppCtl$VH;
    }
    public static MemoryAddress ppCtl$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CTL_VERIFY_USAGE_STATUS.ppCtl$VH.get(seg);
    }
    public static void ppCtl$set( MemorySegment seg, MemoryAddress x) {
        _CTL_VERIFY_USAGE_STATUS.ppCtl$VH.set(seg, x);
    }
    public static MemoryAddress ppCtl$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CTL_VERIFY_USAGE_STATUS.ppCtl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ppCtl$set(MemorySegment seg, long index, MemoryAddress x) {
        _CTL_VERIFY_USAGE_STATUS.ppCtl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwCtlEntryIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwCtlEntryIndex"));
    public static VarHandle dwCtlEntryIndex$VH() {
        return _CTL_VERIFY_USAGE_STATUS.dwCtlEntryIndex$VH;
    }
    public static int dwCtlEntryIndex$get(MemorySegment seg) {
        return (int)_CTL_VERIFY_USAGE_STATUS.dwCtlEntryIndex$VH.get(seg);
    }
    public static void dwCtlEntryIndex$set( MemorySegment seg, int x) {
        _CTL_VERIFY_USAGE_STATUS.dwCtlEntryIndex$VH.set(seg, x);
    }
    public static int dwCtlEntryIndex$get(MemorySegment seg, long index) {
        return (int)_CTL_VERIFY_USAGE_STATUS.dwCtlEntryIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwCtlEntryIndex$set(MemorySegment seg, long index, int x) {
        _CTL_VERIFY_USAGE_STATUS.dwCtlEntryIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ppSigner$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ppSigner"));
    public static VarHandle ppSigner$VH() {
        return _CTL_VERIFY_USAGE_STATUS.ppSigner$VH;
    }
    public static MemoryAddress ppSigner$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CTL_VERIFY_USAGE_STATUS.ppSigner$VH.get(seg);
    }
    public static void ppSigner$set( MemorySegment seg, MemoryAddress x) {
        _CTL_VERIFY_USAGE_STATUS.ppSigner$VH.set(seg, x);
    }
    public static MemoryAddress ppSigner$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CTL_VERIFY_USAGE_STATUS.ppSigner$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ppSigner$set(MemorySegment seg, long index, MemoryAddress x) {
        _CTL_VERIFY_USAGE_STATUS.ppSigner$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwSignerIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwSignerIndex"));
    public static VarHandle dwSignerIndex$VH() {
        return _CTL_VERIFY_USAGE_STATUS.dwSignerIndex$VH;
    }
    public static int dwSignerIndex$get(MemorySegment seg) {
        return (int)_CTL_VERIFY_USAGE_STATUS.dwSignerIndex$VH.get(seg);
    }
    public static void dwSignerIndex$set( MemorySegment seg, int x) {
        _CTL_VERIFY_USAGE_STATUS.dwSignerIndex$VH.set(seg, x);
    }
    public static int dwSignerIndex$get(MemorySegment seg, long index) {
        return (int)_CTL_VERIFY_USAGE_STATUS.dwSignerIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwSignerIndex$set(MemorySegment seg, long index, int x) {
        _CTL_VERIFY_USAGE_STATUS.dwSignerIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


