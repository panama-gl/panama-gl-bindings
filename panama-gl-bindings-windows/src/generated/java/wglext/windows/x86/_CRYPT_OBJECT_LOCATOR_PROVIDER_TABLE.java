// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("pfnGet"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnRelease"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnFreePassword"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnFree"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnFreeIdentifier")
    ).withName("_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE");
    public static MemoryLayout $LAYOUT() {
        return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pfnGet$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnGet"));
    public static VarHandle pfnGet$VH() {
        return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnGet$VH;
    }
    public static MemoryAddress pfnGet$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnGet$VH.get(seg);
    }
    public static void pfnGet$set( MemorySegment seg, MemoryAddress x) {
        _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnGet$VH.set(seg, x);
    }
    public static MemoryAddress pfnGet$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnGet$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnGet$set(MemorySegment seg, long index, MemoryAddress x) {
        _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnGet$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET pfnGet (MemorySegment segment, MemorySession session) {
        return PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET.ofAddress(pfnGet$get(segment), session);
    }
    static final VarHandle pfnRelease$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnRelease"));
    public static VarHandle pfnRelease$VH() {
        return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnRelease$VH;
    }
    public static MemoryAddress pfnRelease$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnRelease$VH.get(seg);
    }
    public static void pfnRelease$set( MemorySegment seg, MemoryAddress x) {
        _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnRelease$VH.set(seg, x);
    }
    public static MemoryAddress pfnRelease$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnRelease$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnRelease$set(MemorySegment seg, long index, MemoryAddress x) {
        _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnRelease$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE pfnRelease (MemorySegment segment, MemorySession session) {
        return PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE.ofAddress(pfnRelease$get(segment), session);
    }
    static final VarHandle pfnFreePassword$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnFreePassword"));
    public static VarHandle pfnFreePassword$VH() {
        return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnFreePassword$VH;
    }
    public static MemoryAddress pfnFreePassword$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnFreePassword$VH.get(seg);
    }
    public static void pfnFreePassword$set( MemorySegment seg, MemoryAddress x) {
        _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnFreePassword$VH.set(seg, x);
    }
    public static MemoryAddress pfnFreePassword$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnFreePassword$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFreePassword$set(MemorySegment seg, long index, MemoryAddress x) {
        _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnFreePassword$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD pfnFreePassword (MemorySegment segment, MemorySession session) {
        return PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD.ofAddress(pfnFreePassword$get(segment), session);
    }
    static final VarHandle pfnFree$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnFree"));
    public static VarHandle pfnFree$VH() {
        return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnFree$VH;
    }
    public static MemoryAddress pfnFree$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnFree$VH.get(seg);
    }
    public static void pfnFree$set( MemorySegment seg, MemoryAddress x) {
        _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnFree$VH.set(seg, x);
    }
    public static MemoryAddress pfnFree$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnFree$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFree$set(MemorySegment seg, long index, MemoryAddress x) {
        _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnFree$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE pfnFree (MemorySegment segment, MemorySession session) {
        return PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE.ofAddress(pfnFree$get(segment), session);
    }
    static final VarHandle pfnFreeIdentifier$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnFreeIdentifier"));
    public static VarHandle pfnFreeIdentifier$VH() {
        return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnFreeIdentifier$VH;
    }
    public static MemoryAddress pfnFreeIdentifier$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnFreeIdentifier$VH.get(seg);
    }
    public static void pfnFreeIdentifier$set( MemorySegment seg, MemoryAddress x) {
        _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnFreeIdentifier$VH.set(seg, x);
    }
    public static MemoryAddress pfnFreeIdentifier$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnFreeIdentifier$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFreeIdentifier$set(MemorySegment seg, long index, MemoryAddress x) {
        _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE.pfnFreeIdentifier$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER pfnFreeIdentifier (MemorySegment segment, MemorySession session) {
        return PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER.ofAddress(pfnFreeIdentifier$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


