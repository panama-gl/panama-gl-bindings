// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _FORMAT_PARAMETERS {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("MediaType"),
        Constants$root.C_LONG$LAYOUT.withName("StartCylinderNumber"),
        Constants$root.C_LONG$LAYOUT.withName("EndCylinderNumber"),
        Constants$root.C_LONG$LAYOUT.withName("StartHeadNumber"),
        Constants$root.C_LONG$LAYOUT.withName("EndHeadNumber")
    ).withName("_FORMAT_PARAMETERS");
    public static MemoryLayout $LAYOUT() {
        return _FORMAT_PARAMETERS.$struct$LAYOUT;
    }
    static final VarHandle MediaType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MediaType"));
    public static VarHandle MediaType$VH() {
        return _FORMAT_PARAMETERS.MediaType$VH;
    }
    public static int MediaType$get(MemorySegment seg) {
        return (int)_FORMAT_PARAMETERS.MediaType$VH.get(seg);
    }
    public static void MediaType$set( MemorySegment seg, int x) {
        _FORMAT_PARAMETERS.MediaType$VH.set(seg, x);
    }
    public static int MediaType$get(MemorySegment seg, long index) {
        return (int)_FORMAT_PARAMETERS.MediaType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MediaType$set(MemorySegment seg, long index, int x) {
        _FORMAT_PARAMETERS.MediaType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle StartCylinderNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StartCylinderNumber"));
    public static VarHandle StartCylinderNumber$VH() {
        return _FORMAT_PARAMETERS.StartCylinderNumber$VH;
    }
    public static int StartCylinderNumber$get(MemorySegment seg) {
        return (int)_FORMAT_PARAMETERS.StartCylinderNumber$VH.get(seg);
    }
    public static void StartCylinderNumber$set( MemorySegment seg, int x) {
        _FORMAT_PARAMETERS.StartCylinderNumber$VH.set(seg, x);
    }
    public static int StartCylinderNumber$get(MemorySegment seg, long index) {
        return (int)_FORMAT_PARAMETERS.StartCylinderNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StartCylinderNumber$set(MemorySegment seg, long index, int x) {
        _FORMAT_PARAMETERS.StartCylinderNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle EndCylinderNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EndCylinderNumber"));
    public static VarHandle EndCylinderNumber$VH() {
        return _FORMAT_PARAMETERS.EndCylinderNumber$VH;
    }
    public static int EndCylinderNumber$get(MemorySegment seg) {
        return (int)_FORMAT_PARAMETERS.EndCylinderNumber$VH.get(seg);
    }
    public static void EndCylinderNumber$set( MemorySegment seg, int x) {
        _FORMAT_PARAMETERS.EndCylinderNumber$VH.set(seg, x);
    }
    public static int EndCylinderNumber$get(MemorySegment seg, long index) {
        return (int)_FORMAT_PARAMETERS.EndCylinderNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EndCylinderNumber$set(MemorySegment seg, long index, int x) {
        _FORMAT_PARAMETERS.EndCylinderNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle StartHeadNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StartHeadNumber"));
    public static VarHandle StartHeadNumber$VH() {
        return _FORMAT_PARAMETERS.StartHeadNumber$VH;
    }
    public static int StartHeadNumber$get(MemorySegment seg) {
        return (int)_FORMAT_PARAMETERS.StartHeadNumber$VH.get(seg);
    }
    public static void StartHeadNumber$set( MemorySegment seg, int x) {
        _FORMAT_PARAMETERS.StartHeadNumber$VH.set(seg, x);
    }
    public static int StartHeadNumber$get(MemorySegment seg, long index) {
        return (int)_FORMAT_PARAMETERS.StartHeadNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StartHeadNumber$set(MemorySegment seg, long index, int x) {
        _FORMAT_PARAMETERS.StartHeadNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle EndHeadNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EndHeadNumber"));
    public static VarHandle EndHeadNumber$VH() {
        return _FORMAT_PARAMETERS.EndHeadNumber$VH;
    }
    public static int EndHeadNumber$get(MemorySegment seg) {
        return (int)_FORMAT_PARAMETERS.EndHeadNumber$VH.get(seg);
    }
    public static void EndHeadNumber$set( MemorySegment seg, int x) {
        _FORMAT_PARAMETERS.EndHeadNumber$VH.set(seg, x);
    }
    public static int EndHeadNumber$get(MemorySegment seg, long index) {
        return (int)_FORMAT_PARAMETERS.EndHeadNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EndHeadNumber$set(MemorySegment seg, long index, int x) {
        _FORMAT_PARAMETERS.EndHeadNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


