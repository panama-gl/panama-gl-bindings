// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("EntryLength"),
        Constants$root.C_LONG$LAYOUT.withName("DependencyTypeFlags"),
        Constants$root.C_LONG$LAYOUT.withName("ProviderSpecificFlags"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("DeviceId"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("Data1"),
                Constants$root.C_SHORT$LAYOUT.withName("Data2"),
                Constants$root.C_SHORT$LAYOUT.withName("Data3"),
                MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
            ).withName("VendorId")
        ).withName("VirtualStorageType")
    ).withName("_STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY.$struct$LAYOUT;
    }
    static final VarHandle EntryLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EntryLength"));
    public static VarHandle EntryLength$VH() {
        return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY.EntryLength$VH;
    }
    public static int EntryLength$get(MemorySegment seg) {
        return (int)_STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY.EntryLength$VH.get(seg);
    }
    public static void EntryLength$set( MemorySegment seg, int x) {
        _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY.EntryLength$VH.set(seg, x);
    }
    public static int EntryLength$get(MemorySegment seg, long index) {
        return (int)_STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY.EntryLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EntryLength$set(MemorySegment seg, long index, int x) {
        _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY.EntryLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DependencyTypeFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DependencyTypeFlags"));
    public static VarHandle DependencyTypeFlags$VH() {
        return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY.DependencyTypeFlags$VH;
    }
    public static int DependencyTypeFlags$get(MemorySegment seg) {
        return (int)_STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY.DependencyTypeFlags$VH.get(seg);
    }
    public static void DependencyTypeFlags$set( MemorySegment seg, int x) {
        _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY.DependencyTypeFlags$VH.set(seg, x);
    }
    public static int DependencyTypeFlags$get(MemorySegment seg, long index) {
        return (int)_STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY.DependencyTypeFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DependencyTypeFlags$set(MemorySegment seg, long index, int x) {
        _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY.DependencyTypeFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ProviderSpecificFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ProviderSpecificFlags"));
    public static VarHandle ProviderSpecificFlags$VH() {
        return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY.ProviderSpecificFlags$VH;
    }
    public static int ProviderSpecificFlags$get(MemorySegment seg) {
        return (int)_STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY.ProviderSpecificFlags$VH.get(seg);
    }
    public static void ProviderSpecificFlags$set( MemorySegment seg, int x) {
        _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY.ProviderSpecificFlags$VH.set(seg, x);
    }
    public static int ProviderSpecificFlags$get(MemorySegment seg, long index) {
        return (int)_STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY.ProviderSpecificFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProviderSpecificFlags$set(MemorySegment seg, long index, int x) {
        _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY.ProviderSpecificFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment VirtualStorageType$slice(MemorySegment seg) {
        return seg.asSlice(12, 20);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


