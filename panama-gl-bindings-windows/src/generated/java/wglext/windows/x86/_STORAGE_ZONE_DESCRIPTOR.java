// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _STORAGE_ZONE_DESCRIPTOR {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("ZoneType"),
        Constants$root.C_LONG$LAYOUT.withName("ZoneCondition"),
        Constants$root.C_CHAR$LAYOUT.withName("ResetWritePointerRecommend"),
        MemoryLayout.sequenceLayout(3, Constants$root.C_CHAR$LAYOUT).withName("Reserved0"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("ZoneSize"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("WritePointerOffset")
    ).withName("_STORAGE_ZONE_DESCRIPTOR");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_ZONE_DESCRIPTOR.$struct$LAYOUT;
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _STORAGE_ZONE_DESCRIPTOR.Size$VH;
    }
    public static int Size$get(MemorySegment seg) {
        return (int)_STORAGE_ZONE_DESCRIPTOR.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, int x) {
        _STORAGE_ZONE_DESCRIPTOR.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ZONE_DESCRIPTOR.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _STORAGE_ZONE_DESCRIPTOR.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ZoneType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ZoneType"));
    public static VarHandle ZoneType$VH() {
        return _STORAGE_ZONE_DESCRIPTOR.ZoneType$VH;
    }
    public static int ZoneType$get(MemorySegment seg) {
        return (int)_STORAGE_ZONE_DESCRIPTOR.ZoneType$VH.get(seg);
    }
    public static void ZoneType$set( MemorySegment seg, int x) {
        _STORAGE_ZONE_DESCRIPTOR.ZoneType$VH.set(seg, x);
    }
    public static int ZoneType$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ZONE_DESCRIPTOR.ZoneType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ZoneType$set(MemorySegment seg, long index, int x) {
        _STORAGE_ZONE_DESCRIPTOR.ZoneType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ZoneCondition$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ZoneCondition"));
    public static VarHandle ZoneCondition$VH() {
        return _STORAGE_ZONE_DESCRIPTOR.ZoneCondition$VH;
    }
    public static int ZoneCondition$get(MemorySegment seg) {
        return (int)_STORAGE_ZONE_DESCRIPTOR.ZoneCondition$VH.get(seg);
    }
    public static void ZoneCondition$set( MemorySegment seg, int x) {
        _STORAGE_ZONE_DESCRIPTOR.ZoneCondition$VH.set(seg, x);
    }
    public static int ZoneCondition$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ZONE_DESCRIPTOR.ZoneCondition$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ZoneCondition$set(MemorySegment seg, long index, int x) {
        _STORAGE_ZONE_DESCRIPTOR.ZoneCondition$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ResetWritePointerRecommend$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ResetWritePointerRecommend"));
    public static VarHandle ResetWritePointerRecommend$VH() {
        return _STORAGE_ZONE_DESCRIPTOR.ResetWritePointerRecommend$VH;
    }
    public static byte ResetWritePointerRecommend$get(MemorySegment seg) {
        return (byte)_STORAGE_ZONE_DESCRIPTOR.ResetWritePointerRecommend$VH.get(seg);
    }
    public static void ResetWritePointerRecommend$set( MemorySegment seg, byte x) {
        _STORAGE_ZONE_DESCRIPTOR.ResetWritePointerRecommend$VH.set(seg, x);
    }
    public static byte ResetWritePointerRecommend$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_ZONE_DESCRIPTOR.ResetWritePointerRecommend$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ResetWritePointerRecommend$set(MemorySegment seg, long index, byte x) {
        _STORAGE_ZONE_DESCRIPTOR.ResetWritePointerRecommend$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved0$slice(MemorySegment seg) {
        return seg.asSlice(13, 3);
    }
    static final VarHandle ZoneSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ZoneSize"));
    public static VarHandle ZoneSize$VH() {
        return _STORAGE_ZONE_DESCRIPTOR.ZoneSize$VH;
    }
    public static long ZoneSize$get(MemorySegment seg) {
        return (long)_STORAGE_ZONE_DESCRIPTOR.ZoneSize$VH.get(seg);
    }
    public static void ZoneSize$set( MemorySegment seg, long x) {
        _STORAGE_ZONE_DESCRIPTOR.ZoneSize$VH.set(seg, x);
    }
    public static long ZoneSize$get(MemorySegment seg, long index) {
        return (long)_STORAGE_ZONE_DESCRIPTOR.ZoneSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ZoneSize$set(MemorySegment seg, long index, long x) {
        _STORAGE_ZONE_DESCRIPTOR.ZoneSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle WritePointerOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("WritePointerOffset"));
    public static VarHandle WritePointerOffset$VH() {
        return _STORAGE_ZONE_DESCRIPTOR.WritePointerOffset$VH;
    }
    public static long WritePointerOffset$get(MemorySegment seg) {
        return (long)_STORAGE_ZONE_DESCRIPTOR.WritePointerOffset$VH.get(seg);
    }
    public static void WritePointerOffset$set( MemorySegment seg, long x) {
        _STORAGE_ZONE_DESCRIPTOR.WritePointerOffset$VH.set(seg, x);
    }
    public static long WritePointerOffset$get(MemorySegment seg, long index) {
        return (long)_STORAGE_ZONE_DESCRIPTOR.WritePointerOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WritePointerOffset$set(MemorySegment seg, long index, long x) {
        _STORAGE_ZONE_DESCRIPTOR.WritePointerOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


