// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IMarshalingStreamVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("Read"),
        Constants$root.C_POINTER$LAYOUT.withName("Write"),
        Constants$root.C_POINTER$LAYOUT.withName("Seek"),
        Constants$root.C_POINTER$LAYOUT.withName("SetSize"),
        Constants$root.C_POINTER$LAYOUT.withName("CopyTo"),
        Constants$root.C_POINTER$LAYOUT.withName("Commit"),
        Constants$root.C_POINTER$LAYOUT.withName("Revert"),
        Constants$root.C_POINTER$LAYOUT.withName("LockRegion"),
        Constants$root.C_POINTER$LAYOUT.withName("UnlockRegion"),
        Constants$root.C_POINTER$LAYOUT.withName("Stat"),
        Constants$root.C_POINTER$LAYOUT.withName("Clone"),
        Constants$root.C_POINTER$LAYOUT.withName("GetMarshalingContextAttribute")
    ).withName("IMarshalingStreamVtbl");
    public static MemoryLayout $LAYOUT() {
        return IMarshalingStreamVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IMarshalingStreamVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IMarshalingStreamVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IMarshalingStreamVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IMarshalingStreamVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IMarshalingStreamVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalingStreamVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IMarshalingStreamVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IMarshalingStreamVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IMarshalingStreamVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IMarshalingStreamVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IMarshalingStreamVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalingStreamVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IMarshalingStreamVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IMarshalingStreamVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IMarshalingStreamVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IMarshalingStreamVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IMarshalingStreamVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalingStreamVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor Read$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Read$MH = RuntimeHelper.downcallHandle(
        IMarshalingStreamVtbl.Read$FUNC
    );
    public interface Read {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(Read fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Read.class, fi, IMarshalingStreamVtbl.Read$FUNC, session);
        }
        static Read ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IMarshalingStreamVtbl.Read$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Read$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Read"));
    public static VarHandle Read$VH() {
        return IMarshalingStreamVtbl.Read$VH;
    }
    public static MemoryAddress Read$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.Read$VH.get(seg);
    }
    public static void Read$set( MemorySegment seg, MemoryAddress x) {
        IMarshalingStreamVtbl.Read$VH.set(seg, x);
    }
    public static MemoryAddress Read$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.Read$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Read$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalingStreamVtbl.Read$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Read Read (MemorySegment segment, MemorySession session) {
        return Read.ofAddress(Read$get(segment), session);
    }
    static final FunctionDescriptor Write$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Write$MH = RuntimeHelper.downcallHandle(
        IMarshalingStreamVtbl.Write$FUNC
    );
    public interface Write {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(Write fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Write.class, fi, IMarshalingStreamVtbl.Write$FUNC, session);
        }
        static Write ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IMarshalingStreamVtbl.Write$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Write$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Write"));
    public static VarHandle Write$VH() {
        return IMarshalingStreamVtbl.Write$VH;
    }
    public static MemoryAddress Write$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.Write$VH.get(seg);
    }
    public static void Write$set( MemorySegment seg, MemoryAddress x) {
        IMarshalingStreamVtbl.Write$VH.set(seg, x);
    }
    public static MemoryAddress Write$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.Write$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Write$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalingStreamVtbl.Write$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Write Write (MemorySegment segment, MemorySession session) {
        return Write.ofAddress(Write$get(segment), session);
    }
    static final FunctionDescriptor Seek$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Seek$MH = RuntimeHelper.downcallHandle(
        IMarshalingStreamVtbl.Seek$FUNC
    );
    public interface Seek {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(Seek fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Seek.class, fi, IMarshalingStreamVtbl.Seek$FUNC, session);
        }
        static Seek ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IMarshalingStreamVtbl.Seek$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Seek$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Seek"));
    public static VarHandle Seek$VH() {
        return IMarshalingStreamVtbl.Seek$VH;
    }
    public static MemoryAddress Seek$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.Seek$VH.get(seg);
    }
    public static void Seek$set( MemorySegment seg, MemoryAddress x) {
        IMarshalingStreamVtbl.Seek$VH.set(seg, x);
    }
    public static MemoryAddress Seek$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.Seek$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Seek$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalingStreamVtbl.Seek$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Seek Seek (MemorySegment segment, MemorySession session) {
        return Seek.ofAddress(Seek$get(segment), session);
    }
    static final FunctionDescriptor SetSize$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER")
    );
    static final MethodHandle SetSize$MH = RuntimeHelper.downcallHandle(
        IMarshalingStreamVtbl.SetSize$FUNC
    );
    public interface SetSize {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetSize fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetSize.class, fi, IMarshalingStreamVtbl.SetSize$FUNC, session);
        }
        static SetSize ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IMarshalingStreamVtbl.SetSize$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetSize"));
    public static VarHandle SetSize$VH() {
        return IMarshalingStreamVtbl.SetSize$VH;
    }
    public static MemoryAddress SetSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.SetSize$VH.get(seg);
    }
    public static void SetSize$set( MemorySegment seg, MemoryAddress x) {
        IMarshalingStreamVtbl.SetSize$VH.set(seg, x);
    }
    public static MemoryAddress SetSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.SetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSize$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalingStreamVtbl.SetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSize SetSize (MemorySegment segment, MemorySession session) {
        return SetSize.ofAddress(SetSize$get(segment), session);
    }
    static final FunctionDescriptor CopyTo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CopyTo$MH = RuntimeHelper.downcallHandle(
        IMarshalingStreamVtbl.CopyTo$FUNC
    );
    public interface CopyTo {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(CopyTo fi, MemorySession session) {
            return RuntimeHelper.upcallStub(CopyTo.class, fi, IMarshalingStreamVtbl.CopyTo$FUNC, session);
        }
        static CopyTo ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (int)IMarshalingStreamVtbl.CopyTo$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CopyTo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CopyTo"));
    public static VarHandle CopyTo$VH() {
        return IMarshalingStreamVtbl.CopyTo$VH;
    }
    public static MemoryAddress CopyTo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.CopyTo$VH.get(seg);
    }
    public static void CopyTo$set( MemorySegment seg, MemoryAddress x) {
        IMarshalingStreamVtbl.CopyTo$VH.set(seg, x);
    }
    public static MemoryAddress CopyTo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.CopyTo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CopyTo$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalingStreamVtbl.CopyTo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CopyTo CopyTo (MemorySegment segment, MemorySession session) {
        return CopyTo.ofAddress(CopyTo$get(segment), session);
    }
    static final FunctionDescriptor Commit$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Commit$MH = RuntimeHelper.downcallHandle(
        IMarshalingStreamVtbl.Commit$FUNC
    );
    public interface Commit {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(Commit fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Commit.class, fi, IMarshalingStreamVtbl.Commit$FUNC, session);
        }
        static Commit ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)IMarshalingStreamVtbl.Commit$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Commit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Commit"));
    public static VarHandle Commit$VH() {
        return IMarshalingStreamVtbl.Commit$VH;
    }
    public static MemoryAddress Commit$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.Commit$VH.get(seg);
    }
    public static void Commit$set( MemorySegment seg, MemoryAddress x) {
        IMarshalingStreamVtbl.Commit$VH.set(seg, x);
    }
    public static MemoryAddress Commit$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.Commit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Commit$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalingStreamVtbl.Commit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Commit Commit (MemorySegment segment, MemorySession session) {
        return Commit.ofAddress(Commit$get(segment), session);
    }
    static final FunctionDescriptor Revert$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Revert$MH = RuntimeHelper.downcallHandle(
        IMarshalingStreamVtbl.Revert$FUNC
    );
    public interface Revert {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Revert fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Revert.class, fi, IMarshalingStreamVtbl.Revert$FUNC, session);
        }
        static Revert ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IMarshalingStreamVtbl.Revert$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Revert$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Revert"));
    public static VarHandle Revert$VH() {
        return IMarshalingStreamVtbl.Revert$VH;
    }
    public static MemoryAddress Revert$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.Revert$VH.get(seg);
    }
    public static void Revert$set( MemorySegment seg, MemoryAddress x) {
        IMarshalingStreamVtbl.Revert$VH.set(seg, x);
    }
    public static MemoryAddress Revert$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.Revert$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Revert$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalingStreamVtbl.Revert$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Revert Revert (MemorySegment segment, MemorySession session) {
        return Revert.ofAddress(Revert$get(segment), session);
    }
    static final FunctionDescriptor LockRegion$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle LockRegion$MH = RuntimeHelper.downcallHandle(
        IMarshalingStreamVtbl.LockRegion$FUNC
    );
    public interface LockRegion {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(LockRegion fi, MemorySession session) {
            return RuntimeHelper.upcallStub(LockRegion.class, fi, IMarshalingStreamVtbl.LockRegion$FUNC, session);
        }
        static LockRegion ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)IMarshalingStreamVtbl.LockRegion$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle LockRegion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LockRegion"));
    public static VarHandle LockRegion$VH() {
        return IMarshalingStreamVtbl.LockRegion$VH;
    }
    public static MemoryAddress LockRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.LockRegion$VH.get(seg);
    }
    public static void LockRegion$set( MemorySegment seg, MemoryAddress x) {
        IMarshalingStreamVtbl.LockRegion$VH.set(seg, x);
    }
    public static MemoryAddress LockRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.LockRegion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LockRegion$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalingStreamVtbl.LockRegion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LockRegion LockRegion (MemorySegment segment, MemorySession session) {
        return LockRegion.ofAddress(LockRegion$get(segment), session);
    }
    static final FunctionDescriptor UnlockRegion$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle UnlockRegion$MH = RuntimeHelper.downcallHandle(
        IMarshalingStreamVtbl.UnlockRegion$FUNC
    );
    public interface UnlockRegion {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(UnlockRegion fi, MemorySession session) {
            return RuntimeHelper.upcallStub(UnlockRegion.class, fi, IMarshalingStreamVtbl.UnlockRegion$FUNC, session);
        }
        static UnlockRegion ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)IMarshalingStreamVtbl.UnlockRegion$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle UnlockRegion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UnlockRegion"));
    public static VarHandle UnlockRegion$VH() {
        return IMarshalingStreamVtbl.UnlockRegion$VH;
    }
    public static MemoryAddress UnlockRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.UnlockRegion$VH.get(seg);
    }
    public static void UnlockRegion$set( MemorySegment seg, MemoryAddress x) {
        IMarshalingStreamVtbl.UnlockRegion$VH.set(seg, x);
    }
    public static MemoryAddress UnlockRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.UnlockRegion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UnlockRegion$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalingStreamVtbl.UnlockRegion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static UnlockRegion UnlockRegion (MemorySegment segment, MemorySession session) {
        return UnlockRegion.ofAddress(UnlockRegion$get(segment), session);
    }
    static final FunctionDescriptor Stat$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Stat$MH = RuntimeHelper.downcallHandle(
        IMarshalingStreamVtbl.Stat$FUNC
    );
    public interface Stat {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2);
        static MemorySegment allocate(Stat fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Stat.class, fi, IMarshalingStreamVtbl.Stat$FUNC, session);
        }
        static Stat ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2) -> {
                try {
                    return (int)IMarshalingStreamVtbl.Stat$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Stat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Stat"));
    public static VarHandle Stat$VH() {
        return IMarshalingStreamVtbl.Stat$VH;
    }
    public static MemoryAddress Stat$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.Stat$VH.get(seg);
    }
    public static void Stat$set( MemorySegment seg, MemoryAddress x) {
        IMarshalingStreamVtbl.Stat$VH.set(seg, x);
    }
    public static MemoryAddress Stat$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.Stat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Stat$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalingStreamVtbl.Stat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Stat Stat (MemorySegment segment, MemorySession session) {
        return Stat.ofAddress(Stat$get(segment), session);
    }
    static final FunctionDescriptor Clone$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Clone$MH = RuntimeHelper.downcallHandle(
        IMarshalingStreamVtbl.Clone$FUNC
    );
    public interface Clone {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(Clone fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Clone.class, fi, IMarshalingStreamVtbl.Clone$FUNC, session);
        }
        static Clone ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IMarshalingStreamVtbl.Clone$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Clone$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Clone"));
    public static VarHandle Clone$VH() {
        return IMarshalingStreamVtbl.Clone$VH;
    }
    public static MemoryAddress Clone$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.Clone$VH.get(seg);
    }
    public static void Clone$set( MemorySegment seg, MemoryAddress x) {
        IMarshalingStreamVtbl.Clone$VH.set(seg, x);
    }
    public static MemoryAddress Clone$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.Clone$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Clone$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalingStreamVtbl.Clone$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Clone Clone (MemorySegment segment, MemorySession session) {
        return Clone.ofAddress(Clone$get(segment), session);
    }
    static final FunctionDescriptor GetMarshalingContextAttribute$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetMarshalingContextAttribute$MH = RuntimeHelper.downcallHandle(
        IMarshalingStreamVtbl.GetMarshalingContextAttribute$FUNC
    );
    public interface GetMarshalingContextAttribute {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetMarshalingContextAttribute fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetMarshalingContextAttribute.class, fi, IMarshalingStreamVtbl.GetMarshalingContextAttribute$FUNC, session);
        }
        static GetMarshalingContextAttribute ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IMarshalingStreamVtbl.GetMarshalingContextAttribute$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetMarshalingContextAttribute$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetMarshalingContextAttribute"));
    public static VarHandle GetMarshalingContextAttribute$VH() {
        return IMarshalingStreamVtbl.GetMarshalingContextAttribute$VH;
    }
    public static MemoryAddress GetMarshalingContextAttribute$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.GetMarshalingContextAttribute$VH.get(seg);
    }
    public static void GetMarshalingContextAttribute$set( MemorySegment seg, MemoryAddress x) {
        IMarshalingStreamVtbl.GetMarshalingContextAttribute$VH.set(seg, x);
    }
    public static MemoryAddress GetMarshalingContextAttribute$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalingStreamVtbl.GetMarshalingContextAttribute$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetMarshalingContextAttribute$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalingStreamVtbl.GetMarshalingContextAttribute$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetMarshalingContextAttribute GetMarshalingContextAttribute (MemorySegment segment, MemorySession session) {
        return GetMarshalingContextAttribute.ofAddress(GetMarshalingContextAttribute$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


