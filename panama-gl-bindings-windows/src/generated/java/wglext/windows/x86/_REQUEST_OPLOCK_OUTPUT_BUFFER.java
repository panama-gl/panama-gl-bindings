// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _REQUEST_OPLOCK_OUTPUT_BUFFER {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("StructureVersion"),
        Constants$root.C_SHORT$LAYOUT.withName("StructureLength"),
        Constants$root.C_LONG$LAYOUT.withName("OriginalOplockLevel"),
        Constants$root.C_LONG$LAYOUT.withName("NewOplockLevel"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_LONG$LAYOUT.withName("AccessMode"),
        Constants$root.C_SHORT$LAYOUT.withName("ShareMode"),
        MemoryLayout.paddingLayout(16)
    ).withName("_REQUEST_OPLOCK_OUTPUT_BUFFER");
    public static MemoryLayout $LAYOUT() {
        return _REQUEST_OPLOCK_OUTPUT_BUFFER.$struct$LAYOUT;
    }
    static final VarHandle StructureVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StructureVersion"));
    public static VarHandle StructureVersion$VH() {
        return _REQUEST_OPLOCK_OUTPUT_BUFFER.StructureVersion$VH;
    }
    public static short StructureVersion$get(MemorySegment seg) {
        return (short)_REQUEST_OPLOCK_OUTPUT_BUFFER.StructureVersion$VH.get(seg);
    }
    public static void StructureVersion$set( MemorySegment seg, short x) {
        _REQUEST_OPLOCK_OUTPUT_BUFFER.StructureVersion$VH.set(seg, x);
    }
    public static short StructureVersion$get(MemorySegment seg, long index) {
        return (short)_REQUEST_OPLOCK_OUTPUT_BUFFER.StructureVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StructureVersion$set(MemorySegment seg, long index, short x) {
        _REQUEST_OPLOCK_OUTPUT_BUFFER.StructureVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle StructureLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StructureLength"));
    public static VarHandle StructureLength$VH() {
        return _REQUEST_OPLOCK_OUTPUT_BUFFER.StructureLength$VH;
    }
    public static short StructureLength$get(MemorySegment seg) {
        return (short)_REQUEST_OPLOCK_OUTPUT_BUFFER.StructureLength$VH.get(seg);
    }
    public static void StructureLength$set( MemorySegment seg, short x) {
        _REQUEST_OPLOCK_OUTPUT_BUFFER.StructureLength$VH.set(seg, x);
    }
    public static short StructureLength$get(MemorySegment seg, long index) {
        return (short)_REQUEST_OPLOCK_OUTPUT_BUFFER.StructureLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StructureLength$set(MemorySegment seg, long index, short x) {
        _REQUEST_OPLOCK_OUTPUT_BUFFER.StructureLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OriginalOplockLevel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OriginalOplockLevel"));
    public static VarHandle OriginalOplockLevel$VH() {
        return _REQUEST_OPLOCK_OUTPUT_BUFFER.OriginalOplockLevel$VH;
    }
    public static int OriginalOplockLevel$get(MemorySegment seg) {
        return (int)_REQUEST_OPLOCK_OUTPUT_BUFFER.OriginalOplockLevel$VH.get(seg);
    }
    public static void OriginalOplockLevel$set( MemorySegment seg, int x) {
        _REQUEST_OPLOCK_OUTPUT_BUFFER.OriginalOplockLevel$VH.set(seg, x);
    }
    public static int OriginalOplockLevel$get(MemorySegment seg, long index) {
        return (int)_REQUEST_OPLOCK_OUTPUT_BUFFER.OriginalOplockLevel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OriginalOplockLevel$set(MemorySegment seg, long index, int x) {
        _REQUEST_OPLOCK_OUTPUT_BUFFER.OriginalOplockLevel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NewOplockLevel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NewOplockLevel"));
    public static VarHandle NewOplockLevel$VH() {
        return _REQUEST_OPLOCK_OUTPUT_BUFFER.NewOplockLevel$VH;
    }
    public static int NewOplockLevel$get(MemorySegment seg) {
        return (int)_REQUEST_OPLOCK_OUTPUT_BUFFER.NewOplockLevel$VH.get(seg);
    }
    public static void NewOplockLevel$set( MemorySegment seg, int x) {
        _REQUEST_OPLOCK_OUTPUT_BUFFER.NewOplockLevel$VH.set(seg, x);
    }
    public static int NewOplockLevel$get(MemorySegment seg, long index) {
        return (int)_REQUEST_OPLOCK_OUTPUT_BUFFER.NewOplockLevel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NewOplockLevel$set(MemorySegment seg, long index, int x) {
        _REQUEST_OPLOCK_OUTPUT_BUFFER.NewOplockLevel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _REQUEST_OPLOCK_OUTPUT_BUFFER.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)_REQUEST_OPLOCK_OUTPUT_BUFFER.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        _REQUEST_OPLOCK_OUTPUT_BUFFER.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_REQUEST_OPLOCK_OUTPUT_BUFFER.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _REQUEST_OPLOCK_OUTPUT_BUFFER.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AccessMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AccessMode"));
    public static VarHandle AccessMode$VH() {
        return _REQUEST_OPLOCK_OUTPUT_BUFFER.AccessMode$VH;
    }
    public static int AccessMode$get(MemorySegment seg) {
        return (int)_REQUEST_OPLOCK_OUTPUT_BUFFER.AccessMode$VH.get(seg);
    }
    public static void AccessMode$set( MemorySegment seg, int x) {
        _REQUEST_OPLOCK_OUTPUT_BUFFER.AccessMode$VH.set(seg, x);
    }
    public static int AccessMode$get(MemorySegment seg, long index) {
        return (int)_REQUEST_OPLOCK_OUTPUT_BUFFER.AccessMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AccessMode$set(MemorySegment seg, long index, int x) {
        _REQUEST_OPLOCK_OUTPUT_BUFFER.AccessMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ShareMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ShareMode"));
    public static VarHandle ShareMode$VH() {
        return _REQUEST_OPLOCK_OUTPUT_BUFFER.ShareMode$VH;
    }
    public static short ShareMode$get(MemorySegment seg) {
        return (short)_REQUEST_OPLOCK_OUTPUT_BUFFER.ShareMode$VH.get(seg);
    }
    public static void ShareMode$set( MemorySegment seg, short x) {
        _REQUEST_OPLOCK_OUTPUT_BUFFER.ShareMode$VH.set(seg, x);
    }
    public static short ShareMode$get(MemorySegment seg, long index) {
        return (short)_REQUEST_OPLOCK_OUTPUT_BUFFER.ShareMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ShareMode$set(MemorySegment seg, long index, short x) {
        _REQUEST_OPLOCK_OUTPUT_BUFFER.ShareMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


