// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _PERF_DATA_BLOCK {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, Constants$root.C_SHORT$LAYOUT).withName("Signature"),
        Constants$root.C_LONG$LAYOUT.withName("LittleEndian"),
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Revision"),
        Constants$root.C_LONG$LAYOUT.withName("TotalByteLength"),
        Constants$root.C_LONG$LAYOUT.withName("HeaderLength"),
        Constants$root.C_LONG$LAYOUT.withName("NumObjectTypes"),
        Constants$root.C_LONG$LAYOUT.withName("DefaultObject"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("wYear"),
            Constants$root.C_SHORT$LAYOUT.withName("wMonth"),
            Constants$root.C_SHORT$LAYOUT.withName("wDayOfWeek"),
            Constants$root.C_SHORT$LAYOUT.withName("wDay"),
            Constants$root.C_SHORT$LAYOUT.withName("wHour"),
            Constants$root.C_SHORT$LAYOUT.withName("wMinute"),
            Constants$root.C_SHORT$LAYOUT.withName("wSecond"),
            Constants$root.C_SHORT$LAYOUT.withName("wMilliseconds")
        ).withName("SystemTime"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("PerfTime"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("PerfFreq"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("PerfTime100nSec"),
        Constants$root.C_LONG$LAYOUT.withName("SystemNameLength"),
        Constants$root.C_LONG$LAYOUT.withName("SystemNameOffset")
    ).withName("_PERF_DATA_BLOCK");
    public static MemoryLayout $LAYOUT() {
        return _PERF_DATA_BLOCK.$struct$LAYOUT;
    }
    public static MemorySegment Signature$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    static final VarHandle LittleEndian$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LittleEndian"));
    public static VarHandle LittleEndian$VH() {
        return _PERF_DATA_BLOCK.LittleEndian$VH;
    }
    public static int LittleEndian$get(MemorySegment seg) {
        return (int)_PERF_DATA_BLOCK.LittleEndian$VH.get(seg);
    }
    public static void LittleEndian$set( MemorySegment seg, int x) {
        _PERF_DATA_BLOCK.LittleEndian$VH.set(seg, x);
    }
    public static int LittleEndian$get(MemorySegment seg, long index) {
        return (int)_PERF_DATA_BLOCK.LittleEndian$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LittleEndian$set(MemorySegment seg, long index, int x) {
        _PERF_DATA_BLOCK.LittleEndian$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _PERF_DATA_BLOCK.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_PERF_DATA_BLOCK.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _PERF_DATA_BLOCK.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_PERF_DATA_BLOCK.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _PERF_DATA_BLOCK.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Revision$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Revision"));
    public static VarHandle Revision$VH() {
        return _PERF_DATA_BLOCK.Revision$VH;
    }
    public static int Revision$get(MemorySegment seg) {
        return (int)_PERF_DATA_BLOCK.Revision$VH.get(seg);
    }
    public static void Revision$set( MemorySegment seg, int x) {
        _PERF_DATA_BLOCK.Revision$VH.set(seg, x);
    }
    public static int Revision$get(MemorySegment seg, long index) {
        return (int)_PERF_DATA_BLOCK.Revision$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Revision$set(MemorySegment seg, long index, int x) {
        _PERF_DATA_BLOCK.Revision$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TotalByteLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TotalByteLength"));
    public static VarHandle TotalByteLength$VH() {
        return _PERF_DATA_BLOCK.TotalByteLength$VH;
    }
    public static int TotalByteLength$get(MemorySegment seg) {
        return (int)_PERF_DATA_BLOCK.TotalByteLength$VH.get(seg);
    }
    public static void TotalByteLength$set( MemorySegment seg, int x) {
        _PERF_DATA_BLOCK.TotalByteLength$VH.set(seg, x);
    }
    public static int TotalByteLength$get(MemorySegment seg, long index) {
        return (int)_PERF_DATA_BLOCK.TotalByteLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TotalByteLength$set(MemorySegment seg, long index, int x) {
        _PERF_DATA_BLOCK.TotalByteLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle HeaderLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("HeaderLength"));
    public static VarHandle HeaderLength$VH() {
        return _PERF_DATA_BLOCK.HeaderLength$VH;
    }
    public static int HeaderLength$get(MemorySegment seg) {
        return (int)_PERF_DATA_BLOCK.HeaderLength$VH.get(seg);
    }
    public static void HeaderLength$set( MemorySegment seg, int x) {
        _PERF_DATA_BLOCK.HeaderLength$VH.set(seg, x);
    }
    public static int HeaderLength$get(MemorySegment seg, long index) {
        return (int)_PERF_DATA_BLOCK.HeaderLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HeaderLength$set(MemorySegment seg, long index, int x) {
        _PERF_DATA_BLOCK.HeaderLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumObjectTypes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumObjectTypes"));
    public static VarHandle NumObjectTypes$VH() {
        return _PERF_DATA_BLOCK.NumObjectTypes$VH;
    }
    public static int NumObjectTypes$get(MemorySegment seg) {
        return (int)_PERF_DATA_BLOCK.NumObjectTypes$VH.get(seg);
    }
    public static void NumObjectTypes$set( MemorySegment seg, int x) {
        _PERF_DATA_BLOCK.NumObjectTypes$VH.set(seg, x);
    }
    public static int NumObjectTypes$get(MemorySegment seg, long index) {
        return (int)_PERF_DATA_BLOCK.NumObjectTypes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumObjectTypes$set(MemorySegment seg, long index, int x) {
        _PERF_DATA_BLOCK.NumObjectTypes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DefaultObject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DefaultObject"));
    public static VarHandle DefaultObject$VH() {
        return _PERF_DATA_BLOCK.DefaultObject$VH;
    }
    public static int DefaultObject$get(MemorySegment seg) {
        return (int)_PERF_DATA_BLOCK.DefaultObject$VH.get(seg);
    }
    public static void DefaultObject$set( MemorySegment seg, int x) {
        _PERF_DATA_BLOCK.DefaultObject$VH.set(seg, x);
    }
    public static int DefaultObject$get(MemorySegment seg, long index) {
        return (int)_PERF_DATA_BLOCK.DefaultObject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DefaultObject$set(MemorySegment seg, long index, int x) {
        _PERF_DATA_BLOCK.DefaultObject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment SystemTime$slice(MemorySegment seg) {
        return seg.asSlice(36, 16);
    }
    public static MemorySegment PerfTime$slice(MemorySegment seg) {
        return seg.asSlice(56, 8);
    }
    public static MemorySegment PerfFreq$slice(MemorySegment seg) {
        return seg.asSlice(64, 8);
    }
    public static MemorySegment PerfTime100nSec$slice(MemorySegment seg) {
        return seg.asSlice(72, 8);
    }
    static final VarHandle SystemNameLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SystemNameLength"));
    public static VarHandle SystemNameLength$VH() {
        return _PERF_DATA_BLOCK.SystemNameLength$VH;
    }
    public static int SystemNameLength$get(MemorySegment seg) {
        return (int)_PERF_DATA_BLOCK.SystemNameLength$VH.get(seg);
    }
    public static void SystemNameLength$set( MemorySegment seg, int x) {
        _PERF_DATA_BLOCK.SystemNameLength$VH.set(seg, x);
    }
    public static int SystemNameLength$get(MemorySegment seg, long index) {
        return (int)_PERF_DATA_BLOCK.SystemNameLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SystemNameLength$set(MemorySegment seg, long index, int x) {
        _PERF_DATA_BLOCK.SystemNameLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SystemNameOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SystemNameOffset"));
    public static VarHandle SystemNameOffset$VH() {
        return _PERF_DATA_BLOCK.SystemNameOffset$VH;
    }
    public static int SystemNameOffset$get(MemorySegment seg) {
        return (int)_PERF_DATA_BLOCK.SystemNameOffset$VH.get(seg);
    }
    public static void SystemNameOffset$set( MemorySegment seg, int x) {
        _PERF_DATA_BLOCK.SystemNameOffset$VH.set(seg, x);
    }
    public static int SystemNameOffset$get(MemorySegment seg, long index) {
        return (int)_PERF_DATA_BLOCK.SystemNameOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SystemNameOffset$set(MemorySegment seg, long index, int x) {
        _PERF_DATA_BLOCK.SystemNameOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


