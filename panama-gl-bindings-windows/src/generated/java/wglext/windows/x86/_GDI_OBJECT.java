// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GDI_OBJECT {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("ObjectType"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("hBitmap"),
            Constants$root.C_POINTER$LAYOUT.withName("hPalette"),
            Constants$root.C_POINTER$LAYOUT.withName("hGeneric")
        ).withName("u")
    ).withName("_GDI_OBJECT");
    public static MemoryLayout $LAYOUT() {
        return _GDI_OBJECT.$struct$LAYOUT;
    }
    static final VarHandle ObjectType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ObjectType"));
    public static VarHandle ObjectType$VH() {
        return _GDI_OBJECT.ObjectType$VH;
    }
    public static int ObjectType$get(MemorySegment seg) {
        return (int)_GDI_OBJECT.ObjectType$VH.get(seg);
    }
    public static void ObjectType$set( MemorySegment seg, int x) {
        _GDI_OBJECT.ObjectType$VH.set(seg, x);
    }
    public static int ObjectType$get(MemorySegment seg, long index) {
        return (int)_GDI_OBJECT.ObjectType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ObjectType$set(MemorySegment seg, long index, int x) {
        _GDI_OBJECT.ObjectType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class __MIDL_IAdviseSink_0002 {

        static final  GroupLayout __MIDL_IAdviseSink_0002$union$LAYOUT = MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("hBitmap"),
            Constants$root.C_POINTER$LAYOUT.withName("hPalette"),
            Constants$root.C_POINTER$LAYOUT.withName("hGeneric")
        ).withName("__MIDL_IAdviseSink_0002");
        public static MemoryLayout $LAYOUT() {
            return __MIDL_IAdviseSink_0002.__MIDL_IAdviseSink_0002$union$LAYOUT;
        }
        static final VarHandle hBitmap$VH = __MIDL_IAdviseSink_0002$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hBitmap"));
        public static VarHandle hBitmap$VH() {
            return __MIDL_IAdviseSink_0002.hBitmap$VH;
        }
        public static MemoryAddress hBitmap$get(MemorySegment seg) {
            return (java.lang.foreign.MemoryAddress)__MIDL_IAdviseSink_0002.hBitmap$VH.get(seg);
        }
        public static void hBitmap$set( MemorySegment seg, MemoryAddress x) {
            __MIDL_IAdviseSink_0002.hBitmap$VH.set(seg, x);
        }
        public static MemoryAddress hBitmap$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemoryAddress)__MIDL_IAdviseSink_0002.hBitmap$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void hBitmap$set(MemorySegment seg, long index, MemoryAddress x) {
            __MIDL_IAdviseSink_0002.hBitmap$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle hPalette$VH = __MIDL_IAdviseSink_0002$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hPalette"));
        public static VarHandle hPalette$VH() {
            return __MIDL_IAdviseSink_0002.hPalette$VH;
        }
        public static MemoryAddress hPalette$get(MemorySegment seg) {
            return (java.lang.foreign.MemoryAddress)__MIDL_IAdviseSink_0002.hPalette$VH.get(seg);
        }
        public static void hPalette$set( MemorySegment seg, MemoryAddress x) {
            __MIDL_IAdviseSink_0002.hPalette$VH.set(seg, x);
        }
        public static MemoryAddress hPalette$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemoryAddress)__MIDL_IAdviseSink_0002.hPalette$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void hPalette$set(MemorySegment seg, long index, MemoryAddress x) {
            __MIDL_IAdviseSink_0002.hPalette$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle hGeneric$VH = __MIDL_IAdviseSink_0002$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hGeneric"));
        public static VarHandle hGeneric$VH() {
            return __MIDL_IAdviseSink_0002.hGeneric$VH;
        }
        public static MemoryAddress hGeneric$get(MemorySegment seg) {
            return (java.lang.foreign.MemoryAddress)__MIDL_IAdviseSink_0002.hGeneric$VH.get(seg);
        }
        public static void hGeneric$set( MemorySegment seg, MemoryAddress x) {
            __MIDL_IAdviseSink_0002.hGeneric$VH.set(seg, x);
        }
        public static MemoryAddress hGeneric$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemoryAddress)__MIDL_IAdviseSink_0002.hGeneric$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void hGeneric$set(MemorySegment seg, long index, MemoryAddress x) {
            __MIDL_IAdviseSink_0002.hGeneric$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


