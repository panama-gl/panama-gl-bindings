// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _STORAGE_PROPERTY_QUERY {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("PropertyId"),
        Constants$root.C_LONG$LAYOUT.withName("QueryType"),
        MemoryLayout.sequenceLayout(1, Constants$root.C_CHAR$LAYOUT).withName("AdditionalParameters"),
        MemoryLayout.paddingLayout(24)
    ).withName("_STORAGE_PROPERTY_QUERY");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_PROPERTY_QUERY.$struct$LAYOUT;
    }
    static final VarHandle PropertyId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PropertyId"));
    public static VarHandle PropertyId$VH() {
        return _STORAGE_PROPERTY_QUERY.PropertyId$VH;
    }
    public static int PropertyId$get(MemorySegment seg) {
        return (int)_STORAGE_PROPERTY_QUERY.PropertyId$VH.get(seg);
    }
    public static void PropertyId$set( MemorySegment seg, int x) {
        _STORAGE_PROPERTY_QUERY.PropertyId$VH.set(seg, x);
    }
    public static int PropertyId$get(MemorySegment seg, long index) {
        return (int)_STORAGE_PROPERTY_QUERY.PropertyId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PropertyId$set(MemorySegment seg, long index, int x) {
        _STORAGE_PROPERTY_QUERY.PropertyId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle QueryType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryType"));
    public static VarHandle QueryType$VH() {
        return _STORAGE_PROPERTY_QUERY.QueryType$VH;
    }
    public static int QueryType$get(MemorySegment seg) {
        return (int)_STORAGE_PROPERTY_QUERY.QueryType$VH.get(seg);
    }
    public static void QueryType$set( MemorySegment seg, int x) {
        _STORAGE_PROPERTY_QUERY.QueryType$VH.set(seg, x);
    }
    public static int QueryType$get(MemorySegment seg, long index) {
        return (int)_STORAGE_PROPERTY_QUERY.QueryType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryType$set(MemorySegment seg, long index, int x) {
        _STORAGE_PROPERTY_QUERY.QueryType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment AdditionalParameters$slice(MemorySegment seg) {
        return seg.asSlice(8, 1);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


