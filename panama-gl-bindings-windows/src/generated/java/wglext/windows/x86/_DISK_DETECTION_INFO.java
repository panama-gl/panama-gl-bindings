// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _DISK_DETECTION_INFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("SizeOfDetectInfo"),
        Constants$root.C_LONG$LAYOUT.withName("DetectionType"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("DriveSelect"),
                    MemoryLayout.paddingLayout(16),
                    Constants$root.C_LONG$LAYOUT.withName("MaxCylinders"),
                    Constants$root.C_SHORT$LAYOUT.withName("SectorsPerTrack"),
                    Constants$root.C_SHORT$LAYOUT.withName("MaxHeads"),
                    Constants$root.C_SHORT$LAYOUT.withName("NumberDrives"),
                    MemoryLayout.paddingLayout(16)
                ).withName("Int13"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("ExBufferSize"),
                    Constants$root.C_SHORT$LAYOUT.withName("ExFlags"),
                    Constants$root.C_LONG$LAYOUT.withName("ExCylinders"),
                    Constants$root.C_LONG$LAYOUT.withName("ExHeads"),
                    Constants$root.C_LONG$LAYOUT.withName("ExSectorsPerTrack"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("ExSectorsPerDrive"),
                    Constants$root.C_SHORT$LAYOUT.withName("ExSectorSize"),
                    Constants$root.C_SHORT$LAYOUT.withName("ExReserved"),
                    MemoryLayout.paddingLayout(32)
                ).withName("ExInt13")
            ).withName("$anon$0")
        ).withName("$anon$0")
    ).withName("_DISK_DETECTION_INFO");
    public static MemoryLayout $LAYOUT() {
        return _DISK_DETECTION_INFO.$struct$LAYOUT;
    }
    static final VarHandle SizeOfDetectInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SizeOfDetectInfo"));
    public static VarHandle SizeOfDetectInfo$VH() {
        return _DISK_DETECTION_INFO.SizeOfDetectInfo$VH;
    }
    public static int SizeOfDetectInfo$get(MemorySegment seg) {
        return (int)_DISK_DETECTION_INFO.SizeOfDetectInfo$VH.get(seg);
    }
    public static void SizeOfDetectInfo$set( MemorySegment seg, int x) {
        _DISK_DETECTION_INFO.SizeOfDetectInfo$VH.set(seg, x);
    }
    public static int SizeOfDetectInfo$get(MemorySegment seg, long index) {
        return (int)_DISK_DETECTION_INFO.SizeOfDetectInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SizeOfDetectInfo$set(MemorySegment seg, long index, int x) {
        _DISK_DETECTION_INFO.SizeOfDetectInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DetectionType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DetectionType"));
    public static VarHandle DetectionType$VH() {
        return _DISK_DETECTION_INFO.DetectionType$VH;
    }
    public static int DetectionType$get(MemorySegment seg) {
        return (int)_DISK_DETECTION_INFO.DetectionType$VH.get(seg);
    }
    public static void DetectionType$set( MemorySegment seg, int x) {
        _DISK_DETECTION_INFO.DetectionType$VH.set(seg, x);
    }
    public static int DetectionType$get(MemorySegment seg, long index) {
        return (int)_DISK_DETECTION_INFO.DetectionType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DetectionType$set(MemorySegment seg, long index, int x) {
        _DISK_DETECTION_INFO.DetectionType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Int13$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static MemorySegment ExInt13$slice(MemorySegment seg) {
        return seg.asSlice(24, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


