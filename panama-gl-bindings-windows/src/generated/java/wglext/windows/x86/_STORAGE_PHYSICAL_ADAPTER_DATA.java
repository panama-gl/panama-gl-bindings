// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _STORAGE_PHYSICAL_ADAPTER_DATA {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("AdapterId"),
        Constants$root.C_LONG$LAYOUT.withName("HealthStatus"),
        Constants$root.C_LONG$LAYOUT.withName("CommandProtocol"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_CHAR$LAYOUT.withName("SubMinor"),
                        Constants$root.C_CHAR$LAYOUT.withName("Minor")
                    ).withName("$anon$0"),
                    Constants$root.C_SHORT$LAYOUT.withName("AsUshort")
                ).withName("MinorVersion"),
                Constants$root.C_SHORT$LAYOUT.withName("MajorVersion")
            ).withName("$anon$0"),
            Constants$root.C_LONG$LAYOUT.withName("AsUlong")
        ).withName("SpecVersion"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Vendor"),
        MemoryLayout.sequenceLayout(40, Constants$root.C_CHAR$LAYOUT).withName("Model"),
        MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("FirmwareRevision"),
        MemoryLayout.sequenceLayout(32, Constants$root.C_CHAR$LAYOUT).withName("PhysicalLocation"),
        Constants$root.C_CHAR$LAYOUT.withName("ExpanderConnected"),
        MemoryLayout.sequenceLayout(3, Constants$root.C_CHAR$LAYOUT).withName("Reserved0"),
        MemoryLayout.sequenceLayout(3, Constants$root.C_LONG$LAYOUT).withName("Reserved1")
    ).withName("_STORAGE_PHYSICAL_ADAPTER_DATA");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_PHYSICAL_ADAPTER_DATA.$struct$LAYOUT;
    }
    static final VarHandle AdapterId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AdapterId"));
    public static VarHandle AdapterId$VH() {
        return _STORAGE_PHYSICAL_ADAPTER_DATA.AdapterId$VH;
    }
    public static int AdapterId$get(MemorySegment seg) {
        return (int)_STORAGE_PHYSICAL_ADAPTER_DATA.AdapterId$VH.get(seg);
    }
    public static void AdapterId$set( MemorySegment seg, int x) {
        _STORAGE_PHYSICAL_ADAPTER_DATA.AdapterId$VH.set(seg, x);
    }
    public static int AdapterId$get(MemorySegment seg, long index) {
        return (int)_STORAGE_PHYSICAL_ADAPTER_DATA.AdapterId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AdapterId$set(MemorySegment seg, long index, int x) {
        _STORAGE_PHYSICAL_ADAPTER_DATA.AdapterId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle HealthStatus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("HealthStatus"));
    public static VarHandle HealthStatus$VH() {
        return _STORAGE_PHYSICAL_ADAPTER_DATA.HealthStatus$VH;
    }
    public static int HealthStatus$get(MemorySegment seg) {
        return (int)_STORAGE_PHYSICAL_ADAPTER_DATA.HealthStatus$VH.get(seg);
    }
    public static void HealthStatus$set( MemorySegment seg, int x) {
        _STORAGE_PHYSICAL_ADAPTER_DATA.HealthStatus$VH.set(seg, x);
    }
    public static int HealthStatus$get(MemorySegment seg, long index) {
        return (int)_STORAGE_PHYSICAL_ADAPTER_DATA.HealthStatus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HealthStatus$set(MemorySegment seg, long index, int x) {
        _STORAGE_PHYSICAL_ADAPTER_DATA.HealthStatus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CommandProtocol$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CommandProtocol"));
    public static VarHandle CommandProtocol$VH() {
        return _STORAGE_PHYSICAL_ADAPTER_DATA.CommandProtocol$VH;
    }
    public static int CommandProtocol$get(MemorySegment seg) {
        return (int)_STORAGE_PHYSICAL_ADAPTER_DATA.CommandProtocol$VH.get(seg);
    }
    public static void CommandProtocol$set( MemorySegment seg, int x) {
        _STORAGE_PHYSICAL_ADAPTER_DATA.CommandProtocol$VH.set(seg, x);
    }
    public static int CommandProtocol$get(MemorySegment seg, long index) {
        return (int)_STORAGE_PHYSICAL_ADAPTER_DATA.CommandProtocol$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CommandProtocol$set(MemorySegment seg, long index, int x) {
        _STORAGE_PHYSICAL_ADAPTER_DATA.CommandProtocol$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment SpecVersion$slice(MemorySegment seg) {
        return seg.asSlice(12, 4);
    }
    public static MemorySegment Vendor$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment Model$slice(MemorySegment seg) {
        return seg.asSlice(24, 40);
    }
    public static MemorySegment FirmwareRevision$slice(MemorySegment seg) {
        return seg.asSlice(64, 16);
    }
    public static MemorySegment PhysicalLocation$slice(MemorySegment seg) {
        return seg.asSlice(80, 32);
    }
    static final VarHandle ExpanderConnected$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExpanderConnected"));
    public static VarHandle ExpanderConnected$VH() {
        return _STORAGE_PHYSICAL_ADAPTER_DATA.ExpanderConnected$VH;
    }
    public static byte ExpanderConnected$get(MemorySegment seg) {
        return (byte)_STORAGE_PHYSICAL_ADAPTER_DATA.ExpanderConnected$VH.get(seg);
    }
    public static void ExpanderConnected$set( MemorySegment seg, byte x) {
        _STORAGE_PHYSICAL_ADAPTER_DATA.ExpanderConnected$VH.set(seg, x);
    }
    public static byte ExpanderConnected$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_PHYSICAL_ADAPTER_DATA.ExpanderConnected$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExpanderConnected$set(MemorySegment seg, long index, byte x) {
        _STORAGE_PHYSICAL_ADAPTER_DATA.ExpanderConnected$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved0$slice(MemorySegment seg) {
        return seg.asSlice(113, 3);
    }
    public static MemorySegment Reserved1$slice(MemorySegment seg) {
        return seg.asSlice(116, 12);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


