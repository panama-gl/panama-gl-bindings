// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class RPC_DISPATCH_TABLE {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("DispatchTableCount"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("DispatchTable"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Reserved")
    );
    public static MemoryLayout $LAYOUT() {
        return RPC_DISPATCH_TABLE.$struct$LAYOUT;
    }
    static final VarHandle DispatchTableCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DispatchTableCount"));
    public static VarHandle DispatchTableCount$VH() {
        return RPC_DISPATCH_TABLE.DispatchTableCount$VH;
    }
    public static int DispatchTableCount$get(MemorySegment seg) {
        return (int)RPC_DISPATCH_TABLE.DispatchTableCount$VH.get(seg);
    }
    public static void DispatchTableCount$set( MemorySegment seg, int x) {
        RPC_DISPATCH_TABLE.DispatchTableCount$VH.set(seg, x);
    }
    public static int DispatchTableCount$get(MemorySegment seg, long index) {
        return (int)RPC_DISPATCH_TABLE.DispatchTableCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DispatchTableCount$set(MemorySegment seg, long index, int x) {
        RPC_DISPATCH_TABLE.DispatchTableCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DispatchTable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DispatchTable"));
    public static VarHandle DispatchTable$VH() {
        return RPC_DISPATCH_TABLE.DispatchTable$VH;
    }
    public static MemoryAddress DispatchTable$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)RPC_DISPATCH_TABLE.DispatchTable$VH.get(seg);
    }
    public static void DispatchTable$set( MemorySegment seg, MemoryAddress x) {
        RPC_DISPATCH_TABLE.DispatchTable$VH.set(seg, x);
    }
    public static MemoryAddress DispatchTable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)RPC_DISPATCH_TABLE.DispatchTable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DispatchTable$set(MemorySegment seg, long index, MemoryAddress x) {
        RPC_DISPATCH_TABLE.DispatchTable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved"));
    public static VarHandle Reserved$VH() {
        return RPC_DISPATCH_TABLE.Reserved$VH;
    }
    public static long Reserved$get(MemorySegment seg) {
        return (long)RPC_DISPATCH_TABLE.Reserved$VH.get(seg);
    }
    public static void Reserved$set( MemorySegment seg, long x) {
        RPC_DISPATCH_TABLE.Reserved$VH.set(seg, x);
    }
    public static long Reserved$get(MemorySegment seg, long index) {
        return (long)RPC_DISPATCH_TABLE.Reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved$set(MemorySegment seg, long index, long x) {
        RPC_DISPATCH_TABLE.Reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


