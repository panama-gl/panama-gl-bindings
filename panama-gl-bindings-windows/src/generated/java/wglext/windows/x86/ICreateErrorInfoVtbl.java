// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class ICreateErrorInfoVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("SetGUID"),
        Constants$root.C_POINTER$LAYOUT.withName("SetSource"),
        Constants$root.C_POINTER$LAYOUT.withName("SetDescription"),
        Constants$root.C_POINTER$LAYOUT.withName("SetHelpFile"),
        Constants$root.C_POINTER$LAYOUT.withName("SetHelpContext")
    ).withName("ICreateErrorInfoVtbl");
    public static MemoryLayout $LAYOUT() {
        return ICreateErrorInfoVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        ICreateErrorInfoVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ICreateErrorInfoVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)ICreateErrorInfoVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return ICreateErrorInfoVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ICreateErrorInfoVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        ICreateErrorInfoVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ICreateErrorInfoVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateErrorInfoVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        ICreateErrorInfoVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ICreateErrorInfoVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)ICreateErrorInfoVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return ICreateErrorInfoVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ICreateErrorInfoVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        ICreateErrorInfoVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ICreateErrorInfoVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateErrorInfoVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        ICreateErrorInfoVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, ICreateErrorInfoVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)ICreateErrorInfoVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return ICreateErrorInfoVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ICreateErrorInfoVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        ICreateErrorInfoVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ICreateErrorInfoVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateErrorInfoVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor SetGUID$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetGUID$MH = RuntimeHelper.downcallHandle(
        ICreateErrorInfoVtbl.SetGUID$FUNC
    );
    public interface SetGUID {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(SetGUID fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetGUID.class, fi, ICreateErrorInfoVtbl.SetGUID$FUNC, session);
        }
        static SetGUID ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)ICreateErrorInfoVtbl.SetGUID$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetGUID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetGUID"));
    public static VarHandle SetGUID$VH() {
        return ICreateErrorInfoVtbl.SetGUID$VH;
    }
    public static MemoryAddress SetGUID$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ICreateErrorInfoVtbl.SetGUID$VH.get(seg);
    }
    public static void SetGUID$set( MemorySegment seg, MemoryAddress x) {
        ICreateErrorInfoVtbl.SetGUID$VH.set(seg, x);
    }
    public static MemoryAddress SetGUID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ICreateErrorInfoVtbl.SetGUID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetGUID$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateErrorInfoVtbl.SetGUID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetGUID SetGUID (MemorySegment segment, MemorySession session) {
        return SetGUID.ofAddress(SetGUID$get(segment), session);
    }
    static final FunctionDescriptor SetSource$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetSource$MH = RuntimeHelper.downcallHandle(
        ICreateErrorInfoVtbl.SetSource$FUNC
    );
    public interface SetSource {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(SetSource fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetSource.class, fi, ICreateErrorInfoVtbl.SetSource$FUNC, session);
        }
        static SetSource ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)ICreateErrorInfoVtbl.SetSource$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetSource$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetSource"));
    public static VarHandle SetSource$VH() {
        return ICreateErrorInfoVtbl.SetSource$VH;
    }
    public static MemoryAddress SetSource$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ICreateErrorInfoVtbl.SetSource$VH.get(seg);
    }
    public static void SetSource$set( MemorySegment seg, MemoryAddress x) {
        ICreateErrorInfoVtbl.SetSource$VH.set(seg, x);
    }
    public static MemoryAddress SetSource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ICreateErrorInfoVtbl.SetSource$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSource$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateErrorInfoVtbl.SetSource$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSource SetSource (MemorySegment segment, MemorySession session) {
        return SetSource.ofAddress(SetSource$get(segment), session);
    }
    static final FunctionDescriptor SetDescription$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetDescription$MH = RuntimeHelper.downcallHandle(
        ICreateErrorInfoVtbl.SetDescription$FUNC
    );
    public interface SetDescription {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(SetDescription fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetDescription.class, fi, ICreateErrorInfoVtbl.SetDescription$FUNC, session);
        }
        static SetDescription ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)ICreateErrorInfoVtbl.SetDescription$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetDescription$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetDescription"));
    public static VarHandle SetDescription$VH() {
        return ICreateErrorInfoVtbl.SetDescription$VH;
    }
    public static MemoryAddress SetDescription$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ICreateErrorInfoVtbl.SetDescription$VH.get(seg);
    }
    public static void SetDescription$set( MemorySegment seg, MemoryAddress x) {
        ICreateErrorInfoVtbl.SetDescription$VH.set(seg, x);
    }
    public static MemoryAddress SetDescription$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ICreateErrorInfoVtbl.SetDescription$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetDescription$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateErrorInfoVtbl.SetDescription$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetDescription SetDescription (MemorySegment segment, MemorySession session) {
        return SetDescription.ofAddress(SetDescription$get(segment), session);
    }
    static final FunctionDescriptor SetHelpFile$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetHelpFile$MH = RuntimeHelper.downcallHandle(
        ICreateErrorInfoVtbl.SetHelpFile$FUNC
    );
    public interface SetHelpFile {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(SetHelpFile fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetHelpFile.class, fi, ICreateErrorInfoVtbl.SetHelpFile$FUNC, session);
        }
        static SetHelpFile ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)ICreateErrorInfoVtbl.SetHelpFile$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetHelpFile$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetHelpFile"));
    public static VarHandle SetHelpFile$VH() {
        return ICreateErrorInfoVtbl.SetHelpFile$VH;
    }
    public static MemoryAddress SetHelpFile$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ICreateErrorInfoVtbl.SetHelpFile$VH.get(seg);
    }
    public static void SetHelpFile$set( MemorySegment seg, MemoryAddress x) {
        ICreateErrorInfoVtbl.SetHelpFile$VH.set(seg, x);
    }
    public static MemoryAddress SetHelpFile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ICreateErrorInfoVtbl.SetHelpFile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetHelpFile$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateErrorInfoVtbl.SetHelpFile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetHelpFile SetHelpFile (MemorySegment segment, MemorySession session) {
        return SetHelpFile.ofAddress(SetHelpFile$get(segment), session);
    }
    static final FunctionDescriptor SetHelpContext$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetHelpContext$MH = RuntimeHelper.downcallHandle(
        ICreateErrorInfoVtbl.SetHelpContext$FUNC
    );
    public interface SetHelpContext {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(SetHelpContext fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetHelpContext.class, fi, ICreateErrorInfoVtbl.SetHelpContext$FUNC, session);
        }
        static SetHelpContext ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)ICreateErrorInfoVtbl.SetHelpContext$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetHelpContext$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetHelpContext"));
    public static VarHandle SetHelpContext$VH() {
        return ICreateErrorInfoVtbl.SetHelpContext$VH;
    }
    public static MemoryAddress SetHelpContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ICreateErrorInfoVtbl.SetHelpContext$VH.get(seg);
    }
    public static void SetHelpContext$set( MemorySegment seg, MemoryAddress x) {
        ICreateErrorInfoVtbl.SetHelpContext$VH.set(seg, x);
    }
    public static MemoryAddress SetHelpContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ICreateErrorInfoVtbl.SetHelpContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetHelpContext$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateErrorInfoVtbl.SetHelpContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetHelpContext SetHelpContext (MemorySegment segment, MemorySession session) {
        return SetHelpContext.ofAddress(SetHelpContext$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


