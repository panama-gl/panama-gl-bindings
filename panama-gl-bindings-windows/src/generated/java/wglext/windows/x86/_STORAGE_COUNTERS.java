// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _STORAGE_COUNTERS {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("NumberOfCounters"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Type"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("Week"),
                    Constants$root.C_LONG$LAYOUT.withName("Year")
                ).withName("ManufactureDate"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("AsUlonglong")
            ).withName("Value")
        ).withName("_STORAGE_COUNTER")).withName("Counters")
    ).withName("_STORAGE_COUNTERS");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_COUNTERS.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _STORAGE_COUNTERS.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_STORAGE_COUNTERS.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _STORAGE_COUNTERS.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_STORAGE_COUNTERS.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _STORAGE_COUNTERS.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _STORAGE_COUNTERS.Size$VH;
    }
    public static int Size$get(MemorySegment seg) {
        return (int)_STORAGE_COUNTERS.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, int x) {
        _STORAGE_COUNTERS.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_STORAGE_COUNTERS.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _STORAGE_COUNTERS.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumberOfCounters$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumberOfCounters"));
    public static VarHandle NumberOfCounters$VH() {
        return _STORAGE_COUNTERS.NumberOfCounters$VH;
    }
    public static int NumberOfCounters$get(MemorySegment seg) {
        return (int)_STORAGE_COUNTERS.NumberOfCounters$VH.get(seg);
    }
    public static void NumberOfCounters$set( MemorySegment seg, int x) {
        _STORAGE_COUNTERS.NumberOfCounters$VH.set(seg, x);
    }
    public static int NumberOfCounters$get(MemorySegment seg, long index) {
        return (int)_STORAGE_COUNTERS.NumberOfCounters$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfCounters$set(MemorySegment seg, long index, int x) {
        _STORAGE_COUNTERS.NumberOfCounters$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Counters$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


