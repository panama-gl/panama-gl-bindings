// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _SCM_REGION {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_LONG$LAYOUT.withName("NfitHandle"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Data1"),
            Constants$root.C_SHORT$LAYOUT.withName("Data2"),
            Constants$root.C_SHORT$LAYOUT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
        ).withName("LogicalDeviceGuid"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Data1"),
            Constants$root.C_SHORT$LAYOUT.withName("Data2"),
            Constants$root.C_SHORT$LAYOUT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
        ).withName("AddressRangeType"),
        Constants$root.C_LONG$LAYOUT.withName("AssociatedId"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Length"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("StartingDPA"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("BaseSPA"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("SPAOffset"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("RegionOffset")
    ).withName("_SCM_REGION");
    public static MemoryLayout $LAYOUT() {
        return _SCM_REGION.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _SCM_REGION.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_SCM_REGION.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _SCM_REGION.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_SCM_REGION.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _SCM_REGION.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _SCM_REGION.Size$VH;
    }
    public static int Size$get(MemorySegment seg) {
        return (int)_SCM_REGION.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, int x) {
        _SCM_REGION.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_SCM_REGION.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _SCM_REGION.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _SCM_REGION.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)_SCM_REGION.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        _SCM_REGION.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_SCM_REGION.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _SCM_REGION.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NfitHandle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NfitHandle"));
    public static VarHandle NfitHandle$VH() {
        return _SCM_REGION.NfitHandle$VH;
    }
    public static int NfitHandle$get(MemorySegment seg) {
        return (int)_SCM_REGION.NfitHandle$VH.get(seg);
    }
    public static void NfitHandle$set( MemorySegment seg, int x) {
        _SCM_REGION.NfitHandle$VH.set(seg, x);
    }
    public static int NfitHandle$get(MemorySegment seg, long index) {
        return (int)_SCM_REGION.NfitHandle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NfitHandle$set(MemorySegment seg, long index, int x) {
        _SCM_REGION.NfitHandle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment LogicalDeviceGuid$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static MemorySegment AddressRangeType$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    static final VarHandle AssociatedId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AssociatedId"));
    public static VarHandle AssociatedId$VH() {
        return _SCM_REGION.AssociatedId$VH;
    }
    public static int AssociatedId$get(MemorySegment seg) {
        return (int)_SCM_REGION.AssociatedId$VH.get(seg);
    }
    public static void AssociatedId$set( MemorySegment seg, int x) {
        _SCM_REGION.AssociatedId$VH.set(seg, x);
    }
    public static int AssociatedId$get(MemorySegment seg, long index) {
        return (int)_SCM_REGION.AssociatedId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AssociatedId$set(MemorySegment seg, long index, int x) {
        _SCM_REGION.AssociatedId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Length"));
    public static VarHandle Length$VH() {
        return _SCM_REGION.Length$VH;
    }
    public static long Length$get(MemorySegment seg) {
        return (long)_SCM_REGION.Length$VH.get(seg);
    }
    public static void Length$set( MemorySegment seg, long x) {
        _SCM_REGION.Length$VH.set(seg, x);
    }
    public static long Length$get(MemorySegment seg, long index) {
        return (long)_SCM_REGION.Length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Length$set(MemorySegment seg, long index, long x) {
        _SCM_REGION.Length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle StartingDPA$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StartingDPA"));
    public static VarHandle StartingDPA$VH() {
        return _SCM_REGION.StartingDPA$VH;
    }
    public static long StartingDPA$get(MemorySegment seg) {
        return (long)_SCM_REGION.StartingDPA$VH.get(seg);
    }
    public static void StartingDPA$set( MemorySegment seg, long x) {
        _SCM_REGION.StartingDPA$VH.set(seg, x);
    }
    public static long StartingDPA$get(MemorySegment seg, long index) {
        return (long)_SCM_REGION.StartingDPA$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StartingDPA$set(MemorySegment seg, long index, long x) {
        _SCM_REGION.StartingDPA$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BaseSPA$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BaseSPA"));
    public static VarHandle BaseSPA$VH() {
        return _SCM_REGION.BaseSPA$VH;
    }
    public static long BaseSPA$get(MemorySegment seg) {
        return (long)_SCM_REGION.BaseSPA$VH.get(seg);
    }
    public static void BaseSPA$set( MemorySegment seg, long x) {
        _SCM_REGION.BaseSPA$VH.set(seg, x);
    }
    public static long BaseSPA$get(MemorySegment seg, long index) {
        return (long)_SCM_REGION.BaseSPA$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BaseSPA$set(MemorySegment seg, long index, long x) {
        _SCM_REGION.BaseSPA$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SPAOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SPAOffset"));
    public static VarHandle SPAOffset$VH() {
        return _SCM_REGION.SPAOffset$VH;
    }
    public static long SPAOffset$get(MemorySegment seg) {
        return (long)_SCM_REGION.SPAOffset$VH.get(seg);
    }
    public static void SPAOffset$set( MemorySegment seg, long x) {
        _SCM_REGION.SPAOffset$VH.set(seg, x);
    }
    public static long SPAOffset$get(MemorySegment seg, long index) {
        return (long)_SCM_REGION.SPAOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SPAOffset$set(MemorySegment seg, long index, long x) {
        _SCM_REGION.SPAOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RegionOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RegionOffset"));
    public static VarHandle RegionOffset$VH() {
        return _SCM_REGION.RegionOffset$VH;
    }
    public static long RegionOffset$get(MemorySegment seg) {
        return (long)_SCM_REGION.RegionOffset$VH.get(seg);
    }
    public static void RegionOffset$set( MemorySegment seg, long x) {
        _SCM_REGION.RegionOffset$VH.set(seg, x);
    }
    public static long RegionOffset$get(MemorySegment seg, long index) {
        return (long)_SCM_REGION.RegionOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RegionOffset$set(MemorySegment seg, long index, long x) {
        _SCM_REGION.RegionOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


