// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IMarshalVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetUnmarshalClass"),
        Constants$root.C_POINTER$LAYOUT.withName("GetMarshalSizeMax"),
        Constants$root.C_POINTER$LAYOUT.withName("MarshalInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("UnmarshalInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("ReleaseMarshalData"),
        Constants$root.C_POINTER$LAYOUT.withName("DisconnectObject")
    ).withName("IMarshalVtbl");
    public static MemoryLayout $LAYOUT() {
        return IMarshalVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IMarshalVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IMarshalVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IMarshalVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IMarshalVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IMarshalVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IMarshalVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IMarshalVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IMarshalVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IMarshalVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IMarshalVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IMarshalVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IMarshalVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IMarshalVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IMarshalVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IMarshalVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor GetUnmarshalClass$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetUnmarshalClass$MH = RuntimeHelper.downcallHandle(
        IMarshalVtbl.GetUnmarshalClass$FUNC
    );
    public interface GetUnmarshalClass {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, java.lang.foreign.MemoryAddress _x4, int _x5, java.lang.foreign.MemoryAddress _x6);
        static MemorySegment allocate(GetUnmarshalClass fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetUnmarshalClass.class, fi, IMarshalVtbl.GetUnmarshalClass$FUNC, session);
        }
        static GetUnmarshalClass ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, java.lang.foreign.MemoryAddress __x4, int __x5, java.lang.foreign.MemoryAddress __x6) -> {
                try {
                    return (int)IMarshalVtbl.GetUnmarshalClass$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, (java.lang.foreign.Addressable)__x4, __x5, (java.lang.foreign.Addressable)__x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetUnmarshalClass$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetUnmarshalClass"));
    public static VarHandle GetUnmarshalClass$VH() {
        return IMarshalVtbl.GetUnmarshalClass$VH;
    }
    public static MemoryAddress GetUnmarshalClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalVtbl.GetUnmarshalClass$VH.get(seg);
    }
    public static void GetUnmarshalClass$set( MemorySegment seg, MemoryAddress x) {
        IMarshalVtbl.GetUnmarshalClass$VH.set(seg, x);
    }
    public static MemoryAddress GetUnmarshalClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalVtbl.GetUnmarshalClass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetUnmarshalClass$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalVtbl.GetUnmarshalClass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetUnmarshalClass GetUnmarshalClass (MemorySegment segment, MemorySession session) {
        return GetUnmarshalClass.ofAddress(GetUnmarshalClass$get(segment), session);
    }
    static final FunctionDescriptor GetMarshalSizeMax$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetMarshalSizeMax$MH = RuntimeHelper.downcallHandle(
        IMarshalVtbl.GetMarshalSizeMax$FUNC
    );
    public interface GetMarshalSizeMax {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, java.lang.foreign.MemoryAddress _x4, int _x5, java.lang.foreign.MemoryAddress _x6);
        static MemorySegment allocate(GetMarshalSizeMax fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetMarshalSizeMax.class, fi, IMarshalVtbl.GetMarshalSizeMax$FUNC, session);
        }
        static GetMarshalSizeMax ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, java.lang.foreign.MemoryAddress __x4, int __x5, java.lang.foreign.MemoryAddress __x6) -> {
                try {
                    return (int)IMarshalVtbl.GetMarshalSizeMax$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, (java.lang.foreign.Addressable)__x4, __x5, (java.lang.foreign.Addressable)__x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetMarshalSizeMax$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetMarshalSizeMax"));
    public static VarHandle GetMarshalSizeMax$VH() {
        return IMarshalVtbl.GetMarshalSizeMax$VH;
    }
    public static MemoryAddress GetMarshalSizeMax$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalVtbl.GetMarshalSizeMax$VH.get(seg);
    }
    public static void GetMarshalSizeMax$set( MemorySegment seg, MemoryAddress x) {
        IMarshalVtbl.GetMarshalSizeMax$VH.set(seg, x);
    }
    public static MemoryAddress GetMarshalSizeMax$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalVtbl.GetMarshalSizeMax$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetMarshalSizeMax$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalVtbl.GetMarshalSizeMax$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetMarshalSizeMax GetMarshalSizeMax (MemorySegment segment, MemorySession session) {
        return GetMarshalSizeMax.ofAddress(GetMarshalSizeMax$get(segment), session);
    }
    static final FunctionDescriptor MarshalInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle MarshalInterface$MH = RuntimeHelper.downcallHandle(
        IMarshalVtbl.MarshalInterface$FUNC
    );
    public interface MarshalInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, int _x4, java.lang.foreign.MemoryAddress _x5, int _x6);
        static MemorySegment allocate(MarshalInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(MarshalInterface.class, fi, IMarshalVtbl.MarshalInterface$FUNC, session);
        }
        static MarshalInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, int __x4, java.lang.foreign.MemoryAddress __x5, int __x6) -> {
                try {
                    return (int)IMarshalVtbl.MarshalInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, __x4, (java.lang.foreign.Addressable)__x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle MarshalInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MarshalInterface"));
    public static VarHandle MarshalInterface$VH() {
        return IMarshalVtbl.MarshalInterface$VH;
    }
    public static MemoryAddress MarshalInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalVtbl.MarshalInterface$VH.get(seg);
    }
    public static void MarshalInterface$set( MemorySegment seg, MemoryAddress x) {
        IMarshalVtbl.MarshalInterface$VH.set(seg, x);
    }
    public static MemoryAddress MarshalInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalVtbl.MarshalInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MarshalInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalVtbl.MarshalInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MarshalInterface MarshalInterface (MemorySegment segment, MemorySession session) {
        return MarshalInterface.ofAddress(MarshalInterface$get(segment), session);
    }
    static final FunctionDescriptor UnmarshalInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle UnmarshalInterface$MH = RuntimeHelper.downcallHandle(
        IMarshalVtbl.UnmarshalInterface$FUNC
    );
    public interface UnmarshalInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(UnmarshalInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(UnmarshalInterface.class, fi, IMarshalVtbl.UnmarshalInterface$FUNC, session);
        }
        static UnmarshalInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IMarshalVtbl.UnmarshalInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle UnmarshalInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UnmarshalInterface"));
    public static VarHandle UnmarshalInterface$VH() {
        return IMarshalVtbl.UnmarshalInterface$VH;
    }
    public static MemoryAddress UnmarshalInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalVtbl.UnmarshalInterface$VH.get(seg);
    }
    public static void UnmarshalInterface$set( MemorySegment seg, MemoryAddress x) {
        IMarshalVtbl.UnmarshalInterface$VH.set(seg, x);
    }
    public static MemoryAddress UnmarshalInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalVtbl.UnmarshalInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UnmarshalInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalVtbl.UnmarshalInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static UnmarshalInterface UnmarshalInterface (MemorySegment segment, MemorySession session) {
        return UnmarshalInterface.ofAddress(UnmarshalInterface$get(segment), session);
    }
    static final FunctionDescriptor ReleaseMarshalData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReleaseMarshalData$MH = RuntimeHelper.downcallHandle(
        IMarshalVtbl.ReleaseMarshalData$FUNC
    );
    public interface ReleaseMarshalData {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(ReleaseMarshalData fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ReleaseMarshalData.class, fi, IMarshalVtbl.ReleaseMarshalData$FUNC, session);
        }
        static ReleaseMarshalData ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IMarshalVtbl.ReleaseMarshalData$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReleaseMarshalData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReleaseMarshalData"));
    public static VarHandle ReleaseMarshalData$VH() {
        return IMarshalVtbl.ReleaseMarshalData$VH;
    }
    public static MemoryAddress ReleaseMarshalData$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalVtbl.ReleaseMarshalData$VH.get(seg);
    }
    public static void ReleaseMarshalData$set( MemorySegment seg, MemoryAddress x) {
        IMarshalVtbl.ReleaseMarshalData$VH.set(seg, x);
    }
    public static MemoryAddress ReleaseMarshalData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalVtbl.ReleaseMarshalData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseMarshalData$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalVtbl.ReleaseMarshalData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseMarshalData ReleaseMarshalData (MemorySegment segment, MemorySession session) {
        return ReleaseMarshalData.ofAddress(ReleaseMarshalData$get(segment), session);
    }
    static final FunctionDescriptor DisconnectObject$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle DisconnectObject$MH = RuntimeHelper.downcallHandle(
        IMarshalVtbl.DisconnectObject$FUNC
    );
    public interface DisconnectObject {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(DisconnectObject fi, MemorySession session) {
            return RuntimeHelper.upcallStub(DisconnectObject.class, fi, IMarshalVtbl.DisconnectObject$FUNC, session);
        }
        static DisconnectObject ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)IMarshalVtbl.DisconnectObject$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DisconnectObject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DisconnectObject"));
    public static VarHandle DisconnectObject$VH() {
        return IMarshalVtbl.DisconnectObject$VH;
    }
    public static MemoryAddress DisconnectObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMarshalVtbl.DisconnectObject$VH.get(seg);
    }
    public static void DisconnectObject$set( MemorySegment seg, MemoryAddress x) {
        IMarshalVtbl.DisconnectObject$VH.set(seg, x);
    }
    public static MemoryAddress DisconnectObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMarshalVtbl.DisconnectObject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DisconnectObject$set(MemorySegment seg, long index, MemoryAddress x) {
        IMarshalVtbl.DisconnectObject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DisconnectObject DisconnectObject (MemorySegment segment, MemorySession session) {
        return DisconnectObject.ofAddress(DisconnectObject$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


