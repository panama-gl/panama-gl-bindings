// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _DEVICEDUMP_SECTION_HEADER {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Data1"),
            Constants$root.C_SHORT$LAYOUT.withName("Data2"),
            Constants$root.C_SHORT$LAYOUT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
        ).withName("guidDeviceDataId"),
        MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("sOrganizationID"),
        Constants$root.C_LONG$LAYOUT.withName("dwFirmwareRevision"),
        MemoryLayout.sequenceLayout(32, Constants$root.C_CHAR$LAYOUT).withName("sModelNumber"),
        MemoryLayout.sequenceLayout(32, Constants$root.C_CHAR$LAYOUT).withName("szDeviceManufacturingID"),
        Constants$root.C_LONG$LAYOUT.withName("dwFlags"),
        Constants$root.C_LONG$LAYOUT.withName("bRestrictedPrivateDataVersion"),
        Constants$root.C_LONG$LAYOUT.withName("dwFirmwareIssueId"),
        MemoryLayout.sequenceLayout(132, Constants$root.C_CHAR$LAYOUT).withName("szIssueDescriptionString")
    ).withName("_DEVICEDUMP_SECTION_HEADER");
    public static MemoryLayout $LAYOUT() {
        return _DEVICEDUMP_SECTION_HEADER.$struct$LAYOUT;
    }
    public static MemorySegment guidDeviceDataId$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment sOrganizationID$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    static final VarHandle dwFirmwareRevision$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwFirmwareRevision"));
    public static VarHandle dwFirmwareRevision$VH() {
        return _DEVICEDUMP_SECTION_HEADER.dwFirmwareRevision$VH;
    }
    public static int dwFirmwareRevision$get(MemorySegment seg) {
        return (int)_DEVICEDUMP_SECTION_HEADER.dwFirmwareRevision$VH.get(seg);
    }
    public static void dwFirmwareRevision$set( MemorySegment seg, int x) {
        _DEVICEDUMP_SECTION_HEADER.dwFirmwareRevision$VH.set(seg, x);
    }
    public static int dwFirmwareRevision$get(MemorySegment seg, long index) {
        return (int)_DEVICEDUMP_SECTION_HEADER.dwFirmwareRevision$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFirmwareRevision$set(MemorySegment seg, long index, int x) {
        _DEVICEDUMP_SECTION_HEADER.dwFirmwareRevision$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sModelNumber$slice(MemorySegment seg) {
        return seg.asSlice(36, 32);
    }
    public static MemorySegment szDeviceManufacturingID$slice(MemorySegment seg) {
        return seg.asSlice(68, 32);
    }
    static final VarHandle dwFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwFlags"));
    public static VarHandle dwFlags$VH() {
        return _DEVICEDUMP_SECTION_HEADER.dwFlags$VH;
    }
    public static int dwFlags$get(MemorySegment seg) {
        return (int)_DEVICEDUMP_SECTION_HEADER.dwFlags$VH.get(seg);
    }
    public static void dwFlags$set( MemorySegment seg, int x) {
        _DEVICEDUMP_SECTION_HEADER.dwFlags$VH.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)_DEVICEDUMP_SECTION_HEADER.dwFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        _DEVICEDUMP_SECTION_HEADER.dwFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bRestrictedPrivateDataVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bRestrictedPrivateDataVersion"));
    public static VarHandle bRestrictedPrivateDataVersion$VH() {
        return _DEVICEDUMP_SECTION_HEADER.bRestrictedPrivateDataVersion$VH;
    }
    public static int bRestrictedPrivateDataVersion$get(MemorySegment seg) {
        return (int)_DEVICEDUMP_SECTION_HEADER.bRestrictedPrivateDataVersion$VH.get(seg);
    }
    public static void bRestrictedPrivateDataVersion$set( MemorySegment seg, int x) {
        _DEVICEDUMP_SECTION_HEADER.bRestrictedPrivateDataVersion$VH.set(seg, x);
    }
    public static int bRestrictedPrivateDataVersion$get(MemorySegment seg, long index) {
        return (int)_DEVICEDUMP_SECTION_HEADER.bRestrictedPrivateDataVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bRestrictedPrivateDataVersion$set(MemorySegment seg, long index, int x) {
        _DEVICEDUMP_SECTION_HEADER.bRestrictedPrivateDataVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwFirmwareIssueId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwFirmwareIssueId"));
    public static VarHandle dwFirmwareIssueId$VH() {
        return _DEVICEDUMP_SECTION_HEADER.dwFirmwareIssueId$VH;
    }
    public static int dwFirmwareIssueId$get(MemorySegment seg) {
        return (int)_DEVICEDUMP_SECTION_HEADER.dwFirmwareIssueId$VH.get(seg);
    }
    public static void dwFirmwareIssueId$set( MemorySegment seg, int x) {
        _DEVICEDUMP_SECTION_HEADER.dwFirmwareIssueId$VH.set(seg, x);
    }
    public static int dwFirmwareIssueId$get(MemorySegment seg, long index) {
        return (int)_DEVICEDUMP_SECTION_HEADER.dwFirmwareIssueId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFirmwareIssueId$set(MemorySegment seg, long index, int x) {
        _DEVICEDUMP_SECTION_HEADER.dwFirmwareIssueId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment szIssueDescriptionString$slice(MemorySegment seg) {
        return seg.asSlice(112, 132);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


