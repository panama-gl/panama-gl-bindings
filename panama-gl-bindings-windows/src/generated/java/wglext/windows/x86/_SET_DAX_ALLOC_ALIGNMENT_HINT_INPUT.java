// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_LONG$LAYOUT.withName("AlignmentShift"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("FileOffsetToAlign"),
        Constants$root.C_LONG$LAYOUT.withName("FallbackAlignmentShift"),
        MemoryLayout.paddingLayout(32)
    ).withName("_SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT");
    public static MemoryLayout $LAYOUT() {
        return _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.$struct$LAYOUT;
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)_SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AlignmentShift$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AlignmentShift"));
    public static VarHandle AlignmentShift$VH() {
        return _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.AlignmentShift$VH;
    }
    public static int AlignmentShift$get(MemorySegment seg) {
        return (int)_SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.AlignmentShift$VH.get(seg);
    }
    public static void AlignmentShift$set( MemorySegment seg, int x) {
        _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.AlignmentShift$VH.set(seg, x);
    }
    public static int AlignmentShift$get(MemorySegment seg, long index) {
        return (int)_SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.AlignmentShift$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AlignmentShift$set(MemorySegment seg, long index, int x) {
        _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.AlignmentShift$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FileOffsetToAlign$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FileOffsetToAlign"));
    public static VarHandle FileOffsetToAlign$VH() {
        return _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.FileOffsetToAlign$VH;
    }
    public static long FileOffsetToAlign$get(MemorySegment seg) {
        return (long)_SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.FileOffsetToAlign$VH.get(seg);
    }
    public static void FileOffsetToAlign$set( MemorySegment seg, long x) {
        _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.FileOffsetToAlign$VH.set(seg, x);
    }
    public static long FileOffsetToAlign$get(MemorySegment seg, long index) {
        return (long)_SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.FileOffsetToAlign$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FileOffsetToAlign$set(MemorySegment seg, long index, long x) {
        _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.FileOffsetToAlign$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FallbackAlignmentShift$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FallbackAlignmentShift"));
    public static VarHandle FallbackAlignmentShift$VH() {
        return _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.FallbackAlignmentShift$VH;
    }
    public static int FallbackAlignmentShift$get(MemorySegment seg) {
        return (int)_SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.FallbackAlignmentShift$VH.get(seg);
    }
    public static void FallbackAlignmentShift$set( MemorySegment seg, int x) {
        _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.FallbackAlignmentShift$VH.set(seg, x);
    }
    public static int FallbackAlignmentShift$get(MemorySegment seg, long index) {
        return (int)_SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.FallbackAlignmentShift$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FallbackAlignmentShift$set(MemorySegment seg, long index, int x) {
        _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT.FallbackAlignmentShift$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


