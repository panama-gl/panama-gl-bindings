// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IXTLRuntimeVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfoCount"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("GetIDsOfNames"),
        Constants$root.C_POINTER$LAYOUT.withName("Invoke"),
        Constants$root.C_POINTER$LAYOUT.withName("get_nodeName"),
        Constants$root.C_POINTER$LAYOUT.withName("get_nodeValue"),
        Constants$root.C_POINTER$LAYOUT.withName("put_nodeValue"),
        Constants$root.C_POINTER$LAYOUT.withName("get_nodeType"),
        Constants$root.C_POINTER$LAYOUT.withName("get_parentNode"),
        Constants$root.C_POINTER$LAYOUT.withName("get_childNodes"),
        Constants$root.C_POINTER$LAYOUT.withName("get_firstChild"),
        Constants$root.C_POINTER$LAYOUT.withName("get_lastChild"),
        Constants$root.C_POINTER$LAYOUT.withName("get_previousSibling"),
        Constants$root.C_POINTER$LAYOUT.withName("get_nextSibling"),
        Constants$root.C_POINTER$LAYOUT.withName("get_attributes"),
        Constants$root.C_POINTER$LAYOUT.withName("insertBefore"),
        Constants$root.C_POINTER$LAYOUT.withName("replaceChild"),
        Constants$root.C_POINTER$LAYOUT.withName("removeChild"),
        Constants$root.C_POINTER$LAYOUT.withName("appendChild"),
        Constants$root.C_POINTER$LAYOUT.withName("hasChildNodes"),
        Constants$root.C_POINTER$LAYOUT.withName("get_ownerDocument"),
        Constants$root.C_POINTER$LAYOUT.withName("cloneNode"),
        Constants$root.C_POINTER$LAYOUT.withName("get_nodeTypeString"),
        Constants$root.C_POINTER$LAYOUT.withName("get_text"),
        Constants$root.C_POINTER$LAYOUT.withName("put_text"),
        Constants$root.C_POINTER$LAYOUT.withName("get_specified"),
        Constants$root.C_POINTER$LAYOUT.withName("get_definition"),
        Constants$root.C_POINTER$LAYOUT.withName("get_nodeTypedValue"),
        Constants$root.C_POINTER$LAYOUT.withName("put_nodeTypedValue"),
        Constants$root.C_POINTER$LAYOUT.withName("get_dataType"),
        Constants$root.C_POINTER$LAYOUT.withName("put_dataType"),
        Constants$root.C_POINTER$LAYOUT.withName("get_xml"),
        Constants$root.C_POINTER$LAYOUT.withName("transformNode"),
        Constants$root.C_POINTER$LAYOUT.withName("selectNodes"),
        Constants$root.C_POINTER$LAYOUT.withName("selectSingleNode"),
        Constants$root.C_POINTER$LAYOUT.withName("get_parsed"),
        Constants$root.C_POINTER$LAYOUT.withName("get_namespaceURI"),
        Constants$root.C_POINTER$LAYOUT.withName("get_prefix"),
        Constants$root.C_POINTER$LAYOUT.withName("get_baseName"),
        Constants$root.C_POINTER$LAYOUT.withName("transformNodeToObject"),
        Constants$root.C_POINTER$LAYOUT.withName("uniqueID"),
        Constants$root.C_POINTER$LAYOUT.withName("depth"),
        Constants$root.C_POINTER$LAYOUT.withName("childNumber"),
        Constants$root.C_POINTER$LAYOUT.withName("ancestorChildNumber"),
        Constants$root.C_POINTER$LAYOUT.withName("absoluteChildNumber"),
        Constants$root.C_POINTER$LAYOUT.withName("formatIndex"),
        Constants$root.C_POINTER$LAYOUT.withName("formatNumber"),
        Constants$root.C_POINTER$LAYOUT.withName("formatDate"),
        Constants$root.C_POINTER$LAYOUT.withName("formatTime")
    ).withName("IXTLRuntimeVtbl");
    public static MemoryLayout $LAYOUT() {
        return IXTLRuntimeVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IXTLRuntimeVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IXTLRuntimeVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IXTLRuntimeVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IXTLRuntimeVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IXTLRuntimeVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IXTLRuntimeVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IXTLRuntimeVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IXTLRuntimeVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IXTLRuntimeVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor GetTypeInfoCount$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoCount$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.GetTypeInfoCount$FUNC
    );
    public interface GetTypeInfoCount {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetTypeInfoCount fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, IXTLRuntimeVtbl.GetTypeInfoCount$FUNC, session);
        }
        static GetTypeInfoCount ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.GetTypeInfoCount$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfoCount"));
    public static VarHandle GetTypeInfoCount$VH() {
        return IXTLRuntimeVtbl.GetTypeInfoCount$VH;
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.GetTypeInfoCount$VH.get(seg);
    }
    public static void GetTypeInfoCount$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.GetTypeInfoCount$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.GetTypeInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.GetTypeInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount (MemorySegment segment, MemorySession session) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment), session);
    }
    static final FunctionDescriptor GetTypeInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfo$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.GetTypeInfo$FUNC
    );
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(GetTypeInfo fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, IXTLRuntimeVtbl.GetTypeInfo$FUNC, session);
        }
        static GetTypeInfo ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IXTLRuntimeVtbl.GetTypeInfo$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfo"));
    public static VarHandle GetTypeInfo$VH() {
        return IXTLRuntimeVtbl.GetTypeInfo$VH;
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.GetTypeInfo$VH.get(seg);
    }
    public static void GetTypeInfo$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.GetTypeInfo$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.GetTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.GetTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo (MemorySegment segment, MemorySession session) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), session);
    }
    static final FunctionDescriptor GetIDsOfNames$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIDsOfNames$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.GetIDsOfNames$FUNC
    );
    public interface GetIDsOfNames {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, int _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(GetIDsOfNames fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, IXTLRuntimeVtbl.GetIDsOfNames$FUNC, session);
        }
        static GetIDsOfNames ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, int __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    return (int)IXTLRuntimeVtbl.GetIDsOfNames$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, __x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIDsOfNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetIDsOfNames"));
    public static VarHandle GetIDsOfNames$VH() {
        return IXTLRuntimeVtbl.GetIDsOfNames$VH;
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.GetIDsOfNames$VH.get(seg);
    }
    public static void GetIDsOfNames$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.GetIDsOfNames$VH.set(seg, x);
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.GetIDsOfNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.GetIDsOfNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames (MemorySegment segment, MemorySession session) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment), session);
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invoke$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.Invoke$FUNC
    );
    public interface Invoke {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, int _x3, short _x4, java.lang.foreign.MemoryAddress _x5, java.lang.foreign.MemoryAddress _x6, java.lang.foreign.MemoryAddress _x7, java.lang.foreign.MemoryAddress _x8);
        static MemorySegment allocate(Invoke fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IXTLRuntimeVtbl.Invoke$FUNC, session);
        }
        static Invoke ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, int __x3, short __x4, java.lang.foreign.MemoryAddress __x5, java.lang.foreign.MemoryAddress __x6, java.lang.foreign.MemoryAddress __x7, java.lang.foreign.MemoryAddress __x8) -> {
                try {
                    return (int)IXTLRuntimeVtbl.Invoke$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, __x3, __x4, (java.lang.foreign.Addressable)__x5, (java.lang.foreign.Addressable)__x6, (java.lang.foreign.Addressable)__x7, (java.lang.foreign.Addressable)__x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Invoke"));
    public static VarHandle Invoke$VH() {
        return IXTLRuntimeVtbl.Invoke$VH;
    }
    public static MemoryAddress Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.Invoke$VH.get(seg);
    }
    public static void Invoke$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.Invoke$VH.set(seg, x);
    }
    public static MemoryAddress Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke (MemorySegment segment, MemorySession session) {
        return Invoke.ofAddress(Invoke$get(segment), session);
    }
    static final FunctionDescriptor get_nodeName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_nodeName$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_nodeName$FUNC
    );
    public interface get_nodeName {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_nodeName fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_nodeName.class, fi, IXTLRuntimeVtbl.get_nodeName$FUNC, session);
        }
        static get_nodeName ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_nodeName$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_nodeName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_nodeName"));
    public static VarHandle get_nodeName$VH() {
        return IXTLRuntimeVtbl.get_nodeName$VH;
    }
    public static MemoryAddress get_nodeName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_nodeName$VH.get(seg);
    }
    public static void get_nodeName$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_nodeName$VH.set(seg, x);
    }
    public static MemoryAddress get_nodeName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_nodeName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeName$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_nodeName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeName get_nodeName (MemorySegment segment, MemorySession session) {
        return get_nodeName.ofAddress(get_nodeName$get(segment), session);
    }
    static final FunctionDescriptor get_nodeValue$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_nodeValue$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_nodeValue$FUNC
    );
    public interface get_nodeValue {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_nodeValue fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_nodeValue.class, fi, IXTLRuntimeVtbl.get_nodeValue$FUNC, session);
        }
        static get_nodeValue ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_nodeValue$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_nodeValue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_nodeValue"));
    public static VarHandle get_nodeValue$VH() {
        return IXTLRuntimeVtbl.get_nodeValue$VH;
    }
    public static MemoryAddress get_nodeValue$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_nodeValue$VH.get(seg);
    }
    public static void get_nodeValue$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_nodeValue$VH.set(seg, x);
    }
    public static MemoryAddress get_nodeValue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_nodeValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeValue$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_nodeValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeValue get_nodeValue (MemorySegment segment, MemorySession session) {
        return get_nodeValue.ofAddress(get_nodeValue$get(segment), session);
    }
    static final FunctionDescriptor put_nodeValue$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final MethodHandle put_nodeValue$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.put_nodeValue$FUNC
    );
    public interface put_nodeValue {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_nodeValue fi, MemorySession session) {
            return RuntimeHelper.upcallStub(put_nodeValue.class, fi, IXTLRuntimeVtbl.put_nodeValue$FUNC, session);
        }
        static put_nodeValue ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.put_nodeValue$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_nodeValue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("put_nodeValue"));
    public static VarHandle put_nodeValue$VH() {
        return IXTLRuntimeVtbl.put_nodeValue$VH;
    }
    public static MemoryAddress put_nodeValue$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.put_nodeValue$VH.get(seg);
    }
    public static void put_nodeValue$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.put_nodeValue$VH.set(seg, x);
    }
    public static MemoryAddress put_nodeValue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.put_nodeValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_nodeValue$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.put_nodeValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_nodeValue put_nodeValue (MemorySegment segment, MemorySession session) {
        return put_nodeValue.ofAddress(put_nodeValue$get(segment), session);
    }
    static final FunctionDescriptor get_nodeType$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_nodeType$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_nodeType$FUNC
    );
    public interface get_nodeType {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_nodeType fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_nodeType.class, fi, IXTLRuntimeVtbl.get_nodeType$FUNC, session);
        }
        static get_nodeType ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_nodeType$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_nodeType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_nodeType"));
    public static VarHandle get_nodeType$VH() {
        return IXTLRuntimeVtbl.get_nodeType$VH;
    }
    public static MemoryAddress get_nodeType$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_nodeType$VH.get(seg);
    }
    public static void get_nodeType$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_nodeType$VH.set(seg, x);
    }
    public static MemoryAddress get_nodeType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_nodeType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeType$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_nodeType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeType get_nodeType (MemorySegment segment, MemorySession session) {
        return get_nodeType.ofAddress(get_nodeType$get(segment), session);
    }
    static final FunctionDescriptor get_parentNode$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_parentNode$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_parentNode$FUNC
    );
    public interface get_parentNode {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_parentNode fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_parentNode.class, fi, IXTLRuntimeVtbl.get_parentNode$FUNC, session);
        }
        static get_parentNode ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_parentNode$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_parentNode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_parentNode"));
    public static VarHandle get_parentNode$VH() {
        return IXTLRuntimeVtbl.get_parentNode$VH;
    }
    public static MemoryAddress get_parentNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_parentNode$VH.get(seg);
    }
    public static void get_parentNode$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_parentNode$VH.set(seg, x);
    }
    public static MemoryAddress get_parentNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_parentNode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parentNode$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_parentNode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parentNode get_parentNode (MemorySegment segment, MemorySession session) {
        return get_parentNode.ofAddress(get_parentNode$get(segment), session);
    }
    static final FunctionDescriptor get_childNodes$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_childNodes$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_childNodes$FUNC
    );
    public interface get_childNodes {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_childNodes fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_childNodes.class, fi, IXTLRuntimeVtbl.get_childNodes$FUNC, session);
        }
        static get_childNodes ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_childNodes$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_childNodes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_childNodes"));
    public static VarHandle get_childNodes$VH() {
        return IXTLRuntimeVtbl.get_childNodes$VH;
    }
    public static MemoryAddress get_childNodes$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_childNodes$VH.get(seg);
    }
    public static void get_childNodes$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_childNodes$VH.set(seg, x);
    }
    public static MemoryAddress get_childNodes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_childNodes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_childNodes$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_childNodes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_childNodes get_childNodes (MemorySegment segment, MemorySession session) {
        return get_childNodes.ofAddress(get_childNodes$get(segment), session);
    }
    static final FunctionDescriptor get_firstChild$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_firstChild$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_firstChild$FUNC
    );
    public interface get_firstChild {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_firstChild fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_firstChild.class, fi, IXTLRuntimeVtbl.get_firstChild$FUNC, session);
        }
        static get_firstChild ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_firstChild$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_firstChild$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_firstChild"));
    public static VarHandle get_firstChild$VH() {
        return IXTLRuntimeVtbl.get_firstChild$VH;
    }
    public static MemoryAddress get_firstChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_firstChild$VH.get(seg);
    }
    public static void get_firstChild$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_firstChild$VH.set(seg, x);
    }
    public static MemoryAddress get_firstChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_firstChild$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_firstChild$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_firstChild$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_firstChild get_firstChild (MemorySegment segment, MemorySession session) {
        return get_firstChild.ofAddress(get_firstChild$get(segment), session);
    }
    static final FunctionDescriptor get_lastChild$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_lastChild$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_lastChild$FUNC
    );
    public interface get_lastChild {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_lastChild fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_lastChild.class, fi, IXTLRuntimeVtbl.get_lastChild$FUNC, session);
        }
        static get_lastChild ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_lastChild$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_lastChild$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_lastChild"));
    public static VarHandle get_lastChild$VH() {
        return IXTLRuntimeVtbl.get_lastChild$VH;
    }
    public static MemoryAddress get_lastChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_lastChild$VH.get(seg);
    }
    public static void get_lastChild$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_lastChild$VH.set(seg, x);
    }
    public static MemoryAddress get_lastChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_lastChild$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_lastChild$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_lastChild$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_lastChild get_lastChild (MemorySegment segment, MemorySession session) {
        return get_lastChild.ofAddress(get_lastChild$get(segment), session);
    }
    static final FunctionDescriptor get_previousSibling$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_previousSibling$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_previousSibling$FUNC
    );
    public interface get_previousSibling {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_previousSibling fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_previousSibling.class, fi, IXTLRuntimeVtbl.get_previousSibling$FUNC, session);
        }
        static get_previousSibling ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_previousSibling$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_previousSibling$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_previousSibling"));
    public static VarHandle get_previousSibling$VH() {
        return IXTLRuntimeVtbl.get_previousSibling$VH;
    }
    public static MemoryAddress get_previousSibling$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_previousSibling$VH.get(seg);
    }
    public static void get_previousSibling$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_previousSibling$VH.set(seg, x);
    }
    public static MemoryAddress get_previousSibling$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_previousSibling$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_previousSibling$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_previousSibling$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_previousSibling get_previousSibling (MemorySegment segment, MemorySession session) {
        return get_previousSibling.ofAddress(get_previousSibling$get(segment), session);
    }
    static final FunctionDescriptor get_nextSibling$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_nextSibling$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_nextSibling$FUNC
    );
    public interface get_nextSibling {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_nextSibling fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_nextSibling.class, fi, IXTLRuntimeVtbl.get_nextSibling$FUNC, session);
        }
        static get_nextSibling ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_nextSibling$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_nextSibling$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_nextSibling"));
    public static VarHandle get_nextSibling$VH() {
        return IXTLRuntimeVtbl.get_nextSibling$VH;
    }
    public static MemoryAddress get_nextSibling$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_nextSibling$VH.get(seg);
    }
    public static void get_nextSibling$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_nextSibling$VH.set(seg, x);
    }
    public static MemoryAddress get_nextSibling$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_nextSibling$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nextSibling$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_nextSibling$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nextSibling get_nextSibling (MemorySegment segment, MemorySession session) {
        return get_nextSibling.ofAddress(get_nextSibling$get(segment), session);
    }
    static final FunctionDescriptor get_attributes$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_attributes$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_attributes$FUNC
    );
    public interface get_attributes {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_attributes fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_attributes.class, fi, IXTLRuntimeVtbl.get_attributes$FUNC, session);
        }
        static get_attributes ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_attributes$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_attributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_attributes"));
    public static VarHandle get_attributes$VH() {
        return IXTLRuntimeVtbl.get_attributes$VH;
    }
    public static MemoryAddress get_attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_attributes$VH.get(seg);
    }
    public static void get_attributes$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_attributes$VH.set(seg, x);
    }
    public static MemoryAddress get_attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_attributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_attributes$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_attributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_attributes get_attributes (MemorySegment segment, MemorySession session) {
        return get_attributes.ofAddress(get_attributes$get(segment), session);
    }
    static final FunctionDescriptor insertBefore$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle insertBefore$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.insertBefore$FUNC
    );
    public interface insertBefore {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(insertBefore fi, MemorySession session) {
            return RuntimeHelper.upcallStub(insertBefore.class, fi, IXTLRuntimeVtbl.insertBefore$FUNC, session);
        }
        static insertBefore ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IXTLRuntimeVtbl.insertBefore$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle insertBefore$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("insertBefore"));
    public static VarHandle insertBefore$VH() {
        return IXTLRuntimeVtbl.insertBefore$VH;
    }
    public static MemoryAddress insertBefore$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.insertBefore$VH.get(seg);
    }
    public static void insertBefore$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.insertBefore$VH.set(seg, x);
    }
    public static MemoryAddress insertBefore$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.insertBefore$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void insertBefore$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.insertBefore$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static insertBefore insertBefore (MemorySegment segment, MemorySession session) {
        return insertBefore.ofAddress(insertBefore$get(segment), session);
    }
    static final FunctionDescriptor replaceChild$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle replaceChild$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.replaceChild$FUNC
    );
    public interface replaceChild {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(replaceChild fi, MemorySession session) {
            return RuntimeHelper.upcallStub(replaceChild.class, fi, IXTLRuntimeVtbl.replaceChild$FUNC, session);
        }
        static replaceChild ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IXTLRuntimeVtbl.replaceChild$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle replaceChild$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("replaceChild"));
    public static VarHandle replaceChild$VH() {
        return IXTLRuntimeVtbl.replaceChild$VH;
    }
    public static MemoryAddress replaceChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.replaceChild$VH.get(seg);
    }
    public static void replaceChild$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.replaceChild$VH.set(seg, x);
    }
    public static MemoryAddress replaceChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.replaceChild$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void replaceChild$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.replaceChild$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static replaceChild replaceChild (MemorySegment segment, MemorySession session) {
        return replaceChild.ofAddress(replaceChild$get(segment), session);
    }
    static final FunctionDescriptor removeChild$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle removeChild$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.removeChild$FUNC
    );
    public interface removeChild {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(removeChild fi, MemorySession session) {
            return RuntimeHelper.upcallStub(removeChild.class, fi, IXTLRuntimeVtbl.removeChild$FUNC, session);
        }
        static removeChild ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IXTLRuntimeVtbl.removeChild$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle removeChild$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("removeChild"));
    public static VarHandle removeChild$VH() {
        return IXTLRuntimeVtbl.removeChild$VH;
    }
    public static MemoryAddress removeChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.removeChild$VH.get(seg);
    }
    public static void removeChild$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.removeChild$VH.set(seg, x);
    }
    public static MemoryAddress removeChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.removeChild$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void removeChild$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.removeChild$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeChild removeChild (MemorySegment segment, MemorySession session) {
        return removeChild.ofAddress(removeChild$get(segment), session);
    }
    static final FunctionDescriptor appendChild$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle appendChild$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.appendChild$FUNC
    );
    public interface appendChild {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(appendChild fi, MemorySession session) {
            return RuntimeHelper.upcallStub(appendChild.class, fi, IXTLRuntimeVtbl.appendChild$FUNC, session);
        }
        static appendChild ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IXTLRuntimeVtbl.appendChild$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle appendChild$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("appendChild"));
    public static VarHandle appendChild$VH() {
        return IXTLRuntimeVtbl.appendChild$VH;
    }
    public static MemoryAddress appendChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.appendChild$VH.get(seg);
    }
    public static void appendChild$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.appendChild$VH.set(seg, x);
    }
    public static MemoryAddress appendChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.appendChild$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void appendChild$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.appendChild$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static appendChild appendChild (MemorySegment segment, MemorySession session) {
        return appendChild.ofAddress(appendChild$get(segment), session);
    }
    static final FunctionDescriptor hasChildNodes$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle hasChildNodes$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.hasChildNodes$FUNC
    );
    public interface hasChildNodes {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(hasChildNodes fi, MemorySession session) {
            return RuntimeHelper.upcallStub(hasChildNodes.class, fi, IXTLRuntimeVtbl.hasChildNodes$FUNC, session);
        }
        static hasChildNodes ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.hasChildNodes$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle hasChildNodes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hasChildNodes"));
    public static VarHandle hasChildNodes$VH() {
        return IXTLRuntimeVtbl.hasChildNodes$VH;
    }
    public static MemoryAddress hasChildNodes$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.hasChildNodes$VH.get(seg);
    }
    public static void hasChildNodes$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.hasChildNodes$VH.set(seg, x);
    }
    public static MemoryAddress hasChildNodes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.hasChildNodes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hasChildNodes$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.hasChildNodes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static hasChildNodes hasChildNodes (MemorySegment segment, MemorySession session) {
        return hasChildNodes.ofAddress(hasChildNodes$get(segment), session);
    }
    static final FunctionDescriptor get_ownerDocument$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_ownerDocument$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_ownerDocument$FUNC
    );
    public interface get_ownerDocument {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_ownerDocument fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_ownerDocument.class, fi, IXTLRuntimeVtbl.get_ownerDocument$FUNC, session);
        }
        static get_ownerDocument ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_ownerDocument$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_ownerDocument$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_ownerDocument"));
    public static VarHandle get_ownerDocument$VH() {
        return IXTLRuntimeVtbl.get_ownerDocument$VH;
    }
    public static MemoryAddress get_ownerDocument$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_ownerDocument$VH.get(seg);
    }
    public static void get_ownerDocument$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_ownerDocument$VH.set(seg, x);
    }
    public static MemoryAddress get_ownerDocument$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_ownerDocument$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_ownerDocument$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_ownerDocument$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_ownerDocument get_ownerDocument (MemorySegment segment, MemorySession session) {
        return get_ownerDocument.ofAddress(get_ownerDocument$get(segment), session);
    }
    static final FunctionDescriptor cloneNode$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle cloneNode$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.cloneNode$FUNC
    );
    public interface cloneNode {

        int apply(java.lang.foreign.MemoryAddress _x0, short _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(cloneNode fi, MemorySession session) {
            return RuntimeHelper.upcallStub(cloneNode.class, fi, IXTLRuntimeVtbl.cloneNode$FUNC, session);
        }
        static cloneNode ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, short __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IXTLRuntimeVtbl.cloneNode$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle cloneNode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cloneNode"));
    public static VarHandle cloneNode$VH() {
        return IXTLRuntimeVtbl.cloneNode$VH;
    }
    public static MemoryAddress cloneNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.cloneNode$VH.get(seg);
    }
    public static void cloneNode$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.cloneNode$VH.set(seg, x);
    }
    public static MemoryAddress cloneNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.cloneNode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cloneNode$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.cloneNode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static cloneNode cloneNode (MemorySegment segment, MemorySession session) {
        return cloneNode.ofAddress(cloneNode$get(segment), session);
    }
    static final FunctionDescriptor get_nodeTypeString$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_nodeTypeString$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_nodeTypeString$FUNC
    );
    public interface get_nodeTypeString {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_nodeTypeString fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_nodeTypeString.class, fi, IXTLRuntimeVtbl.get_nodeTypeString$FUNC, session);
        }
        static get_nodeTypeString ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_nodeTypeString$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_nodeTypeString$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_nodeTypeString"));
    public static VarHandle get_nodeTypeString$VH() {
        return IXTLRuntimeVtbl.get_nodeTypeString$VH;
    }
    public static MemoryAddress get_nodeTypeString$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_nodeTypeString$VH.get(seg);
    }
    public static void get_nodeTypeString$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_nodeTypeString$VH.set(seg, x);
    }
    public static MemoryAddress get_nodeTypeString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_nodeTypeString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeTypeString$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_nodeTypeString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeTypeString get_nodeTypeString (MemorySegment segment, MemorySession session) {
        return get_nodeTypeString.ofAddress(get_nodeTypeString$get(segment), session);
    }
    static final FunctionDescriptor get_text$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_text$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_text$FUNC
    );
    public interface get_text {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_text fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_text.class, fi, IXTLRuntimeVtbl.get_text$FUNC, session);
        }
        static get_text ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_text$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_text"));
    public static VarHandle get_text$VH() {
        return IXTLRuntimeVtbl.get_text$VH;
    }
    public static MemoryAddress get_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_text$VH.get(seg);
    }
    public static void get_text$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_text$VH.set(seg, x);
    }
    public static MemoryAddress get_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_text$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_text get_text (MemorySegment segment, MemorySession session) {
        return get_text.ofAddress(get_text$get(segment), session);
    }
    static final FunctionDescriptor put_text$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle put_text$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.put_text$FUNC
    );
    public interface put_text {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(put_text fi, MemorySession session) {
            return RuntimeHelper.upcallStub(put_text.class, fi, IXTLRuntimeVtbl.put_text$FUNC, session);
        }
        static put_text ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.put_text$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("put_text"));
    public static VarHandle put_text$VH() {
        return IXTLRuntimeVtbl.put_text$VH;
    }
    public static MemoryAddress put_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.put_text$VH.get(seg);
    }
    public static void put_text$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.put_text$VH.set(seg, x);
    }
    public static MemoryAddress put_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.put_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_text$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.put_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_text put_text (MemorySegment segment, MemorySession session) {
        return put_text.ofAddress(put_text$get(segment), session);
    }
    static final FunctionDescriptor get_specified$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_specified$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_specified$FUNC
    );
    public interface get_specified {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_specified fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_specified.class, fi, IXTLRuntimeVtbl.get_specified$FUNC, session);
        }
        static get_specified ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_specified$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_specified$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_specified"));
    public static VarHandle get_specified$VH() {
        return IXTLRuntimeVtbl.get_specified$VH;
    }
    public static MemoryAddress get_specified$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_specified$VH.get(seg);
    }
    public static void get_specified$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_specified$VH.set(seg, x);
    }
    public static MemoryAddress get_specified$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_specified$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_specified$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_specified$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_specified get_specified (MemorySegment segment, MemorySession session) {
        return get_specified.ofAddress(get_specified$get(segment), session);
    }
    static final FunctionDescriptor get_definition$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_definition$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_definition$FUNC
    );
    public interface get_definition {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_definition fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_definition.class, fi, IXTLRuntimeVtbl.get_definition$FUNC, session);
        }
        static get_definition ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_definition$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_definition$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_definition"));
    public static VarHandle get_definition$VH() {
        return IXTLRuntimeVtbl.get_definition$VH;
    }
    public static MemoryAddress get_definition$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_definition$VH.get(seg);
    }
    public static void get_definition$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_definition$VH.set(seg, x);
    }
    public static MemoryAddress get_definition$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_definition$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_definition$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_definition$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_definition get_definition (MemorySegment segment, MemorySession session) {
        return get_definition.ofAddress(get_definition$get(segment), session);
    }
    static final FunctionDescriptor get_nodeTypedValue$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_nodeTypedValue$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_nodeTypedValue$FUNC
    );
    public interface get_nodeTypedValue {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_nodeTypedValue fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_nodeTypedValue.class, fi, IXTLRuntimeVtbl.get_nodeTypedValue$FUNC, session);
        }
        static get_nodeTypedValue ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_nodeTypedValue$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_nodeTypedValue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_nodeTypedValue"));
    public static VarHandle get_nodeTypedValue$VH() {
        return IXTLRuntimeVtbl.get_nodeTypedValue$VH;
    }
    public static MemoryAddress get_nodeTypedValue$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_nodeTypedValue$VH.get(seg);
    }
    public static void get_nodeTypedValue$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_nodeTypedValue$VH.set(seg, x);
    }
    public static MemoryAddress get_nodeTypedValue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_nodeTypedValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeTypedValue$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_nodeTypedValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeTypedValue get_nodeTypedValue (MemorySegment segment, MemorySession session) {
        return get_nodeTypedValue.ofAddress(get_nodeTypedValue$get(segment), session);
    }
    static final FunctionDescriptor put_nodeTypedValue$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final MethodHandle put_nodeTypedValue$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.put_nodeTypedValue$FUNC
    );
    public interface put_nodeTypedValue {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_nodeTypedValue fi, MemorySession session) {
            return RuntimeHelper.upcallStub(put_nodeTypedValue.class, fi, IXTLRuntimeVtbl.put_nodeTypedValue$FUNC, session);
        }
        static put_nodeTypedValue ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.put_nodeTypedValue$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_nodeTypedValue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("put_nodeTypedValue"));
    public static VarHandle put_nodeTypedValue$VH() {
        return IXTLRuntimeVtbl.put_nodeTypedValue$VH;
    }
    public static MemoryAddress put_nodeTypedValue$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.put_nodeTypedValue$VH.get(seg);
    }
    public static void put_nodeTypedValue$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.put_nodeTypedValue$VH.set(seg, x);
    }
    public static MemoryAddress put_nodeTypedValue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.put_nodeTypedValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_nodeTypedValue$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.put_nodeTypedValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_nodeTypedValue put_nodeTypedValue (MemorySegment segment, MemorySession session) {
        return put_nodeTypedValue.ofAddress(put_nodeTypedValue$get(segment), session);
    }
    static final FunctionDescriptor get_dataType$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_dataType$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_dataType$FUNC
    );
    public interface get_dataType {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_dataType fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_dataType.class, fi, IXTLRuntimeVtbl.get_dataType$FUNC, session);
        }
        static get_dataType ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_dataType$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_dataType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_dataType"));
    public static VarHandle get_dataType$VH() {
        return IXTLRuntimeVtbl.get_dataType$VH;
    }
    public static MemoryAddress get_dataType$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_dataType$VH.get(seg);
    }
    public static void get_dataType$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_dataType$VH.set(seg, x);
    }
    public static MemoryAddress get_dataType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_dataType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_dataType$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_dataType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_dataType get_dataType (MemorySegment segment, MemorySession session) {
        return get_dataType.ofAddress(get_dataType$get(segment), session);
    }
    static final FunctionDescriptor put_dataType$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle put_dataType$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.put_dataType$FUNC
    );
    public interface put_dataType {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(put_dataType fi, MemorySession session) {
            return RuntimeHelper.upcallStub(put_dataType.class, fi, IXTLRuntimeVtbl.put_dataType$FUNC, session);
        }
        static put_dataType ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.put_dataType$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_dataType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("put_dataType"));
    public static VarHandle put_dataType$VH() {
        return IXTLRuntimeVtbl.put_dataType$VH;
    }
    public static MemoryAddress put_dataType$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.put_dataType$VH.get(seg);
    }
    public static void put_dataType$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.put_dataType$VH.set(seg, x);
    }
    public static MemoryAddress put_dataType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.put_dataType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_dataType$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.put_dataType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_dataType put_dataType (MemorySegment segment, MemorySession session) {
        return put_dataType.ofAddress(put_dataType$get(segment), session);
    }
    static final FunctionDescriptor get_xml$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_xml$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_xml$FUNC
    );
    public interface get_xml {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_xml fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_xml.class, fi, IXTLRuntimeVtbl.get_xml$FUNC, session);
        }
        static get_xml ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_xml$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_xml$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_xml"));
    public static VarHandle get_xml$VH() {
        return IXTLRuntimeVtbl.get_xml$VH;
    }
    public static MemoryAddress get_xml$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_xml$VH.get(seg);
    }
    public static void get_xml$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_xml$VH.set(seg, x);
    }
    public static MemoryAddress get_xml$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_xml$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_xml$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_xml$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_xml get_xml (MemorySegment segment, MemorySession session) {
        return get_xml.ofAddress(get_xml$get(segment), session);
    }
    static final FunctionDescriptor transformNode$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle transformNode$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.transformNode$FUNC
    );
    public interface transformNode {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(transformNode fi, MemorySession session) {
            return RuntimeHelper.upcallStub(transformNode.class, fi, IXTLRuntimeVtbl.transformNode$FUNC, session);
        }
        static transformNode ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IXTLRuntimeVtbl.transformNode$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle transformNode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("transformNode"));
    public static VarHandle transformNode$VH() {
        return IXTLRuntimeVtbl.transformNode$VH;
    }
    public static MemoryAddress transformNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.transformNode$VH.get(seg);
    }
    public static void transformNode$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.transformNode$VH.set(seg, x);
    }
    public static MemoryAddress transformNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.transformNode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void transformNode$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.transformNode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static transformNode transformNode (MemorySegment segment, MemorySession session) {
        return transformNode.ofAddress(transformNode$get(segment), session);
    }
    static final FunctionDescriptor selectNodes$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle selectNodes$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.selectNodes$FUNC
    );
    public interface selectNodes {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(selectNodes fi, MemorySession session) {
            return RuntimeHelper.upcallStub(selectNodes.class, fi, IXTLRuntimeVtbl.selectNodes$FUNC, session);
        }
        static selectNodes ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IXTLRuntimeVtbl.selectNodes$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle selectNodes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("selectNodes"));
    public static VarHandle selectNodes$VH() {
        return IXTLRuntimeVtbl.selectNodes$VH;
    }
    public static MemoryAddress selectNodes$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.selectNodes$VH.get(seg);
    }
    public static void selectNodes$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.selectNodes$VH.set(seg, x);
    }
    public static MemoryAddress selectNodes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.selectNodes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void selectNodes$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.selectNodes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static selectNodes selectNodes (MemorySegment segment, MemorySession session) {
        return selectNodes.ofAddress(selectNodes$get(segment), session);
    }
    static final FunctionDescriptor selectSingleNode$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle selectSingleNode$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.selectSingleNode$FUNC
    );
    public interface selectSingleNode {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(selectSingleNode fi, MemorySession session) {
            return RuntimeHelper.upcallStub(selectSingleNode.class, fi, IXTLRuntimeVtbl.selectSingleNode$FUNC, session);
        }
        static selectSingleNode ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IXTLRuntimeVtbl.selectSingleNode$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle selectSingleNode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("selectSingleNode"));
    public static VarHandle selectSingleNode$VH() {
        return IXTLRuntimeVtbl.selectSingleNode$VH;
    }
    public static MemoryAddress selectSingleNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.selectSingleNode$VH.get(seg);
    }
    public static void selectSingleNode$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.selectSingleNode$VH.set(seg, x);
    }
    public static MemoryAddress selectSingleNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.selectSingleNode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void selectSingleNode$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.selectSingleNode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static selectSingleNode selectSingleNode (MemorySegment segment, MemorySession session) {
        return selectSingleNode.ofAddress(selectSingleNode$get(segment), session);
    }
    static final FunctionDescriptor get_parsed$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_parsed$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_parsed$FUNC
    );
    public interface get_parsed {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_parsed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_parsed.class, fi, IXTLRuntimeVtbl.get_parsed$FUNC, session);
        }
        static get_parsed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_parsed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_parsed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_parsed"));
    public static VarHandle get_parsed$VH() {
        return IXTLRuntimeVtbl.get_parsed$VH;
    }
    public static MemoryAddress get_parsed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_parsed$VH.get(seg);
    }
    public static void get_parsed$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_parsed$VH.set(seg, x);
    }
    public static MemoryAddress get_parsed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_parsed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parsed$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_parsed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parsed get_parsed (MemorySegment segment, MemorySession session) {
        return get_parsed.ofAddress(get_parsed$get(segment), session);
    }
    static final FunctionDescriptor get_namespaceURI$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_namespaceURI$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_namespaceURI$FUNC
    );
    public interface get_namespaceURI {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_namespaceURI fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_namespaceURI.class, fi, IXTLRuntimeVtbl.get_namespaceURI$FUNC, session);
        }
        static get_namespaceURI ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_namespaceURI$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_namespaceURI$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_namespaceURI"));
    public static VarHandle get_namespaceURI$VH() {
        return IXTLRuntimeVtbl.get_namespaceURI$VH;
    }
    public static MemoryAddress get_namespaceURI$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_namespaceURI$VH.get(seg);
    }
    public static void get_namespaceURI$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_namespaceURI$VH.set(seg, x);
    }
    public static MemoryAddress get_namespaceURI$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_namespaceURI$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_namespaceURI$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_namespaceURI$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_namespaceURI get_namespaceURI (MemorySegment segment, MemorySession session) {
        return get_namespaceURI.ofAddress(get_namespaceURI$get(segment), session);
    }
    static final FunctionDescriptor get_prefix$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_prefix$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_prefix$FUNC
    );
    public interface get_prefix {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_prefix fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_prefix.class, fi, IXTLRuntimeVtbl.get_prefix$FUNC, session);
        }
        static get_prefix ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_prefix$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_prefix$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_prefix"));
    public static VarHandle get_prefix$VH() {
        return IXTLRuntimeVtbl.get_prefix$VH;
    }
    public static MemoryAddress get_prefix$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_prefix$VH.get(seg);
    }
    public static void get_prefix$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_prefix$VH.set(seg, x);
    }
    public static MemoryAddress get_prefix$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_prefix$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_prefix$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_prefix$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_prefix get_prefix (MemorySegment segment, MemorySession session) {
        return get_prefix.ofAddress(get_prefix$get(segment), session);
    }
    static final FunctionDescriptor get_baseName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_baseName$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.get_baseName$FUNC
    );
    public interface get_baseName {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_baseName fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_baseName.class, fi, IXTLRuntimeVtbl.get_baseName$FUNC, session);
        }
        static get_baseName ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXTLRuntimeVtbl.get_baseName$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_baseName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_baseName"));
    public static VarHandle get_baseName$VH() {
        return IXTLRuntimeVtbl.get_baseName$VH;
    }
    public static MemoryAddress get_baseName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_baseName$VH.get(seg);
    }
    public static void get_baseName$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.get_baseName$VH.set(seg, x);
    }
    public static MemoryAddress get_baseName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.get_baseName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_baseName$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.get_baseName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_baseName get_baseName (MemorySegment segment, MemorySession session) {
        return get_baseName.ofAddress(get_baseName$get(segment), session);
    }
    static final FunctionDescriptor transformNodeToObject$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final MethodHandle transformNodeToObject$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.transformNodeToObject$FUNC
    );
    public interface transformNodeToObject {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(transformNodeToObject fi, MemorySession session) {
            return RuntimeHelper.upcallStub(transformNodeToObject.class, fi, IXTLRuntimeVtbl.transformNodeToObject$FUNC, session);
        }
        static transformNodeToObject ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXTLRuntimeVtbl.transformNodeToObject$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle transformNodeToObject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("transformNodeToObject"));
    public static VarHandle transformNodeToObject$VH() {
        return IXTLRuntimeVtbl.transformNodeToObject$VH;
    }
    public static MemoryAddress transformNodeToObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.transformNodeToObject$VH.get(seg);
    }
    public static void transformNodeToObject$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.transformNodeToObject$VH.set(seg, x);
    }
    public static MemoryAddress transformNodeToObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.transformNodeToObject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void transformNodeToObject$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.transformNodeToObject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static transformNodeToObject transformNodeToObject (MemorySegment segment, MemorySession session) {
        return transformNodeToObject.ofAddress(transformNodeToObject$get(segment), session);
    }
    static final FunctionDescriptor uniqueID$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle uniqueID$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.uniqueID$FUNC
    );
    public interface uniqueID {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(uniqueID fi, MemorySession session) {
            return RuntimeHelper.upcallStub(uniqueID.class, fi, IXTLRuntimeVtbl.uniqueID$FUNC, session);
        }
        static uniqueID ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IXTLRuntimeVtbl.uniqueID$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle uniqueID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("uniqueID"));
    public static VarHandle uniqueID$VH() {
        return IXTLRuntimeVtbl.uniqueID$VH;
    }
    public static MemoryAddress uniqueID$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.uniqueID$VH.get(seg);
    }
    public static void uniqueID$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.uniqueID$VH.set(seg, x);
    }
    public static MemoryAddress uniqueID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.uniqueID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void uniqueID$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.uniqueID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static uniqueID uniqueID (MemorySegment segment, MemorySession session) {
        return uniqueID.ofAddress(uniqueID$get(segment), session);
    }
    static final FunctionDescriptor depth$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle depth$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.depth$FUNC
    );
    public interface depth {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(depth fi, MemorySession session) {
            return RuntimeHelper.upcallStub(depth.class, fi, IXTLRuntimeVtbl.depth$FUNC, session);
        }
        static depth ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IXTLRuntimeVtbl.depth$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle depth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("depth"));
    public static VarHandle depth$VH() {
        return IXTLRuntimeVtbl.depth$VH;
    }
    public static MemoryAddress depth$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.depth$VH.get(seg);
    }
    public static void depth$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.depth$VH.set(seg, x);
    }
    public static MemoryAddress depth$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.depth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void depth$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.depth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static depth depth (MemorySegment segment, MemorySession session) {
        return depth.ofAddress(depth$get(segment), session);
    }
    static final FunctionDescriptor childNumber$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle childNumber$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.childNumber$FUNC
    );
    public interface childNumber {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(childNumber fi, MemorySession session) {
            return RuntimeHelper.upcallStub(childNumber.class, fi, IXTLRuntimeVtbl.childNumber$FUNC, session);
        }
        static childNumber ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IXTLRuntimeVtbl.childNumber$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle childNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("childNumber"));
    public static VarHandle childNumber$VH() {
        return IXTLRuntimeVtbl.childNumber$VH;
    }
    public static MemoryAddress childNumber$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.childNumber$VH.get(seg);
    }
    public static void childNumber$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.childNumber$VH.set(seg, x);
    }
    public static MemoryAddress childNumber$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.childNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void childNumber$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.childNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static childNumber childNumber (MemorySegment segment, MemorySession session) {
        return childNumber.ofAddress(childNumber$get(segment), session);
    }
    static final FunctionDescriptor ancestorChildNumber$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ancestorChildNumber$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.ancestorChildNumber$FUNC
    );
    public interface ancestorChildNumber {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(ancestorChildNumber fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ancestorChildNumber.class, fi, IXTLRuntimeVtbl.ancestorChildNumber$FUNC, session);
        }
        static ancestorChildNumber ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IXTLRuntimeVtbl.ancestorChildNumber$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ancestorChildNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ancestorChildNumber"));
    public static VarHandle ancestorChildNumber$VH() {
        return IXTLRuntimeVtbl.ancestorChildNumber$VH;
    }
    public static MemoryAddress ancestorChildNumber$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.ancestorChildNumber$VH.get(seg);
    }
    public static void ancestorChildNumber$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.ancestorChildNumber$VH.set(seg, x);
    }
    public static MemoryAddress ancestorChildNumber$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.ancestorChildNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ancestorChildNumber$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.ancestorChildNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ancestorChildNumber ancestorChildNumber (MemorySegment segment, MemorySession session) {
        return ancestorChildNumber.ofAddress(ancestorChildNumber$get(segment), session);
    }
    static final FunctionDescriptor absoluteChildNumber$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle absoluteChildNumber$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.absoluteChildNumber$FUNC
    );
    public interface absoluteChildNumber {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(absoluteChildNumber fi, MemorySession session) {
            return RuntimeHelper.upcallStub(absoluteChildNumber.class, fi, IXTLRuntimeVtbl.absoluteChildNumber$FUNC, session);
        }
        static absoluteChildNumber ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IXTLRuntimeVtbl.absoluteChildNumber$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle absoluteChildNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("absoluteChildNumber"));
    public static VarHandle absoluteChildNumber$VH() {
        return IXTLRuntimeVtbl.absoluteChildNumber$VH;
    }
    public static MemoryAddress absoluteChildNumber$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.absoluteChildNumber$VH.get(seg);
    }
    public static void absoluteChildNumber$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.absoluteChildNumber$VH.set(seg, x);
    }
    public static MemoryAddress absoluteChildNumber$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.absoluteChildNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void absoluteChildNumber$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.absoluteChildNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static absoluteChildNumber absoluteChildNumber (MemorySegment segment, MemorySession session) {
        return absoluteChildNumber.ofAddress(absoluteChildNumber$get(segment), session);
    }
    static final FunctionDescriptor formatIndex$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle formatIndex$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.formatIndex$FUNC
    );
    public interface formatIndex {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(formatIndex fi, MemorySession session) {
            return RuntimeHelper.upcallStub(formatIndex.class, fi, IXTLRuntimeVtbl.formatIndex$FUNC, session);
        }
        static formatIndex ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IXTLRuntimeVtbl.formatIndex$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle formatIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("formatIndex"));
    public static VarHandle formatIndex$VH() {
        return IXTLRuntimeVtbl.formatIndex$VH;
    }
    public static MemoryAddress formatIndex$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.formatIndex$VH.get(seg);
    }
    public static void formatIndex$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.formatIndex$VH.set(seg, x);
    }
    public static MemoryAddress formatIndex$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.formatIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void formatIndex$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.formatIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static formatIndex formatIndex (MemorySegment segment, MemorySession session) {
        return formatIndex.ofAddress(formatIndex$get(segment), session);
    }
    static final FunctionDescriptor formatNumber$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle formatNumber$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.formatNumber$FUNC
    );
    public interface formatNumber {

        int apply(java.lang.foreign.MemoryAddress _x0, double _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(formatNumber fi, MemorySession session) {
            return RuntimeHelper.upcallStub(formatNumber.class, fi, IXTLRuntimeVtbl.formatNumber$FUNC, session);
        }
        static formatNumber ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, double __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IXTLRuntimeVtbl.formatNumber$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle formatNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("formatNumber"));
    public static VarHandle formatNumber$VH() {
        return IXTLRuntimeVtbl.formatNumber$VH;
    }
    public static MemoryAddress formatNumber$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.formatNumber$VH.get(seg);
    }
    public static void formatNumber$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.formatNumber$VH.set(seg, x);
    }
    public static MemoryAddress formatNumber$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.formatNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void formatNumber$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.formatNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static formatNumber formatNumber (MemorySegment segment, MemorySession session) {
        return formatNumber.ofAddress(formatNumber$get(segment), session);
    }
    static final FunctionDescriptor formatDate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle formatDate$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.formatDate$FUNC
    );
    public interface formatDate {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(formatDate fi, MemorySession session) {
            return RuntimeHelper.upcallStub(formatDate.class, fi, IXTLRuntimeVtbl.formatDate$FUNC, session);
        }
        static formatDate ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (int)IXTLRuntimeVtbl.formatDate$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, __x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle formatDate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("formatDate"));
    public static VarHandle formatDate$VH() {
        return IXTLRuntimeVtbl.formatDate$VH;
    }
    public static MemoryAddress formatDate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.formatDate$VH.get(seg);
    }
    public static void formatDate$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.formatDate$VH.set(seg, x);
    }
    public static MemoryAddress formatDate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.formatDate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void formatDate$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.formatDate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static formatDate formatDate (MemorySegment segment, MemorySession session) {
        return formatDate.ofAddress(formatDate$get(segment), session);
    }
    static final FunctionDescriptor formatTime$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle formatTime$MH = RuntimeHelper.downcallHandle(
        IXTLRuntimeVtbl.formatTime$FUNC
    );
    public interface formatTime {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(formatTime fi, MemorySession session) {
            return RuntimeHelper.upcallStub(formatTime.class, fi, IXTLRuntimeVtbl.formatTime$FUNC, session);
        }
        static formatTime ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (int)IXTLRuntimeVtbl.formatTime$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, __x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle formatTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("formatTime"));
    public static VarHandle formatTime$VH() {
        return IXTLRuntimeVtbl.formatTime$VH;
    }
    public static MemoryAddress formatTime$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.formatTime$VH.get(seg);
    }
    public static void formatTime$set( MemorySegment seg, MemoryAddress x) {
        IXTLRuntimeVtbl.formatTime$VH.set(seg, x);
    }
    public static MemoryAddress formatTime$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXTLRuntimeVtbl.formatTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void formatTime$set(MemorySegment seg, long index, MemoryAddress x) {
        IXTLRuntimeVtbl.formatTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static formatTime formatTime (MemorySegment segment, MemorySession session) {
        return formatTime.ofAddress(formatTime$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


