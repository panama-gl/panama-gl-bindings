// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _DEVICEDUMP_STORAGEDEVICE_DATA {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwSignature"),
            Constants$root.C_LONG$LAYOUT.withName("dwVersion"),
            Constants$root.C_LONG$LAYOUT.withName("dwSize")
        ).withName("Descriptor"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("Data1"),
                Constants$root.C_SHORT$LAYOUT.withName("Data2"),
                Constants$root.C_SHORT$LAYOUT.withName("Data3"),
                MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
            ).withName("guidDeviceDataId"),
            MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("sOrganizationID"),
            Constants$root.C_LONG$LAYOUT.withName("dwFirmwareRevision"),
            MemoryLayout.sequenceLayout(32, Constants$root.C_CHAR$LAYOUT).withName("sModelNumber"),
            MemoryLayout.sequenceLayout(32, Constants$root.C_CHAR$LAYOUT).withName("szDeviceManufacturingID"),
            Constants$root.C_LONG$LAYOUT.withName("dwFlags"),
            Constants$root.C_LONG$LAYOUT.withName("bRestrictedPrivateDataVersion"),
            Constants$root.C_LONG$LAYOUT.withName("dwFirmwareIssueId"),
            MemoryLayout.sequenceLayout(132, Constants$root.C_CHAR$LAYOUT).withName("szIssueDescriptionString")
        ).withName("SectionHeader"),
        Constants$root.C_LONG$LAYOUT.withName("dwBufferSize"),
        Constants$root.C_LONG$LAYOUT.withName("dwReasonForCollection"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwSize"),
            Constants$root.C_LONG$LAYOUT.withName("dwFlags"),
            Constants$root.C_LONG$LAYOUT.withName("dwOffset")
        ).withName("PublicData"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwSize"),
            Constants$root.C_LONG$LAYOUT.withName("dwFlags"),
            Constants$root.C_LONG$LAYOUT.withName("dwOffset")
        ).withName("RestrictedData"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwSize"),
            Constants$root.C_LONG$LAYOUT.withName("dwFlags"),
            Constants$root.C_LONG$LAYOUT.withName("dwOffset")
        ).withName("PrivateData")
    ).withName("_DEVICEDUMP_STORAGEDEVICE_DATA");
    public static MemoryLayout $LAYOUT() {
        return _DEVICEDUMP_STORAGEDEVICE_DATA.$struct$LAYOUT;
    }
    public static MemorySegment Descriptor$slice(MemorySegment seg) {
        return seg.asSlice(0, 12);
    }
    public static MemorySegment SectionHeader$slice(MemorySegment seg) {
        return seg.asSlice(12, 244);
    }
    static final VarHandle dwBufferSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwBufferSize"));
    public static VarHandle dwBufferSize$VH() {
        return _DEVICEDUMP_STORAGEDEVICE_DATA.dwBufferSize$VH;
    }
    public static int dwBufferSize$get(MemorySegment seg) {
        return (int)_DEVICEDUMP_STORAGEDEVICE_DATA.dwBufferSize$VH.get(seg);
    }
    public static void dwBufferSize$set( MemorySegment seg, int x) {
        _DEVICEDUMP_STORAGEDEVICE_DATA.dwBufferSize$VH.set(seg, x);
    }
    public static int dwBufferSize$get(MemorySegment seg, long index) {
        return (int)_DEVICEDUMP_STORAGEDEVICE_DATA.dwBufferSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwBufferSize$set(MemorySegment seg, long index, int x) {
        _DEVICEDUMP_STORAGEDEVICE_DATA.dwBufferSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwReasonForCollection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwReasonForCollection"));
    public static VarHandle dwReasonForCollection$VH() {
        return _DEVICEDUMP_STORAGEDEVICE_DATA.dwReasonForCollection$VH;
    }
    public static int dwReasonForCollection$get(MemorySegment seg) {
        return (int)_DEVICEDUMP_STORAGEDEVICE_DATA.dwReasonForCollection$VH.get(seg);
    }
    public static void dwReasonForCollection$set( MemorySegment seg, int x) {
        _DEVICEDUMP_STORAGEDEVICE_DATA.dwReasonForCollection$VH.set(seg, x);
    }
    public static int dwReasonForCollection$get(MemorySegment seg, long index) {
        return (int)_DEVICEDUMP_STORAGEDEVICE_DATA.dwReasonForCollection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwReasonForCollection$set(MemorySegment seg, long index, int x) {
        _DEVICEDUMP_STORAGEDEVICE_DATA.dwReasonForCollection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment PublicData$slice(MemorySegment seg) {
        return seg.asSlice(264, 12);
    }
    public static MemorySegment RestrictedData$slice(MemorySegment seg) {
        return seg.asSlice(276, 12);
    }
    public static MemorySegment PrivateData$slice(MemorySegment seg) {
        return seg.asSlice(288, 12);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


