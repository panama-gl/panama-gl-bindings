// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _BIDI_RESPONSE_DATA {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dwResult"),
        Constants$root.C_LONG$LAYOUT.withName("dwReqNumber"),
        Constants$root.C_POINTER$LAYOUT.withName("pSchema"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwBidiType"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.unionLayout(
                Constants$root.C_LONG$LAYOUT.withName("bData"),
                Constants$root.C_LONG$LAYOUT.withName("iData"),
                Constants$root.C_POINTER$LAYOUT.withName("sData"),
                Constants$root.C_FLOAT$LAYOUT.withName("fData"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("cbBuf"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_POINTER$LAYOUT.withName("pData")
                ).withName("biData")
            ).withName("u")
        ).withName("data")
    ).withName("_BIDI_RESPONSE_DATA");
    public static MemoryLayout $LAYOUT() {
        return _BIDI_RESPONSE_DATA.$struct$LAYOUT;
    }
    static final VarHandle dwResult$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwResult"));
    public static VarHandle dwResult$VH() {
        return _BIDI_RESPONSE_DATA.dwResult$VH;
    }
    public static int dwResult$get(MemorySegment seg) {
        return (int)_BIDI_RESPONSE_DATA.dwResult$VH.get(seg);
    }
    public static void dwResult$set( MemorySegment seg, int x) {
        _BIDI_RESPONSE_DATA.dwResult$VH.set(seg, x);
    }
    public static int dwResult$get(MemorySegment seg, long index) {
        return (int)_BIDI_RESPONSE_DATA.dwResult$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwResult$set(MemorySegment seg, long index, int x) {
        _BIDI_RESPONSE_DATA.dwResult$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwReqNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwReqNumber"));
    public static VarHandle dwReqNumber$VH() {
        return _BIDI_RESPONSE_DATA.dwReqNumber$VH;
    }
    public static int dwReqNumber$get(MemorySegment seg) {
        return (int)_BIDI_RESPONSE_DATA.dwReqNumber$VH.get(seg);
    }
    public static void dwReqNumber$set( MemorySegment seg, int x) {
        _BIDI_RESPONSE_DATA.dwReqNumber$VH.set(seg, x);
    }
    public static int dwReqNumber$get(MemorySegment seg, long index) {
        return (int)_BIDI_RESPONSE_DATA.dwReqNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwReqNumber$set(MemorySegment seg, long index, int x) {
        _BIDI_RESPONSE_DATA.dwReqNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pSchema$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pSchema"));
    public static VarHandle pSchema$VH() {
        return _BIDI_RESPONSE_DATA.pSchema$VH;
    }
    public static MemoryAddress pSchema$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_BIDI_RESPONSE_DATA.pSchema$VH.get(seg);
    }
    public static void pSchema$set( MemorySegment seg, MemoryAddress x) {
        _BIDI_RESPONSE_DATA.pSchema$VH.set(seg, x);
    }
    public static MemoryAddress pSchema$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_BIDI_RESPONSE_DATA.pSchema$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pSchema$set(MemorySegment seg, long index, MemoryAddress x) {
        _BIDI_RESPONSE_DATA.pSchema$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment data$slice(MemorySegment seg) {
        return seg.asSlice(16, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


