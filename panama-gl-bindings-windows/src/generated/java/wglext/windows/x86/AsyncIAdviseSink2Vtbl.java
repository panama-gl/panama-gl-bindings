// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class AsyncIAdviseSink2Vtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("Begin_OnDataChange"),
        Constants$root.C_POINTER$LAYOUT.withName("Finish_OnDataChange"),
        Constants$root.C_POINTER$LAYOUT.withName("Begin_OnViewChange"),
        Constants$root.C_POINTER$LAYOUT.withName("Finish_OnViewChange"),
        Constants$root.C_POINTER$LAYOUT.withName("Begin_OnRename"),
        Constants$root.C_POINTER$LAYOUT.withName("Finish_OnRename"),
        Constants$root.C_POINTER$LAYOUT.withName("Begin_OnSave"),
        Constants$root.C_POINTER$LAYOUT.withName("Finish_OnSave"),
        Constants$root.C_POINTER$LAYOUT.withName("Begin_OnClose"),
        Constants$root.C_POINTER$LAYOUT.withName("Finish_OnClose"),
        Constants$root.C_POINTER$LAYOUT.withName("Begin_OnLinkSrcChange"),
        Constants$root.C_POINTER$LAYOUT.withName("Finish_OnLinkSrcChange")
    ).withName("AsyncIAdviseSink2Vtbl");
    public static MemoryLayout $LAYOUT() {
        return AsyncIAdviseSink2Vtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, AsyncIAdviseSink2Vtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)AsyncIAdviseSink2Vtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return AsyncIAdviseSink2Vtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, AsyncIAdviseSink2Vtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)AsyncIAdviseSink2Vtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return AsyncIAdviseSink2Vtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, AsyncIAdviseSink2Vtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)AsyncIAdviseSink2Vtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return AsyncIAdviseSink2Vtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor Begin_OnDataChange$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Begin_OnDataChange$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Begin_OnDataChange$FUNC
    );
    public interface Begin_OnDataChange {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(Begin_OnDataChange fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Begin_OnDataChange.class, fi, AsyncIAdviseSink2Vtbl.Begin_OnDataChange$FUNC, session);
        }
        static Begin_OnDataChange ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Begin_OnDataChange$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Begin_OnDataChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Begin_OnDataChange"));
    public static VarHandle Begin_OnDataChange$VH() {
        return AsyncIAdviseSink2Vtbl.Begin_OnDataChange$VH;
    }
    public static MemoryAddress Begin_OnDataChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Begin_OnDataChange$VH.get(seg);
    }
    public static void Begin_OnDataChange$set( MemorySegment seg, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Begin_OnDataChange$VH.set(seg, x);
    }
    public static MemoryAddress Begin_OnDataChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Begin_OnDataChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Begin_OnDataChange$set(MemorySegment seg, long index, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Begin_OnDataChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Begin_OnDataChange Begin_OnDataChange (MemorySegment segment, MemorySession session) {
        return Begin_OnDataChange.ofAddress(Begin_OnDataChange$get(segment), session);
    }
    static final FunctionDescriptor Finish_OnDataChange$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Finish_OnDataChange$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Finish_OnDataChange$FUNC
    );
    public interface Finish_OnDataChange {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Finish_OnDataChange fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Finish_OnDataChange.class, fi, AsyncIAdviseSink2Vtbl.Finish_OnDataChange$FUNC, session);
        }
        static Finish_OnDataChange ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Finish_OnDataChange$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Finish_OnDataChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Finish_OnDataChange"));
    public static VarHandle Finish_OnDataChange$VH() {
        return AsyncIAdviseSink2Vtbl.Finish_OnDataChange$VH;
    }
    public static MemoryAddress Finish_OnDataChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Finish_OnDataChange$VH.get(seg);
    }
    public static void Finish_OnDataChange$set( MemorySegment seg, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Finish_OnDataChange$VH.set(seg, x);
    }
    public static MemoryAddress Finish_OnDataChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Finish_OnDataChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Finish_OnDataChange$set(MemorySegment seg, long index, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Finish_OnDataChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Finish_OnDataChange Finish_OnDataChange (MemorySegment segment, MemorySession session) {
        return Finish_OnDataChange.ofAddress(Finish_OnDataChange$get(segment), session);
    }
    static final FunctionDescriptor Begin_OnViewChange$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Begin_OnViewChange$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Begin_OnViewChange$FUNC
    );
    public interface Begin_OnViewChange {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2);
        static MemorySegment allocate(Begin_OnViewChange fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Begin_OnViewChange.class, fi, AsyncIAdviseSink2Vtbl.Begin_OnViewChange$FUNC, session);
        }
        static Begin_OnViewChange ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Begin_OnViewChange$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Begin_OnViewChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Begin_OnViewChange"));
    public static VarHandle Begin_OnViewChange$VH() {
        return AsyncIAdviseSink2Vtbl.Begin_OnViewChange$VH;
    }
    public static MemoryAddress Begin_OnViewChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Begin_OnViewChange$VH.get(seg);
    }
    public static void Begin_OnViewChange$set( MemorySegment seg, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Begin_OnViewChange$VH.set(seg, x);
    }
    public static MemoryAddress Begin_OnViewChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Begin_OnViewChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Begin_OnViewChange$set(MemorySegment seg, long index, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Begin_OnViewChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Begin_OnViewChange Begin_OnViewChange (MemorySegment segment, MemorySession session) {
        return Begin_OnViewChange.ofAddress(Begin_OnViewChange$get(segment), session);
    }
    static final FunctionDescriptor Finish_OnViewChange$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Finish_OnViewChange$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Finish_OnViewChange$FUNC
    );
    public interface Finish_OnViewChange {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Finish_OnViewChange fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Finish_OnViewChange.class, fi, AsyncIAdviseSink2Vtbl.Finish_OnViewChange$FUNC, session);
        }
        static Finish_OnViewChange ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Finish_OnViewChange$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Finish_OnViewChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Finish_OnViewChange"));
    public static VarHandle Finish_OnViewChange$VH() {
        return AsyncIAdviseSink2Vtbl.Finish_OnViewChange$VH;
    }
    public static MemoryAddress Finish_OnViewChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Finish_OnViewChange$VH.get(seg);
    }
    public static void Finish_OnViewChange$set( MemorySegment seg, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Finish_OnViewChange$VH.set(seg, x);
    }
    public static MemoryAddress Finish_OnViewChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Finish_OnViewChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Finish_OnViewChange$set(MemorySegment seg, long index, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Finish_OnViewChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Finish_OnViewChange Finish_OnViewChange (MemorySegment segment, MemorySession session) {
        return Finish_OnViewChange.ofAddress(Finish_OnViewChange$get(segment), session);
    }
    static final FunctionDescriptor Begin_OnRename$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Begin_OnRename$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Begin_OnRename$FUNC
    );
    public interface Begin_OnRename {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(Begin_OnRename fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Begin_OnRename.class, fi, AsyncIAdviseSink2Vtbl.Begin_OnRename$FUNC, session);
        }
        static Begin_OnRename ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Begin_OnRename$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Begin_OnRename$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Begin_OnRename"));
    public static VarHandle Begin_OnRename$VH() {
        return AsyncIAdviseSink2Vtbl.Begin_OnRename$VH;
    }
    public static MemoryAddress Begin_OnRename$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Begin_OnRename$VH.get(seg);
    }
    public static void Begin_OnRename$set( MemorySegment seg, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Begin_OnRename$VH.set(seg, x);
    }
    public static MemoryAddress Begin_OnRename$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Begin_OnRename$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Begin_OnRename$set(MemorySegment seg, long index, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Begin_OnRename$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Begin_OnRename Begin_OnRename (MemorySegment segment, MemorySession session) {
        return Begin_OnRename.ofAddress(Begin_OnRename$get(segment), session);
    }
    static final FunctionDescriptor Finish_OnRename$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Finish_OnRename$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Finish_OnRename$FUNC
    );
    public interface Finish_OnRename {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Finish_OnRename fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Finish_OnRename.class, fi, AsyncIAdviseSink2Vtbl.Finish_OnRename$FUNC, session);
        }
        static Finish_OnRename ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Finish_OnRename$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Finish_OnRename$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Finish_OnRename"));
    public static VarHandle Finish_OnRename$VH() {
        return AsyncIAdviseSink2Vtbl.Finish_OnRename$VH;
    }
    public static MemoryAddress Finish_OnRename$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Finish_OnRename$VH.get(seg);
    }
    public static void Finish_OnRename$set( MemorySegment seg, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Finish_OnRename$VH.set(seg, x);
    }
    public static MemoryAddress Finish_OnRename$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Finish_OnRename$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Finish_OnRename$set(MemorySegment seg, long index, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Finish_OnRename$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Finish_OnRename Finish_OnRename (MemorySegment segment, MemorySession session) {
        return Finish_OnRename.ofAddress(Finish_OnRename$get(segment), session);
    }
    static final FunctionDescriptor Begin_OnSave$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Begin_OnSave$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Begin_OnSave$FUNC
    );
    public interface Begin_OnSave {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Begin_OnSave fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Begin_OnSave.class, fi, AsyncIAdviseSink2Vtbl.Begin_OnSave$FUNC, session);
        }
        static Begin_OnSave ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Begin_OnSave$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Begin_OnSave$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Begin_OnSave"));
    public static VarHandle Begin_OnSave$VH() {
        return AsyncIAdviseSink2Vtbl.Begin_OnSave$VH;
    }
    public static MemoryAddress Begin_OnSave$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Begin_OnSave$VH.get(seg);
    }
    public static void Begin_OnSave$set( MemorySegment seg, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Begin_OnSave$VH.set(seg, x);
    }
    public static MemoryAddress Begin_OnSave$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Begin_OnSave$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Begin_OnSave$set(MemorySegment seg, long index, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Begin_OnSave$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Begin_OnSave Begin_OnSave (MemorySegment segment, MemorySession session) {
        return Begin_OnSave.ofAddress(Begin_OnSave$get(segment), session);
    }
    static final FunctionDescriptor Finish_OnSave$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Finish_OnSave$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Finish_OnSave$FUNC
    );
    public interface Finish_OnSave {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Finish_OnSave fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Finish_OnSave.class, fi, AsyncIAdviseSink2Vtbl.Finish_OnSave$FUNC, session);
        }
        static Finish_OnSave ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Finish_OnSave$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Finish_OnSave$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Finish_OnSave"));
    public static VarHandle Finish_OnSave$VH() {
        return AsyncIAdviseSink2Vtbl.Finish_OnSave$VH;
    }
    public static MemoryAddress Finish_OnSave$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Finish_OnSave$VH.get(seg);
    }
    public static void Finish_OnSave$set( MemorySegment seg, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Finish_OnSave$VH.set(seg, x);
    }
    public static MemoryAddress Finish_OnSave$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Finish_OnSave$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Finish_OnSave$set(MemorySegment seg, long index, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Finish_OnSave$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Finish_OnSave Finish_OnSave (MemorySegment segment, MemorySession session) {
        return Finish_OnSave.ofAddress(Finish_OnSave$get(segment), session);
    }
    static final FunctionDescriptor Begin_OnClose$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Begin_OnClose$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Begin_OnClose$FUNC
    );
    public interface Begin_OnClose {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Begin_OnClose fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Begin_OnClose.class, fi, AsyncIAdviseSink2Vtbl.Begin_OnClose$FUNC, session);
        }
        static Begin_OnClose ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Begin_OnClose$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Begin_OnClose$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Begin_OnClose"));
    public static VarHandle Begin_OnClose$VH() {
        return AsyncIAdviseSink2Vtbl.Begin_OnClose$VH;
    }
    public static MemoryAddress Begin_OnClose$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Begin_OnClose$VH.get(seg);
    }
    public static void Begin_OnClose$set( MemorySegment seg, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Begin_OnClose$VH.set(seg, x);
    }
    public static MemoryAddress Begin_OnClose$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Begin_OnClose$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Begin_OnClose$set(MemorySegment seg, long index, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Begin_OnClose$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Begin_OnClose Begin_OnClose (MemorySegment segment, MemorySession session) {
        return Begin_OnClose.ofAddress(Begin_OnClose$get(segment), session);
    }
    static final FunctionDescriptor Finish_OnClose$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Finish_OnClose$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Finish_OnClose$FUNC
    );
    public interface Finish_OnClose {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Finish_OnClose fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Finish_OnClose.class, fi, AsyncIAdviseSink2Vtbl.Finish_OnClose$FUNC, session);
        }
        static Finish_OnClose ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Finish_OnClose$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Finish_OnClose$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Finish_OnClose"));
    public static VarHandle Finish_OnClose$VH() {
        return AsyncIAdviseSink2Vtbl.Finish_OnClose$VH;
    }
    public static MemoryAddress Finish_OnClose$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Finish_OnClose$VH.get(seg);
    }
    public static void Finish_OnClose$set( MemorySegment seg, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Finish_OnClose$VH.set(seg, x);
    }
    public static MemoryAddress Finish_OnClose$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Finish_OnClose$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Finish_OnClose$set(MemorySegment seg, long index, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Finish_OnClose$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Finish_OnClose Finish_OnClose (MemorySegment segment, MemorySession session) {
        return Finish_OnClose.ofAddress(Finish_OnClose$get(segment), session);
    }
    static final FunctionDescriptor Begin_OnLinkSrcChange$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Begin_OnLinkSrcChange$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Begin_OnLinkSrcChange$FUNC
    );
    public interface Begin_OnLinkSrcChange {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(Begin_OnLinkSrcChange fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Begin_OnLinkSrcChange.class, fi, AsyncIAdviseSink2Vtbl.Begin_OnLinkSrcChange$FUNC, session);
        }
        static Begin_OnLinkSrcChange ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Begin_OnLinkSrcChange$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Begin_OnLinkSrcChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Begin_OnLinkSrcChange"));
    public static VarHandle Begin_OnLinkSrcChange$VH() {
        return AsyncIAdviseSink2Vtbl.Begin_OnLinkSrcChange$VH;
    }
    public static MemoryAddress Begin_OnLinkSrcChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Begin_OnLinkSrcChange$VH.get(seg);
    }
    public static void Begin_OnLinkSrcChange$set( MemorySegment seg, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Begin_OnLinkSrcChange$VH.set(seg, x);
    }
    public static MemoryAddress Begin_OnLinkSrcChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Begin_OnLinkSrcChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Begin_OnLinkSrcChange$set(MemorySegment seg, long index, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Begin_OnLinkSrcChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Begin_OnLinkSrcChange Begin_OnLinkSrcChange (MemorySegment segment, MemorySession session) {
        return Begin_OnLinkSrcChange.ofAddress(Begin_OnLinkSrcChange$get(segment), session);
    }
    static final FunctionDescriptor Finish_OnLinkSrcChange$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Finish_OnLinkSrcChange$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Finish_OnLinkSrcChange$FUNC
    );
    public interface Finish_OnLinkSrcChange {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Finish_OnLinkSrcChange fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Finish_OnLinkSrcChange.class, fi, AsyncIAdviseSink2Vtbl.Finish_OnLinkSrcChange$FUNC, session);
        }
        static Finish_OnLinkSrcChange ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Finish_OnLinkSrcChange$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Finish_OnLinkSrcChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Finish_OnLinkSrcChange"));
    public static VarHandle Finish_OnLinkSrcChange$VH() {
        return AsyncIAdviseSink2Vtbl.Finish_OnLinkSrcChange$VH;
    }
    public static MemoryAddress Finish_OnLinkSrcChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Finish_OnLinkSrcChange$VH.get(seg);
    }
    public static void Finish_OnLinkSrcChange$set( MemorySegment seg, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Finish_OnLinkSrcChange$VH.set(seg, x);
    }
    public static MemoryAddress Finish_OnLinkSrcChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)AsyncIAdviseSink2Vtbl.Finish_OnLinkSrcChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Finish_OnLinkSrcChange$set(MemorySegment seg, long index, MemoryAddress x) {
        AsyncIAdviseSink2Vtbl.Finish_OnLinkSrcChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Finish_OnLinkSrcChange Finish_OnLinkSrcChange (MemorySegment segment, MemorySession session) {
        return Finish_OnLinkSrcChange.ofAddress(Finish_OnLinkSrcChange$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


