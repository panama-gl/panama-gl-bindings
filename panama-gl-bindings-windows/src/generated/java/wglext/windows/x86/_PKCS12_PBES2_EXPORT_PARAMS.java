// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _PKCS12_PBES2_EXPORT_PARAMS {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dwSize"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("hNcryptDescriptor"),
        Constants$root.C_POINTER$LAYOUT.withName("pwszPbes2Alg")
    ).withName("_PKCS12_PBES2_EXPORT_PARAMS");
    public static MemoryLayout $LAYOUT() {
        return _PKCS12_PBES2_EXPORT_PARAMS.$struct$LAYOUT;
    }
    static final VarHandle dwSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwSize"));
    public static VarHandle dwSize$VH() {
        return _PKCS12_PBES2_EXPORT_PARAMS.dwSize$VH;
    }
    public static int dwSize$get(MemorySegment seg) {
        return (int)_PKCS12_PBES2_EXPORT_PARAMS.dwSize$VH.get(seg);
    }
    public static void dwSize$set( MemorySegment seg, int x) {
        _PKCS12_PBES2_EXPORT_PARAMS.dwSize$VH.set(seg, x);
    }
    public static int dwSize$get(MemorySegment seg, long index) {
        return (int)_PKCS12_PBES2_EXPORT_PARAMS.dwSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwSize$set(MemorySegment seg, long index, int x) {
        _PKCS12_PBES2_EXPORT_PARAMS.dwSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hNcryptDescriptor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hNcryptDescriptor"));
    public static VarHandle hNcryptDescriptor$VH() {
        return _PKCS12_PBES2_EXPORT_PARAMS.hNcryptDescriptor$VH;
    }
    public static MemoryAddress hNcryptDescriptor$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PKCS12_PBES2_EXPORT_PARAMS.hNcryptDescriptor$VH.get(seg);
    }
    public static void hNcryptDescriptor$set( MemorySegment seg, MemoryAddress x) {
        _PKCS12_PBES2_EXPORT_PARAMS.hNcryptDescriptor$VH.set(seg, x);
    }
    public static MemoryAddress hNcryptDescriptor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PKCS12_PBES2_EXPORT_PARAMS.hNcryptDescriptor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hNcryptDescriptor$set(MemorySegment seg, long index, MemoryAddress x) {
        _PKCS12_PBES2_EXPORT_PARAMS.hNcryptDescriptor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pwszPbes2Alg$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pwszPbes2Alg"));
    public static VarHandle pwszPbes2Alg$VH() {
        return _PKCS12_PBES2_EXPORT_PARAMS.pwszPbes2Alg$VH;
    }
    public static MemoryAddress pwszPbes2Alg$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PKCS12_PBES2_EXPORT_PARAMS.pwszPbes2Alg$VH.get(seg);
    }
    public static void pwszPbes2Alg$set( MemorySegment seg, MemoryAddress x) {
        _PKCS12_PBES2_EXPORT_PARAMS.pwszPbes2Alg$VH.set(seg, x);
    }
    public static MemoryAddress pwszPbes2Alg$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PKCS12_PBES2_EXPORT_PARAMS.pwszPbes2Alg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pwszPbes2Alg$set(MemorySegment seg, long index, MemoryAddress x) {
        _PKCS12_PBES2_EXPORT_PARAMS.pwszPbes2Alg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


