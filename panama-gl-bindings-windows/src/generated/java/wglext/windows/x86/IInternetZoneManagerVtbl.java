// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IInternetZoneManagerVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetZoneAttributes"),
        Constants$root.C_POINTER$LAYOUT.withName("SetZoneAttributes"),
        Constants$root.C_POINTER$LAYOUT.withName("GetZoneCustomPolicy"),
        Constants$root.C_POINTER$LAYOUT.withName("SetZoneCustomPolicy"),
        Constants$root.C_POINTER$LAYOUT.withName("GetZoneActionPolicy"),
        Constants$root.C_POINTER$LAYOUT.withName("SetZoneActionPolicy"),
        Constants$root.C_POINTER$LAYOUT.withName("PromptAction"),
        Constants$root.C_POINTER$LAYOUT.withName("LogAction"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateZoneEnumerator"),
        Constants$root.C_POINTER$LAYOUT.withName("GetZoneAt"),
        Constants$root.C_POINTER$LAYOUT.withName("DestroyZoneEnumerator"),
        Constants$root.C_POINTER$LAYOUT.withName("CopyTemplatePoliciesToZone")
    ).withName("IInternetZoneManagerVtbl");
    public static MemoryLayout $LAYOUT() {
        return IInternetZoneManagerVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IInternetZoneManagerVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IInternetZoneManagerVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IInternetZoneManagerVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IInternetZoneManagerVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IInternetZoneManagerVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IInternetZoneManagerVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor GetZoneAttributes$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetZoneAttributes$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerVtbl.GetZoneAttributes$FUNC
    );
    public interface GetZoneAttributes {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetZoneAttributes fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetZoneAttributes.class, fi, IInternetZoneManagerVtbl.GetZoneAttributes$FUNC, session);
        }
        static GetZoneAttributes ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.GetZoneAttributes$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetZoneAttributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetZoneAttributes"));
    public static VarHandle GetZoneAttributes$VH() {
        return IInternetZoneManagerVtbl.GetZoneAttributes$VH;
    }
    public static MemoryAddress GetZoneAttributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.GetZoneAttributes$VH.get(seg);
    }
    public static void GetZoneAttributes$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.GetZoneAttributes$VH.set(seg, x);
    }
    public static MemoryAddress GetZoneAttributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.GetZoneAttributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneAttributes$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.GetZoneAttributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneAttributes GetZoneAttributes (MemorySegment segment, MemorySession session) {
        return GetZoneAttributes.ofAddress(GetZoneAttributes$get(segment), session);
    }
    static final FunctionDescriptor SetZoneAttributes$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetZoneAttributes$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerVtbl.SetZoneAttributes$FUNC
    );
    public interface SetZoneAttributes {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(SetZoneAttributes fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetZoneAttributes.class, fi, IInternetZoneManagerVtbl.SetZoneAttributes$FUNC, session);
        }
        static SetZoneAttributes ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.SetZoneAttributes$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetZoneAttributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetZoneAttributes"));
    public static VarHandle SetZoneAttributes$VH() {
        return IInternetZoneManagerVtbl.SetZoneAttributes$VH;
    }
    public static MemoryAddress SetZoneAttributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.SetZoneAttributes$VH.get(seg);
    }
    public static void SetZoneAttributes$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.SetZoneAttributes$VH.set(seg, x);
    }
    public static MemoryAddress SetZoneAttributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.SetZoneAttributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetZoneAttributes$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.SetZoneAttributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetZoneAttributes SetZoneAttributes (MemorySegment segment, MemorySession session) {
        return SetZoneAttributes.ofAddress(SetZoneAttributes$get(segment), session);
    }
    static final FunctionDescriptor GetZoneCustomPolicy$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GetZoneCustomPolicy$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerVtbl.GetZoneCustomPolicy$FUNC
    );
    public interface GetZoneCustomPolicy {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, int _x5);
        static MemorySegment allocate(GetZoneCustomPolicy fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetZoneCustomPolicy.class, fi, IInternetZoneManagerVtbl.GetZoneCustomPolicy$FUNC, session);
        }
        static GetZoneCustomPolicy ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, int __x5) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.GetZoneCustomPolicy$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetZoneCustomPolicy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetZoneCustomPolicy"));
    public static VarHandle GetZoneCustomPolicy$VH() {
        return IInternetZoneManagerVtbl.GetZoneCustomPolicy$VH;
    }
    public static MemoryAddress GetZoneCustomPolicy$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.GetZoneCustomPolicy$VH.get(seg);
    }
    public static void GetZoneCustomPolicy$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.GetZoneCustomPolicy$VH.set(seg, x);
    }
    public static MemoryAddress GetZoneCustomPolicy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.GetZoneCustomPolicy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneCustomPolicy$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.GetZoneCustomPolicy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneCustomPolicy GetZoneCustomPolicy (MemorySegment segment, MemorySession session) {
        return GetZoneCustomPolicy.ofAddress(GetZoneCustomPolicy$get(segment), session);
    }
    static final FunctionDescriptor SetZoneCustomPolicy$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetZoneCustomPolicy$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerVtbl.SetZoneCustomPolicy$FUNC
    );
    public interface SetZoneCustomPolicy {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, int _x4, int _x5);
        static MemorySegment allocate(SetZoneCustomPolicy fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetZoneCustomPolicy.class, fi, IInternetZoneManagerVtbl.SetZoneCustomPolicy$FUNC, session);
        }
        static SetZoneCustomPolicy ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, int __x4, int __x5) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.SetZoneCustomPolicy$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetZoneCustomPolicy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetZoneCustomPolicy"));
    public static VarHandle SetZoneCustomPolicy$VH() {
        return IInternetZoneManagerVtbl.SetZoneCustomPolicy$VH;
    }
    public static MemoryAddress SetZoneCustomPolicy$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.SetZoneCustomPolicy$VH.get(seg);
    }
    public static void SetZoneCustomPolicy$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.SetZoneCustomPolicy$VH.set(seg, x);
    }
    public static MemoryAddress SetZoneCustomPolicy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.SetZoneCustomPolicy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetZoneCustomPolicy$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.SetZoneCustomPolicy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetZoneCustomPolicy SetZoneCustomPolicy (MemorySegment segment, MemorySession session) {
        return SetZoneCustomPolicy.ofAddress(SetZoneCustomPolicy$get(segment), session);
    }
    static final FunctionDescriptor GetZoneActionPolicy$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GetZoneActionPolicy$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerVtbl.GetZoneActionPolicy$FUNC
    );
    public interface GetZoneActionPolicy {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, java.lang.foreign.MemoryAddress _x3, int _x4, int _x5);
        static MemorySegment allocate(GetZoneActionPolicy fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetZoneActionPolicy.class, fi, IInternetZoneManagerVtbl.GetZoneActionPolicy$FUNC, session);
        }
        static GetZoneActionPolicy ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, java.lang.foreign.MemoryAddress __x3, int __x4, int __x5) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.GetZoneActionPolicy$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetZoneActionPolicy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetZoneActionPolicy"));
    public static VarHandle GetZoneActionPolicy$VH() {
        return IInternetZoneManagerVtbl.GetZoneActionPolicy$VH;
    }
    public static MemoryAddress GetZoneActionPolicy$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.GetZoneActionPolicy$VH.get(seg);
    }
    public static void GetZoneActionPolicy$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.GetZoneActionPolicy$VH.set(seg, x);
    }
    public static MemoryAddress GetZoneActionPolicy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.GetZoneActionPolicy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneActionPolicy$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.GetZoneActionPolicy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneActionPolicy GetZoneActionPolicy (MemorySegment segment, MemorySession session) {
        return GetZoneActionPolicy.ofAddress(GetZoneActionPolicy$get(segment), session);
    }
    static final FunctionDescriptor SetZoneActionPolicy$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetZoneActionPolicy$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerVtbl.SetZoneActionPolicy$FUNC
    );
    public interface SetZoneActionPolicy {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, java.lang.foreign.MemoryAddress _x3, int _x4, int _x5);
        static MemorySegment allocate(SetZoneActionPolicy fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetZoneActionPolicy.class, fi, IInternetZoneManagerVtbl.SetZoneActionPolicy$FUNC, session);
        }
        static SetZoneActionPolicy ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, java.lang.foreign.MemoryAddress __x3, int __x4, int __x5) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.SetZoneActionPolicy$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetZoneActionPolicy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetZoneActionPolicy"));
    public static VarHandle SetZoneActionPolicy$VH() {
        return IInternetZoneManagerVtbl.SetZoneActionPolicy$VH;
    }
    public static MemoryAddress SetZoneActionPolicy$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.SetZoneActionPolicy$VH.get(seg);
    }
    public static void SetZoneActionPolicy$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.SetZoneActionPolicy$VH.set(seg, x);
    }
    public static MemoryAddress SetZoneActionPolicy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.SetZoneActionPolicy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetZoneActionPolicy$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.SetZoneActionPolicy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetZoneActionPolicy SetZoneActionPolicy (MemorySegment segment, MemorySession session) {
        return SetZoneActionPolicy.ofAddress(SetZoneActionPolicy$get(segment), session);
    }
    static final FunctionDescriptor PromptAction$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PromptAction$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerVtbl.PromptAction$FUNC
    );
    public interface PromptAction {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, int _x5);
        static MemorySegment allocate(PromptAction fi, MemorySession session) {
            return RuntimeHelper.upcallStub(PromptAction.class, fi, IInternetZoneManagerVtbl.PromptAction$FUNC, session);
        }
        static PromptAction ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, int __x5) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.PromptAction$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PromptAction$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PromptAction"));
    public static VarHandle PromptAction$VH() {
        return IInternetZoneManagerVtbl.PromptAction$VH;
    }
    public static MemoryAddress PromptAction$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.PromptAction$VH.get(seg);
    }
    public static void PromptAction$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.PromptAction$VH.set(seg, x);
    }
    public static MemoryAddress PromptAction$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.PromptAction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PromptAction$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.PromptAction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PromptAction PromptAction (MemorySegment segment, MemorySession session) {
        return PromptAction.ofAddress(PromptAction$get(segment), session);
    }
    static final FunctionDescriptor LogAction$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle LogAction$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerVtbl.LogAction$FUNC
    );
    public interface LogAction {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, int _x4);
        static MemorySegment allocate(LogAction fi, MemorySession session) {
            return RuntimeHelper.upcallStub(LogAction.class, fi, IInternetZoneManagerVtbl.LogAction$FUNC, session);
        }
        static LogAction ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, int __x4) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.LogAction$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle LogAction$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LogAction"));
    public static VarHandle LogAction$VH() {
        return IInternetZoneManagerVtbl.LogAction$VH;
    }
    public static MemoryAddress LogAction$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.LogAction$VH.get(seg);
    }
    public static void LogAction$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.LogAction$VH.set(seg, x);
    }
    public static MemoryAddress LogAction$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.LogAction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LogAction$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.LogAction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LogAction LogAction (MemorySegment segment, MemorySession session) {
        return LogAction.ofAddress(LogAction$get(segment), session);
    }
    static final FunctionDescriptor CreateZoneEnumerator$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle CreateZoneEnumerator$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerVtbl.CreateZoneEnumerator$FUNC
    );
    public interface CreateZoneEnumerator {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3);
        static MemorySegment allocate(CreateZoneEnumerator fi, MemorySession session) {
            return RuntimeHelper.upcallStub(CreateZoneEnumerator.class, fi, IInternetZoneManagerVtbl.CreateZoneEnumerator$FUNC, session);
        }
        static CreateZoneEnumerator ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.CreateZoneEnumerator$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateZoneEnumerator$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateZoneEnumerator"));
    public static VarHandle CreateZoneEnumerator$VH() {
        return IInternetZoneManagerVtbl.CreateZoneEnumerator$VH;
    }
    public static MemoryAddress CreateZoneEnumerator$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.CreateZoneEnumerator$VH.get(seg);
    }
    public static void CreateZoneEnumerator$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.CreateZoneEnumerator$VH.set(seg, x);
    }
    public static MemoryAddress CreateZoneEnumerator$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.CreateZoneEnumerator$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateZoneEnumerator$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.CreateZoneEnumerator$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateZoneEnumerator CreateZoneEnumerator (MemorySegment segment, MemorySession session) {
        return CreateZoneEnumerator.ofAddress(CreateZoneEnumerator$get(segment), session);
    }
    static final FunctionDescriptor GetZoneAt$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetZoneAt$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerVtbl.GetZoneAt$FUNC
    );
    public interface GetZoneAt {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(GetZoneAt fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetZoneAt.class, fi, IInternetZoneManagerVtbl.GetZoneAt$FUNC, session);
        }
        static GetZoneAt ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.GetZoneAt$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetZoneAt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetZoneAt"));
    public static VarHandle GetZoneAt$VH() {
        return IInternetZoneManagerVtbl.GetZoneAt$VH;
    }
    public static MemoryAddress GetZoneAt$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.GetZoneAt$VH.get(seg);
    }
    public static void GetZoneAt$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.GetZoneAt$VH.set(seg, x);
    }
    public static MemoryAddress GetZoneAt$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.GetZoneAt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneAt$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.GetZoneAt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneAt GetZoneAt (MemorySegment segment, MemorySession session) {
        return GetZoneAt.ofAddress(GetZoneAt$get(segment), session);
    }
    static final FunctionDescriptor DestroyZoneEnumerator$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle DestroyZoneEnumerator$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerVtbl.DestroyZoneEnumerator$FUNC
    );
    public interface DestroyZoneEnumerator {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(DestroyZoneEnumerator fi, MemorySession session) {
            return RuntimeHelper.upcallStub(DestroyZoneEnumerator.class, fi, IInternetZoneManagerVtbl.DestroyZoneEnumerator$FUNC, session);
        }
        static DestroyZoneEnumerator ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.DestroyZoneEnumerator$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DestroyZoneEnumerator$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DestroyZoneEnumerator"));
    public static VarHandle DestroyZoneEnumerator$VH() {
        return IInternetZoneManagerVtbl.DestroyZoneEnumerator$VH;
    }
    public static MemoryAddress DestroyZoneEnumerator$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.DestroyZoneEnumerator$VH.get(seg);
    }
    public static void DestroyZoneEnumerator$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.DestroyZoneEnumerator$VH.set(seg, x);
    }
    public static MemoryAddress DestroyZoneEnumerator$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.DestroyZoneEnumerator$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DestroyZoneEnumerator$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.DestroyZoneEnumerator$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DestroyZoneEnumerator DestroyZoneEnumerator (MemorySegment segment, MemorySession session) {
        return DestroyZoneEnumerator.ofAddress(DestroyZoneEnumerator$get(segment), session);
    }
    static final FunctionDescriptor CopyTemplatePoliciesToZone$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle CopyTemplatePoliciesToZone$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerVtbl.CopyTemplatePoliciesToZone$FUNC
    );
    public interface CopyTemplatePoliciesToZone {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(CopyTemplatePoliciesToZone fi, MemorySession session) {
            return RuntimeHelper.upcallStub(CopyTemplatePoliciesToZone.class, fi, IInternetZoneManagerVtbl.CopyTemplatePoliciesToZone$FUNC, session);
        }
        static CopyTemplatePoliciesToZone ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.CopyTemplatePoliciesToZone$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CopyTemplatePoliciesToZone$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CopyTemplatePoliciesToZone"));
    public static VarHandle CopyTemplatePoliciesToZone$VH() {
        return IInternetZoneManagerVtbl.CopyTemplatePoliciesToZone$VH;
    }
    public static MemoryAddress CopyTemplatePoliciesToZone$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.CopyTemplatePoliciesToZone$VH.get(seg);
    }
    public static void CopyTemplatePoliciesToZone$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.CopyTemplatePoliciesToZone$VH.set(seg, x);
    }
    public static MemoryAddress CopyTemplatePoliciesToZone$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetZoneManagerVtbl.CopyTemplatePoliciesToZone$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CopyTemplatePoliciesToZone$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.CopyTemplatePoliciesToZone$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CopyTemplatePoliciesToZone CopyTemplatePoliciesToZone (MemorySegment segment, MemorySession session) {
        return CopyTemplatePoliciesToZone.ofAddress(CopyTemplatePoliciesToZone$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


