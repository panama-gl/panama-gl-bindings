// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _MIDL_WINRT_TYPE_SERIALIZATION_INFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("TypeFormatString"),
        Constants$root.C_SHORT$LAYOUT.withName("FormatStringSize"),
        Constants$root.C_SHORT$LAYOUT.withName("TypeOffset"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("StubDesc")
    ).withName("_MIDL_WINRT_TYPE_SERIALIZATION_INFO");
    public static MemoryLayout $LAYOUT() {
        return _MIDL_WINRT_TYPE_SERIALIZATION_INFO.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _MIDL_WINRT_TYPE_SERIALIZATION_INFO.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_MIDL_WINRT_TYPE_SERIALIZATION_INFO.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _MIDL_WINRT_TYPE_SERIALIZATION_INFO.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_MIDL_WINRT_TYPE_SERIALIZATION_INFO.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _MIDL_WINRT_TYPE_SERIALIZATION_INFO.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TypeFormatString$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TypeFormatString"));
    public static VarHandle TypeFormatString$VH() {
        return _MIDL_WINRT_TYPE_SERIALIZATION_INFO.TypeFormatString$VH;
    }
    public static MemoryAddress TypeFormatString$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_MIDL_WINRT_TYPE_SERIALIZATION_INFO.TypeFormatString$VH.get(seg);
    }
    public static void TypeFormatString$set( MemorySegment seg, MemoryAddress x) {
        _MIDL_WINRT_TYPE_SERIALIZATION_INFO.TypeFormatString$VH.set(seg, x);
    }
    public static MemoryAddress TypeFormatString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_MIDL_WINRT_TYPE_SERIALIZATION_INFO.TypeFormatString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TypeFormatString$set(MemorySegment seg, long index, MemoryAddress x) {
        _MIDL_WINRT_TYPE_SERIALIZATION_INFO.TypeFormatString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FormatStringSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FormatStringSize"));
    public static VarHandle FormatStringSize$VH() {
        return _MIDL_WINRT_TYPE_SERIALIZATION_INFO.FormatStringSize$VH;
    }
    public static short FormatStringSize$get(MemorySegment seg) {
        return (short)_MIDL_WINRT_TYPE_SERIALIZATION_INFO.FormatStringSize$VH.get(seg);
    }
    public static void FormatStringSize$set( MemorySegment seg, short x) {
        _MIDL_WINRT_TYPE_SERIALIZATION_INFO.FormatStringSize$VH.set(seg, x);
    }
    public static short FormatStringSize$get(MemorySegment seg, long index) {
        return (short)_MIDL_WINRT_TYPE_SERIALIZATION_INFO.FormatStringSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FormatStringSize$set(MemorySegment seg, long index, short x) {
        _MIDL_WINRT_TYPE_SERIALIZATION_INFO.FormatStringSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TypeOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TypeOffset"));
    public static VarHandle TypeOffset$VH() {
        return _MIDL_WINRT_TYPE_SERIALIZATION_INFO.TypeOffset$VH;
    }
    public static short TypeOffset$get(MemorySegment seg) {
        return (short)_MIDL_WINRT_TYPE_SERIALIZATION_INFO.TypeOffset$VH.get(seg);
    }
    public static void TypeOffset$set( MemorySegment seg, short x) {
        _MIDL_WINRT_TYPE_SERIALIZATION_INFO.TypeOffset$VH.set(seg, x);
    }
    public static short TypeOffset$get(MemorySegment seg, long index) {
        return (short)_MIDL_WINRT_TYPE_SERIALIZATION_INFO.TypeOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TypeOffset$set(MemorySegment seg, long index, short x) {
        _MIDL_WINRT_TYPE_SERIALIZATION_INFO.TypeOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle StubDesc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StubDesc"));
    public static VarHandle StubDesc$VH() {
        return _MIDL_WINRT_TYPE_SERIALIZATION_INFO.StubDesc$VH;
    }
    public static MemoryAddress StubDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_MIDL_WINRT_TYPE_SERIALIZATION_INFO.StubDesc$VH.get(seg);
    }
    public static void StubDesc$set( MemorySegment seg, MemoryAddress x) {
        _MIDL_WINRT_TYPE_SERIALIZATION_INFO.StubDesc$VH.set(seg, x);
    }
    public static MemoryAddress StubDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_MIDL_WINRT_TYPE_SERIALIZATION_INFO.StubDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StubDesc$set(MemorySegment seg, long index, MemoryAddress x) {
        _MIDL_WINRT_TYPE_SERIALIZATION_INFO.StubDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


