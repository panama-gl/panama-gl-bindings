// Generated by jextract

package wglext.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("TrustletId"),
        Constants$root.C_LONG$LAYOUT.withName("MinSvn"),
        Constants$root.C_LONG$LAYOUT.withName("FlagsMask"),
        Constants$root.C_LONG$LAYOUT.withName("FlagsExpected"),
        MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(1).withName("AllowDebugging"),
            MemoryLayout.paddingLayout(31).withName("Reserved")
        )
    ).withName("_NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS");
    public static MemoryLayout $LAYOUT() {
        return _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TrustletId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TrustletId"));
    public static VarHandle TrustletId$VH() {
        return _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.TrustletId$VH;
    }
    public static long TrustletId$get(MemorySegment seg) {
        return (long)_NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.TrustletId$VH.get(seg);
    }
    public static void TrustletId$set( MemorySegment seg, long x) {
        _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.TrustletId$VH.set(seg, x);
    }
    public static long TrustletId$get(MemorySegment seg, long index) {
        return (long)_NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.TrustletId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TrustletId$set(MemorySegment seg, long index, long x) {
        _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.TrustletId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MinSvn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MinSvn"));
    public static VarHandle MinSvn$VH() {
        return _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.MinSvn$VH;
    }
    public static int MinSvn$get(MemorySegment seg) {
        return (int)_NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.MinSvn$VH.get(seg);
    }
    public static void MinSvn$set( MemorySegment seg, int x) {
        _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.MinSvn$VH.set(seg, x);
    }
    public static int MinSvn$get(MemorySegment seg, long index) {
        return (int)_NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.MinSvn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MinSvn$set(MemorySegment seg, long index, int x) {
        _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.MinSvn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlagsMask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlagsMask"));
    public static VarHandle FlagsMask$VH() {
        return _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.FlagsMask$VH;
    }
    public static int FlagsMask$get(MemorySegment seg) {
        return (int)_NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.FlagsMask$VH.get(seg);
    }
    public static void FlagsMask$set( MemorySegment seg, int x) {
        _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.FlagsMask$VH.set(seg, x);
    }
    public static int FlagsMask$get(MemorySegment seg, long index) {
        return (int)_NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.FlagsMask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlagsMask$set(MemorySegment seg, long index, int x) {
        _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.FlagsMask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlagsExpected$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlagsExpected"));
    public static VarHandle FlagsExpected$VH() {
        return _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.FlagsExpected$VH;
    }
    public static int FlagsExpected$get(MemorySegment seg) {
        return (int)_NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.FlagsExpected$VH.get(seg);
    }
    public static void FlagsExpected$set( MemorySegment seg, int x) {
        _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.FlagsExpected$VH.set(seg, x);
    }
    public static int FlagsExpected$get(MemorySegment seg, long index) {
        return (int)_NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.FlagsExpected$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlagsExpected$set(MemorySegment seg, long index, int x) {
        _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS.FlagsExpected$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


