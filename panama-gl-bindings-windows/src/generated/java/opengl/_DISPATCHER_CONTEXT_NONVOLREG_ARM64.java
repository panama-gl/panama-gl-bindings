// Generated by jextract

package opengl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _DISPATCHER_CONTEXT_NONVOLREG_ARM64 {

    static final  GroupLayout $union$LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.sequenceLayout(152, Constants$root.C_CHAR$LAYOUT).withName("Buffer"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(11, Constants$root.C_LONG_LONG$LAYOUT).withName("GpNvRegs"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_DOUBLE$LAYOUT).withName("FpNvRegs")
        ).withName("$anon$0")
    ).withName("_DISPATCHER_CONTEXT_NONVOLREG_ARM64");
    public static MemoryLayout $LAYOUT() {
        return _DISPATCHER_CONTEXT_NONVOLREG_ARM64.$union$LAYOUT;
    }
    public static MemorySegment Buffer$slice(MemorySegment seg) {
        return seg.asSlice(0, 152);
    }
    public static MemorySegment GpNvRegs$slice(MemorySegment seg) {
        return seg.asSlice(0, 88);
    }
    public static MemorySegment FpNvRegs$slice(MemorySegment seg) {
        return seg.asSlice(88, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


