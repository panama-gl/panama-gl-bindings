// Generated by jextract

package opengl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class freeglut_h_13 extends freeglut_h_12 {

    public static OfAddress LPAXISINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAXESLISTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAXESLISTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAXESLISTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAXESLISTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAXESLIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAXESLIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENUMLOGFONTEXDVA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONTEXDVA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENUMLOGFONTEXDVW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONTEXDVW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENUMLOGFONTEXDV = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONTEXDV = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CreateFontIndirectExA$MH() {
        return RuntimeHelper.requireNonNull(constants$373.CreateFontIndirectExA$MH,"CreateFontIndirectExA");
    }
    public static MemoryAddress CreateFontIndirectExA ( Addressable x0) {
        var mh$ = CreateFontIndirectExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFontIndirectExW$MH() {
        return RuntimeHelper.requireNonNull(constants$373.CreateFontIndirectExW$MH,"CreateFontIndirectExW");
    }
    public static MemoryAddress CreateFontIndirectExW ( Addressable x0) {
        var mh$ = CreateFontIndirectExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PENUMTEXTMETRICA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMTEXTMETRICA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENUMTEXTMETRICW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMTEXTMETRICW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENUMTEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMTEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetViewportExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$373.GetViewportExtEx$MH,"GetViewportExtEx");
    }
    public static int GetViewportExtEx ( Addressable hdc,  Addressable lpsize) {
        var mh$ = GetViewportExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetViewportOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$373.GetViewportOrgEx$MH,"GetViewportOrgEx");
    }
    public static int GetViewportOrgEx ( Addressable hdc,  Addressable lppoint) {
        var mh$ = GetViewportOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$373.GetWindowExtEx$MH,"GetWindowExtEx");
    }
    public static int GetWindowExtEx ( Addressable hdc,  Addressable lpsize) {
        var mh$ = GetWindowExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$373.GetWindowOrgEx$MH,"GetWindowOrgEx");
    }
    public static int GetWindowOrgEx ( Addressable hdc,  Addressable lppoint) {
        var mh$ = GetWindowOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IntersectClipRect$MH() {
        return RuntimeHelper.requireNonNull(constants$374.IntersectClipRect$MH,"IntersectClipRect");
    }
    public static int IntersectClipRect ( Addressable hdc,  int left,  int top,  int right,  int bottom) {
        var mh$ = IntersectClipRect$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InvertRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$374.InvertRgn$MH,"InvertRgn");
    }
    public static int InvertRgn ( Addressable hdc,  Addressable hrgn) {
        var mh$ = InvertRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LineDDA$MH() {
        return RuntimeHelper.requireNonNull(constants$374.LineDDA$MH,"LineDDA");
    }
    public static int LineDDA ( int xStart,  int yStart,  int xEnd,  int yEnd,  Addressable lpProc,  long data) {
        var mh$ = LineDDA$MH();
        try {
            return (int)mh$.invokeExact(xStart, yStart, xEnd, yEnd, lpProc, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LineTo$MH() {
        return RuntimeHelper.requireNonNull(constants$374.LineTo$MH,"LineTo");
    }
    public static int LineTo ( Addressable hdc,  int x,  int y) {
        var mh$ = LineTo$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MaskBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$374.MaskBlt$MH,"MaskBlt");
    }
    public static int MaskBlt ( Addressable hdcDest,  int xDest,  int yDest,  int width,  int height,  Addressable hdcSrc,  int xSrc,  int ySrc,  Addressable hbmMask,  int xMask,  int yMask,  int rop) {
        var mh$ = MaskBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xDest, yDest, width, height, hdcSrc, xSrc, ySrc, hbmMask, xMask, yMask, rop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlgBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$374.PlgBlt$MH,"PlgBlt");
    }
    public static int PlgBlt ( Addressable hdcDest,  Addressable lpPoint,  Addressable hdcSrc,  int xSrc,  int ySrc,  int width,  int height,  Addressable hbmMask,  int xMask,  int yMask) {
        var mh$ = PlgBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, lpPoint, hdcSrc, xSrc, ySrc, width, height, hbmMask, xMask, yMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OffsetClipRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$375.OffsetClipRgn$MH,"OffsetClipRgn");
    }
    public static int OffsetClipRgn ( Addressable hdc,  int x,  int y) {
        var mh$ = OffsetClipRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OffsetRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$375.OffsetRgn$MH,"OffsetRgn");
    }
    public static int OffsetRgn ( Addressable hrgn,  int x,  int y) {
        var mh$ = OffsetRgn$MH();
        try {
            return (int)mh$.invokeExact(hrgn, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PatBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$375.PatBlt$MH,"PatBlt");
    }
    public static int PatBlt ( Addressable hdc,  int x,  int y,  int w,  int h,  int rop) {
        var mh$ = PatBlt$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, w, h, rop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Pie$MH() {
        return RuntimeHelper.requireNonNull(constants$375.Pie$MH,"Pie");
    }
    public static int Pie ( Addressable hdc,  int left,  int top,  int right,  int bottom,  int xr1,  int yr1,  int xr2,  int yr2) {
        var mh$ = Pie$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom, xr1, yr1, xr2, yr2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlayMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$375.PlayMetaFile$MH,"PlayMetaFile");
    }
    public static int PlayMetaFile ( Addressable hdc,  Addressable hmf) {
        var mh$ = PlayMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hdc, hmf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PaintRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$375.PaintRgn$MH,"PaintRgn");
    }
    public static int PaintRgn ( Addressable hdc,  Addressable hrgn) {
        var mh$ = PaintRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$376.PolyPolygon$MH,"PolyPolygon");
    }
    public static int PolyPolygon ( Addressable hdc,  Addressable apt,  Addressable asz,  int csz) {
        var mh$ = PolyPolygon$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, asz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtInRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$376.PtInRegion$MH,"PtInRegion");
    }
    public static int PtInRegion ( Addressable hrgn,  int x,  int y) {
        var mh$ = PtInRegion$MH();
        try {
            return (int)mh$.invokeExact(hrgn, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtVisible$MH() {
        return RuntimeHelper.requireNonNull(constants$376.PtVisible$MH,"PtVisible");
    }
    public static int PtVisible ( Addressable hdc,  int x,  int y) {
        var mh$ = PtVisible$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RectInRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$376.RectInRegion$MH,"RectInRegion");
    }
    public static int RectInRegion ( Addressable hrgn,  Addressable lprect) {
        var mh$ = RectInRegion$MH();
        try {
            return (int)mh$.invokeExact(hrgn, lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RectVisible$MH() {
        return RuntimeHelper.requireNonNull(constants$376.RectVisible$MH,"RectVisible");
    }
    public static int RectVisible ( Addressable hdc,  Addressable lprect) {
        var mh$ = RectVisible$MH();
        try {
            return (int)mh$.invokeExact(hdc, lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Rectangle$MH() {
        return RuntimeHelper.requireNonNull(constants$376.Rectangle$MH,"Rectangle");
    }
    public static int Rectangle ( Addressable hdc,  int left,  int top,  int right,  int bottom) {
        var mh$ = Rectangle$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RestoreDC$MH() {
        return RuntimeHelper.requireNonNull(constants$377.RestoreDC$MH,"RestoreDC");
    }
    public static int RestoreDC ( Addressable hdc,  int nSavedDC) {
        var mh$ = RestoreDC$MH();
        try {
            return (int)mh$.invokeExact(hdc, nSavedDC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResetDCA$MH() {
        return RuntimeHelper.requireNonNull(constants$377.ResetDCA$MH,"ResetDCA");
    }
    public static MemoryAddress ResetDCA ( Addressable hdc,  Addressable lpdm) {
        var mh$ = ResetDCA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, lpdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResetDCW$MH() {
        return RuntimeHelper.requireNonNull(constants$377.ResetDCW$MH,"ResetDCW");
    }
    public static MemoryAddress ResetDCW ( Addressable hdc,  Addressable lpdm) {
        var mh$ = ResetDCW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, lpdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RealizePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$377.RealizePalette$MH,"RealizePalette");
    }
    public static int RealizePalette ( Addressable hdc) {
        var mh$ = RealizePalette$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveFontResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$377.RemoveFontResourceA$MH,"RemoveFontResourceA");
    }
    public static int RemoveFontResourceA ( Addressable lpFileName) {
        var mh$ = RemoveFontResourceA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveFontResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$377.RemoveFontResourceW$MH,"RemoveFontResourceW");
    }
    public static int RemoveFontResourceW ( Addressable lpFileName) {
        var mh$ = RemoveFontResourceW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RoundRect$MH() {
        return RuntimeHelper.requireNonNull(constants$378.RoundRect$MH,"RoundRect");
    }
    public static int RoundRect ( Addressable hdc,  int left,  int top,  int right,  int bottom,  int width,  int height) {
        var mh$ = RoundRect$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResizePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$378.ResizePalette$MH,"ResizePalette");
    }
    public static int ResizePalette ( Addressable hpal,  int n) {
        var mh$ = ResizePalette$MH();
        try {
            return (int)mh$.invokeExact(hpal, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SaveDC$MH() {
        return RuntimeHelper.requireNonNull(constants$378.SaveDC$MH,"SaveDC");
    }
    public static int SaveDC ( Addressable hdc) {
        var mh$ = SaveDC$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SelectClipRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$378.SelectClipRgn$MH,"SelectClipRgn");
    }
    public static int SelectClipRgn ( Addressable hdc,  Addressable hrgn) {
        var mh$ = SelectClipRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtSelectClipRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$378.ExtSelectClipRgn$MH,"ExtSelectClipRgn");
    }
    public static int ExtSelectClipRgn ( Addressable hdc,  Addressable hrgn,  int mode) {
        var mh$ = ExtSelectClipRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMetaRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$378.SetMetaRgn$MH,"SetMetaRgn");
    }
    public static int SetMetaRgn ( Addressable hdc) {
        var mh$ = SetMetaRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SelectObject$MH() {
        return RuntimeHelper.requireNonNull(constants$379.SelectObject$MH,"SelectObject");
    }
    public static MemoryAddress SelectObject ( Addressable hdc,  Addressable h) {
        var mh$ = SelectObject$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SelectPalette$MH() {
        return RuntimeHelper.requireNonNull(constants$379.SelectPalette$MH,"SelectPalette");
    }
    public static MemoryAddress SelectPalette ( Addressable hdc,  Addressable hPal,  int bForceBkgd) {
        var mh$ = SelectPalette$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, hPal, bForceBkgd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBkColor$MH() {
        return RuntimeHelper.requireNonNull(constants$379.SetBkColor$MH,"SetBkColor");
    }
    public static int SetBkColor ( Addressable hdc,  int color) {
        var mh$ = SetBkColor$MH();
        try {
            return (int)mh$.invokeExact(hdc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDCBrushColor$MH() {
        return RuntimeHelper.requireNonNull(constants$379.SetDCBrushColor$MH,"SetDCBrushColor");
    }
    public static int SetDCBrushColor ( Addressable hdc,  int color) {
        var mh$ = SetDCBrushColor$MH();
        try {
            return (int)mh$.invokeExact(hdc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDCPenColor$MH() {
        return RuntimeHelper.requireNonNull(constants$379.SetDCPenColor$MH,"SetDCPenColor");
    }
    public static int SetDCPenColor ( Addressable hdc,  int color) {
        var mh$ = SetDCPenColor$MH();
        try {
            return (int)mh$.invokeExact(hdc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBkMode$MH() {
        return RuntimeHelper.requireNonNull(constants$379.SetBkMode$MH,"SetBkMode");
    }
    public static int SetBkMode ( Addressable hdc,  int mode) {
        var mh$ = SetBkMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBitmapBits$MH() {
        return RuntimeHelper.requireNonNull(constants$380.SetBitmapBits$MH,"SetBitmapBits");
    }
    public static int SetBitmapBits ( Addressable hbm,  int cb,  Addressable pvBits) {
        var mh$ = SetBitmapBits$MH();
        try {
            return (int)mh$.invokeExact(hbm, cb, pvBits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBoundsRect$MH() {
        return RuntimeHelper.requireNonNull(constants$380.SetBoundsRect$MH,"SetBoundsRect");
    }
    public static int SetBoundsRect ( Addressable hdc,  Addressable lprect,  int flags) {
        var mh$ = SetBoundsRect$MH();
        try {
            return (int)mh$.invokeExact(hdc, lprect, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDIBits$MH() {
        return RuntimeHelper.requireNonNull(constants$380.SetDIBits$MH,"SetDIBits");
    }
    public static int SetDIBits ( Addressable hdc,  Addressable hbm,  int start,  int cLines,  Addressable lpBits,  Addressable lpbmi,  int ColorUse) {
        var mh$ = SetDIBits$MH();
        try {
            return (int)mh$.invokeExact(hdc, hbm, start, cLines, lpBits, lpbmi, ColorUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDIBitsToDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$380.SetDIBitsToDevice$MH,"SetDIBitsToDevice");
    }
    public static int SetDIBitsToDevice ( Addressable hdc,  int xDest,  int yDest,  int w,  int h,  int xSrc,  int ySrc,  int StartScan,  int cLines,  Addressable lpvBits,  Addressable lpbmi,  int ColorUse) {
        var mh$ = SetDIBitsToDevice$MH();
        try {
            return (int)mh$.invokeExact(hdc, xDest, yDest, w, h, xSrc, ySrc, StartScan, cLines, lpvBits, lpbmi, ColorUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMapperFlags$MH() {
        return RuntimeHelper.requireNonNull(constants$380.SetMapperFlags$MH,"SetMapperFlags");
    }
    public static int SetMapperFlags ( Addressable hdc,  int flags) {
        var mh$ = SetMapperFlags$MH();
        try {
            return (int)mh$.invokeExact(hdc, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetGraphicsMode$MH() {
        return RuntimeHelper.requireNonNull(constants$380.SetGraphicsMode$MH,"SetGraphicsMode");
    }
    public static int SetGraphicsMode ( Addressable hdc,  int iMode) {
        var mh$ = SetGraphicsMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, iMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMapMode$MH() {
        return RuntimeHelper.requireNonNull(constants$381.SetMapMode$MH,"SetMapMode");
    }
    public static int SetMapMode ( Addressable hdc,  int iMode) {
        var mh$ = SetMapMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, iMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$381.SetLayout$MH,"SetLayout");
    }
    public static int SetLayout ( Addressable hdc,  int l) {
        var mh$ = SetLayout$MH();
        try {
            return (int)mh$.invokeExact(hdc, l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$381.GetLayout$MH,"GetLayout");
    }
    public static int GetLayout ( Addressable hdc) {
        var mh$ = GetLayout$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMetaFileBitsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$381.SetMetaFileBitsEx$MH,"SetMetaFileBitsEx");
    }
    public static MemoryAddress SetMetaFileBitsEx ( int cbBuffer,  Addressable lpData) {
        var mh$ = SetMetaFileBitsEx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cbBuffer, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$381.SetPaletteEntries$MH,"SetPaletteEntries");
    }
    public static int SetPaletteEntries ( Addressable hpal,  int iStart,  int cEntries,  Addressable pPalEntries) {
        var mh$ = SetPaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(hpal, iStart, cEntries, pPalEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPixel$MH() {
        return RuntimeHelper.requireNonNull(constants$381.SetPixel$MH,"SetPixel");
    }
    public static int SetPixel ( Addressable hdc,  int x,  int y,  int color) {
        var mh$ = SetPixel$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPixelV$MH() {
        return RuntimeHelper.requireNonNull(constants$382.SetPixelV$MH,"SetPixelV");
    }
    public static int SetPixelV ( Addressable hdc,  int x,  int y,  int color) {
        var mh$ = SetPixelV$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$382.SetPixelFormat$MH,"SetPixelFormat");
    }
    public static int SetPixelFormat ( Addressable hdc,  int format,  Addressable ppfd) {
        var mh$ = SetPixelFormat$MH();
        try {
            return (int)mh$.invokeExact(hdc, format, ppfd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPolyFillMode$MH() {
        return RuntimeHelper.requireNonNull(constants$382.SetPolyFillMode$MH,"SetPolyFillMode");
    }
    public static int SetPolyFillMode ( Addressable hdc,  int mode) {
        var mh$ = SetPolyFillMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StretchBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$382.StretchBlt$MH,"StretchBlt");
    }
    public static int StretchBlt ( Addressable hdcDest,  int xDest,  int yDest,  int wDest,  int hDest,  Addressable hdcSrc,  int xSrc,  int ySrc,  int wSrc,  int hSrc,  int rop) {
        var mh$ = StretchBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xDest, yDest, wDest, hDest, hdcSrc, xSrc, ySrc, wSrc, hSrc, rop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetRectRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$382.SetRectRgn$MH,"SetRectRgn");
    }
    public static int SetRectRgn ( Addressable hrgn,  int left,  int top,  int right,  int bottom) {
        var mh$ = SetRectRgn$MH();
        try {
            return (int)mh$.invokeExact(hrgn, left, top, right, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StretchDIBits$MH() {
        return RuntimeHelper.requireNonNull(constants$382.StretchDIBits$MH,"StretchDIBits");
    }
    public static int StretchDIBits ( Addressable hdc,  int xDest,  int yDest,  int DestWidth,  int DestHeight,  int xSrc,  int ySrc,  int SrcWidth,  int SrcHeight,  Addressable lpBits,  Addressable lpbmi,  int iUsage,  int rop) {
        var mh$ = StretchDIBits$MH();
        try {
            return (int)mh$.invokeExact(hdc, xDest, yDest, DestWidth, DestHeight, xSrc, ySrc, SrcWidth, SrcHeight, lpBits, lpbmi, iUsage, rop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetROP2$MH() {
        return RuntimeHelper.requireNonNull(constants$383.SetROP2$MH,"SetROP2");
    }
    public static int SetROP2 ( Addressable hdc,  int rop2) {
        var mh$ = SetROP2$MH();
        try {
            return (int)mh$.invokeExact(hdc, rop2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetStretchBltMode$MH() {
        return RuntimeHelper.requireNonNull(constants$383.SetStretchBltMode$MH,"SetStretchBltMode");
    }
    public static int SetStretchBltMode ( Addressable hdc,  int mode) {
        var mh$ = SetStretchBltMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSystemPaletteUse$MH() {
        return RuntimeHelper.requireNonNull(constants$383.SetSystemPaletteUse$MH,"SetSystemPaletteUse");
    }
    public static int SetSystemPaletteUse ( Addressable hdc,  int use) {
        var mh$ = SetSystemPaletteUse$MH();
        try {
            return (int)mh$.invokeExact(hdc, use);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTextCharacterExtra$MH() {
        return RuntimeHelper.requireNonNull(constants$383.SetTextCharacterExtra$MH,"SetTextCharacterExtra");
    }
    public static int SetTextCharacterExtra ( Addressable hdc,  int extra) {
        var mh$ = SetTextCharacterExtra$MH();
        try {
            return (int)mh$.invokeExact(hdc, extra);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTextColor$MH() {
        return RuntimeHelper.requireNonNull(constants$383.SetTextColor$MH,"SetTextColor");
    }
    public static int SetTextColor ( Addressable hdc,  int color) {
        var mh$ = SetTextColor$MH();
        try {
            return (int)mh$.invokeExact(hdc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTextAlign$MH() {
        return RuntimeHelper.requireNonNull(constants$383.SetTextAlign$MH,"SetTextAlign");
    }
    public static int SetTextAlign ( Addressable hdc,  int align) {
        var mh$ = SetTextAlign$MH();
        try {
            return (int)mh$.invokeExact(hdc, align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTextJustification$MH() {
        return RuntimeHelper.requireNonNull(constants$384.SetTextJustification$MH,"SetTextJustification");
    }
    public static int SetTextJustification ( Addressable hdc,  int extra,  int count) {
        var mh$ = SetTextJustification$MH();
        try {
            return (int)mh$.invokeExact(hdc, extra, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateColors$MH() {
        return RuntimeHelper.requireNonNull(constants$384.UpdateColors$MH,"UpdateColors");
    }
    public static int UpdateColors ( Addressable hdc) {
        var mh$ = UpdateColors$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PTRIVERTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTRIVERTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGRADIENT_TRIANGLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGRADIENT_TRIANGLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGRADIENT_RECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGRADIENT_RECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBLENDFUNCTION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle AlphaBlend$MH() {
        return RuntimeHelper.requireNonNull(constants$384.AlphaBlend$MH,"AlphaBlend");
    }
    public static int AlphaBlend ( Addressable hdcDest,  int xoriginDest,  int yoriginDest,  int wDest,  int hDest,  Addressable hdcSrc,  int xoriginSrc,  int yoriginSrc,  int wSrc,  int hSrc,  MemorySegment ftn) {
        var mh$ = AlphaBlend$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xoriginDest, yoriginDest, wDest, hDest, hdcSrc, xoriginSrc, yoriginSrc, wSrc, hSrc, ftn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TransparentBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$384.TransparentBlt$MH,"TransparentBlt");
    }
    public static int TransparentBlt ( Addressable hdcDest,  int xoriginDest,  int yoriginDest,  int wDest,  int hDest,  Addressable hdcSrc,  int xoriginSrc,  int yoriginSrc,  int wSrc,  int hSrc,  int crTransparent) {
        var mh$ = TransparentBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xoriginDest, yoriginDest, wDest, hDest, hdcSrc, xoriginSrc, yoriginSrc, wSrc, hSrc, crTransparent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GradientFill$MH() {
        return RuntimeHelper.requireNonNull(constants$384.GradientFill$MH,"GradientFill");
    }
    public static int GradientFill ( Addressable hdc,  Addressable pVertex,  int nVertex,  Addressable pMesh,  int nMesh,  int ulMode) {
        var mh$ = GradientFill$MH();
        try {
            return (int)mh$.invokeExact(hdc, pVertex, nVertex, pMesh, nMesh, ulMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiAlphaBlend$MH() {
        return RuntimeHelper.requireNonNull(constants$384.GdiAlphaBlend$MH,"GdiAlphaBlend");
    }
    public static int GdiAlphaBlend ( Addressable hdcDest,  int xoriginDest,  int yoriginDest,  int wDest,  int hDest,  Addressable hdcSrc,  int xoriginSrc,  int yoriginSrc,  int wSrc,  int hSrc,  MemorySegment ftn) {
        var mh$ = GdiAlphaBlend$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xoriginDest, yoriginDest, wDest, hDest, hdcSrc, xoriginSrc, yoriginSrc, wSrc, hSrc, ftn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiTransparentBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$385.GdiTransparentBlt$MH,"GdiTransparentBlt");
    }
    public static int GdiTransparentBlt ( Addressable hdcDest,  int xoriginDest,  int yoriginDest,  int wDest,  int hDest,  Addressable hdcSrc,  int xoriginSrc,  int yoriginSrc,  int wSrc,  int hSrc,  int crTransparent) {
        var mh$ = GdiTransparentBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xoriginDest, yoriginDest, wDest, hDest, hdcSrc, xoriginSrc, yoriginSrc, wSrc, hSrc, crTransparent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiGradientFill$MH() {
        return RuntimeHelper.requireNonNull(constants$385.GdiGradientFill$MH,"GdiGradientFill");
    }
    public static int GdiGradientFill ( Addressable hdc,  Addressable pVertex,  int nVertex,  Addressable pMesh,  int nCount,  int ulMode) {
        var mh$ = GdiGradientFill$MH();
        try {
            return (int)mh$.invokeExact(hdc, pVertex, nVertex, pMesh, nCount, ulMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlayMetaFileRecord$MH() {
        return RuntimeHelper.requireNonNull(constants$385.PlayMetaFileRecord$MH,"PlayMetaFileRecord");
    }
    public static int PlayMetaFileRecord ( Addressable hdc,  Addressable lpHandleTable,  Addressable lpMR,  int noObjs) {
        var mh$ = PlayMetaFileRecord$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpHandleTable, lpMR, noObjs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$385.EnumMetaFile$MH,"EnumMetaFile");
    }
    public static int EnumMetaFile ( Addressable hdc,  Addressable hmf,  Addressable proc,  long param) {
        var mh$ = EnumMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hdc, hmf, proc, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseEnhMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$386.CloseEnhMetaFile$MH,"CloseEnhMetaFile");
    }
    public static MemoryAddress CloseEnhMetaFile ( Addressable hdc) {
        var mh$ = CloseEnhMetaFile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyEnhMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$386.CopyEnhMetaFileA$MH,"CopyEnhMetaFileA");
    }
    public static MemoryAddress CopyEnhMetaFileA ( Addressable hEnh,  Addressable lpFileName) {
        var mh$ = CopyEnhMetaFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hEnh, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyEnhMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$386.CopyEnhMetaFileW$MH,"CopyEnhMetaFileW");
    }
    public static MemoryAddress CopyEnhMetaFileW ( Addressable hEnh,  Addressable lpFileName) {
        var mh$ = CopyEnhMetaFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hEnh, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEnhMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$386.CreateEnhMetaFileA$MH,"CreateEnhMetaFileA");
    }
    public static MemoryAddress CreateEnhMetaFileA ( Addressable hdc,  Addressable lpFilename,  Addressable lprc,  Addressable lpDesc) {
        var mh$ = CreateEnhMetaFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, lpFilename, lprc, lpDesc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEnhMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$387.CreateEnhMetaFileW$MH,"CreateEnhMetaFileW");
    }
    public static MemoryAddress CreateEnhMetaFileW ( Addressable hdc,  Addressable lpFilename,  Addressable lprc,  Addressable lpDesc) {
        var mh$ = CreateEnhMetaFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, lpFilename, lprc, lpDesc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteEnhMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$387.DeleteEnhMetaFile$MH,"DeleteEnhMetaFile");
    }
    public static int DeleteEnhMetaFile ( Addressable hmf) {
        var mh$ = DeleteEnhMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hmf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumEnhMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$387.EnumEnhMetaFile$MH,"EnumEnhMetaFile");
    }
    public static int EnumEnhMetaFile ( Addressable hdc,  Addressable hmf,  Addressable proc,  Addressable param,  Addressable lpRect) {
        var mh$ = EnumEnhMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hdc, hmf, proc, param, lpRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$387.GetEnhMetaFileA$MH,"GetEnhMetaFileA");
    }
    public static MemoryAddress GetEnhMetaFileA ( Addressable lpName) {
        var mh$ = GetEnhMetaFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$387.GetEnhMetaFileW$MH,"GetEnhMetaFileW");
    }
    public static MemoryAddress GetEnhMetaFileW ( Addressable lpName) {
        var mh$ = GetEnhMetaFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileBits$MH() {
        return RuntimeHelper.requireNonNull(constants$387.GetEnhMetaFileBits$MH,"GetEnhMetaFileBits");
    }
    public static int GetEnhMetaFileBits ( Addressable hEMF,  int nSize,  Addressable lpData) {
        var mh$ = GetEnhMetaFileBits$MH();
        try {
            return (int)mh$.invokeExact(hEMF, nSize, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileDescriptionA$MH() {
        return RuntimeHelper.requireNonNull(constants$388.GetEnhMetaFileDescriptionA$MH,"GetEnhMetaFileDescriptionA");
    }
    public static int GetEnhMetaFileDescriptionA ( Addressable hemf,  int cchBuffer,  Addressable lpDescription) {
        var mh$ = GetEnhMetaFileDescriptionA$MH();
        try {
            return (int)mh$.invokeExact(hemf, cchBuffer, lpDescription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileDescriptionW$MH() {
        return RuntimeHelper.requireNonNull(constants$388.GetEnhMetaFileDescriptionW$MH,"GetEnhMetaFileDescriptionW");
    }
    public static int GetEnhMetaFileDescriptionW ( Addressable hemf,  int cchBuffer,  Addressable lpDescription) {
        var mh$ = GetEnhMetaFileDescriptionW$MH();
        try {
            return (int)mh$.invokeExact(hemf, cchBuffer, lpDescription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$388.GetEnhMetaFileHeader$MH,"GetEnhMetaFileHeader");
    }
    public static int GetEnhMetaFileHeader ( Addressable hemf,  int nSize,  Addressable lpEnhMetaHeader) {
        var mh$ = GetEnhMetaFileHeader$MH();
        try {
            return (int)mh$.invokeExact(hemf, nSize, lpEnhMetaHeader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFilePaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$388.GetEnhMetaFilePaletteEntries$MH,"GetEnhMetaFilePaletteEntries");
    }
    public static int GetEnhMetaFilePaletteEntries ( Addressable hemf,  int nNumEntries,  Addressable lpPaletteEntries) {
        var mh$ = GetEnhMetaFilePaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(hemf, nNumEntries, lpPaletteEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFilePixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$388.GetEnhMetaFilePixelFormat$MH,"GetEnhMetaFilePixelFormat");
    }
    public static int GetEnhMetaFilePixelFormat ( Addressable hemf,  int cbBuffer,  Addressable ppfd) {
        var mh$ = GetEnhMetaFilePixelFormat$MH();
        try {
            return (int)mh$.invokeExact(hemf, cbBuffer, ppfd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWinMetaFileBits$MH() {
        return RuntimeHelper.requireNonNull(constants$388.GetWinMetaFileBits$MH,"GetWinMetaFileBits");
    }
    public static int GetWinMetaFileBits ( Addressable hemf,  int cbData16,  Addressable pData16,  int iMapMode,  Addressable hdcRef) {
        var mh$ = GetWinMetaFileBits$MH();
        try {
            return (int)mh$.invokeExact(hemf, cbData16, pData16, iMapMode, hdcRef);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlayEnhMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$389.PlayEnhMetaFile$MH,"PlayEnhMetaFile");
    }
    public static int PlayEnhMetaFile ( Addressable hdc,  Addressable hmf,  Addressable lprect) {
        var mh$ = PlayEnhMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hdc, hmf, lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlayEnhMetaFileRecord$MH() {
        return RuntimeHelper.requireNonNull(constants$389.PlayEnhMetaFileRecord$MH,"PlayEnhMetaFileRecord");
    }
    public static int PlayEnhMetaFileRecord ( Addressable hdc,  Addressable pht,  Addressable pmr,  int cht) {
        var mh$ = PlayEnhMetaFileRecord$MH();
        try {
            return (int)mh$.invokeExact(hdc, pht, pmr, cht);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEnhMetaFileBits$MH() {
        return RuntimeHelper.requireNonNull(constants$389.SetEnhMetaFileBits$MH,"SetEnhMetaFileBits");
    }
    public static MemoryAddress SetEnhMetaFileBits ( int nSize,  Addressable pb) {
        var mh$ = SetEnhMetaFileBits$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(nSize, pb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWinMetaFileBits$MH() {
        return RuntimeHelper.requireNonNull(constants$389.SetWinMetaFileBits$MH,"SetWinMetaFileBits");
    }
    public static MemoryAddress SetWinMetaFileBits ( int nSize,  Addressable lpMeta16Data,  Addressable hdcRef,  Addressable lpMFP) {
        var mh$ = SetWinMetaFileBits$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(nSize, lpMeta16Data, hdcRef, lpMFP);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiComment$MH() {
        return RuntimeHelper.requireNonNull(constants$389.GdiComment$MH,"GdiComment");
    }
    public static int GdiComment ( Addressable hdc,  int nSize,  Addressable lpData) {
        var mh$ = GdiComment$MH();
        try {
            return (int)mh$.invokeExact(hdc, nSize, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextMetricsA$MH() {
        return RuntimeHelper.requireNonNull(constants$389.GetTextMetricsA$MH,"GetTextMetricsA");
    }
    public static int GetTextMetricsA ( Addressable hdc,  Addressable lptm) {
        var mh$ = GetTextMetricsA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lptm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextMetricsW$MH() {
        return RuntimeHelper.requireNonNull(constants$390.GetTextMetricsW$MH,"GetTextMetricsW");
    }
    public static int GetTextMetricsW ( Addressable hdc,  Addressable lptm) {
        var mh$ = GetTextMetricsW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lptm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPDIBSECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDIBSECTION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle AngleArc$MH() {
        return RuntimeHelper.requireNonNull(constants$390.AngleArc$MH,"AngleArc");
    }
    public static int AngleArc ( Addressable hdc,  int x,  int y,  int r,  float StartAngle,  float SweepAngle) {
        var mh$ = AngleArc$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, r, StartAngle, SweepAngle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyPolyline$MH() {
        return RuntimeHelper.requireNonNull(constants$390.PolyPolyline$MH,"PolyPolyline");
    }
    public static int PolyPolyline ( Addressable hdc,  Addressable apt,  Addressable asz,  int csz) {
        var mh$ = PolyPolyline$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, asz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWorldTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$390.GetWorldTransform$MH,"GetWorldTransform");
    }
    public static int GetWorldTransform ( Addressable hdc,  Addressable lpxf) {
        var mh$ = GetWorldTransform$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpxf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWorldTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$390.SetWorldTransform$MH,"SetWorldTransform");
    }
    public static int SetWorldTransform ( Addressable hdc,  Addressable lpxf) {
        var mh$ = SetWorldTransform$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpxf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ModifyWorldTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$390.ModifyWorldTransform$MH,"ModifyWorldTransform");
    }
    public static int ModifyWorldTransform ( Addressable hdc,  Addressable lpxf,  int mode) {
        var mh$ = ModifyWorldTransform$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpxf, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CombineTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$391.CombineTransform$MH,"CombineTransform");
    }
    public static int CombineTransform ( Addressable lpxfOut,  Addressable lpxf1,  Addressable lpxf2) {
        var mh$ = CombineTransform$MH();
        try {
            return (int)mh$.invokeExact(lpxfOut, lpxf1, lpxf2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDIBSection$MH() {
        return RuntimeHelper.requireNonNull(constants$391.CreateDIBSection$MH,"CreateDIBSection");
    }
    public static MemoryAddress CreateDIBSection ( Addressable hdc,  Addressable pbmi,  int usage,  Addressable ppvBits,  Addressable hSection,  int offset) {
        var mh$ = CreateDIBSection$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, pbmi, usage, ppvBits, hSection, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDIBColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$391.GetDIBColorTable$MH,"GetDIBColorTable");
    }
    public static int GetDIBColorTable ( Addressable hdc,  int iStart,  int cEntries,  Addressable prgbq) {
        var mh$ = GetDIBColorTable$MH();
        try {
            return (int)mh$.invokeExact(hdc, iStart, cEntries, prgbq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDIBColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$391.SetDIBColorTable$MH,"SetDIBColorTable");
    }
    public static int SetDIBColorTable ( Addressable hdc,  int iStart,  int cEntries,  Addressable prgbq) {
        var mh$ = SetDIBColorTable$MH();
        try {
            return (int)mh$.invokeExact(hdc, iStart, cEntries, prgbq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCOLORADJUSTMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCOLORADJUSTMENT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetColorAdjustment$MH() {
        return RuntimeHelper.requireNonNull(constants$391.SetColorAdjustment$MH,"SetColorAdjustment");
    }
    public static int SetColorAdjustment ( Addressable hdc,  Addressable lpca) {
        var mh$ = SetColorAdjustment$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpca);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetColorAdjustment$MH() {
        return RuntimeHelper.requireNonNull(constants$391.GetColorAdjustment$MH,"GetColorAdjustment");
    }
    public static int GetColorAdjustment ( Addressable hdc,  Addressable lpca) {
        var mh$ = GetColorAdjustment$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpca);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateHalftonePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$392.CreateHalftonePalette$MH,"CreateHalftonePalette");
    }
    public static MemoryAddress CreateHalftonePalette ( Addressable hdc) {
        var mh$ = CreateHalftonePalette$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPDOCINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDOCINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDOCINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle StartDocA$MH() {
        return RuntimeHelper.requireNonNull(constants$392.StartDocA$MH,"StartDocA");
    }
    public static int StartDocA ( Addressable hdc,  Addressable lpdi) {
        var mh$ = StartDocA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpdi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartDocW$MH() {
        return RuntimeHelper.requireNonNull(constants$392.StartDocW$MH,"StartDocW");
    }
    public static int StartDocW ( Addressable hdc,  Addressable lpdi) {
        var mh$ = StartDocW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpdi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndDoc$MH() {
        return RuntimeHelper.requireNonNull(constants$392.EndDoc$MH,"EndDoc");
    }
    public static int EndDoc ( Addressable hdc) {
        var mh$ = EndDoc$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartPage$MH() {
        return RuntimeHelper.requireNonNull(constants$393.StartPage$MH,"StartPage");
    }
    public static int StartPage ( Addressable hdc) {
        var mh$ = StartPage$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndPage$MH() {
        return RuntimeHelper.requireNonNull(constants$393.EndPage$MH,"EndPage");
    }
    public static int EndPage ( Addressable hdc) {
        var mh$ = EndPage$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AbortDoc$MH() {
        return RuntimeHelper.requireNonNull(constants$393.AbortDoc$MH,"AbortDoc");
    }
    public static int AbortDoc ( Addressable hdc) {
        var mh$ = AbortDoc$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetAbortProc$MH() {
        return RuntimeHelper.requireNonNull(constants$393.SetAbortProc$MH,"SetAbortProc");
    }
    public static int SetAbortProc ( Addressable hdc,  Addressable proc) {
        var mh$ = SetAbortProc$MH();
        try {
            return (int)mh$.invokeExact(hdc, proc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AbortPath$MH() {
        return RuntimeHelper.requireNonNull(constants$393.AbortPath$MH,"AbortPath");
    }
    public static int AbortPath ( Addressable hdc) {
        var mh$ = AbortPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ArcTo$MH() {
        return RuntimeHelper.requireNonNull(constants$393.ArcTo$MH,"ArcTo");
    }
    public static int ArcTo ( Addressable hdc,  int left,  int top,  int right,  int bottom,  int xr1,  int yr1,  int xr2,  int yr2) {
        var mh$ = ArcTo$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom, xr1, yr1, xr2, yr2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginPath$MH() {
        return RuntimeHelper.requireNonNull(constants$394.BeginPath$MH,"BeginPath");
    }
    public static int BeginPath ( Addressable hdc) {
        var mh$ = BeginPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseFigure$MH() {
        return RuntimeHelper.requireNonNull(constants$394.CloseFigure$MH,"CloseFigure");
    }
    public static int CloseFigure ( Addressable hdc) {
        var mh$ = CloseFigure$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndPath$MH() {
        return RuntimeHelper.requireNonNull(constants$394.EndPath$MH,"EndPath");
    }
    public static int EndPath ( Addressable hdc) {
        var mh$ = EndPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillPath$MH() {
        return RuntimeHelper.requireNonNull(constants$394.FillPath$MH,"FillPath");
    }
    public static int FillPath ( Addressable hdc) {
        var mh$ = FillPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlattenPath$MH() {
        return RuntimeHelper.requireNonNull(constants$394.FlattenPath$MH,"FlattenPath");
    }
    public static int FlattenPath ( Addressable hdc) {
        var mh$ = FlattenPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPath$MH() {
        return RuntimeHelper.requireNonNull(constants$394.GetPath$MH,"GetPath");
    }
    public static int GetPath ( Addressable hdc,  Addressable apt,  Addressable aj,  int cpt) {
        var mh$ = GetPath$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, aj, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PathToRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$395.PathToRegion$MH,"PathToRegion");
    }
    public static MemoryAddress PathToRegion ( Addressable hdc) {
        var mh$ = PathToRegion$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyDraw$MH() {
        return RuntimeHelper.requireNonNull(constants$395.PolyDraw$MH,"PolyDraw");
    }
    public static int PolyDraw ( Addressable hdc,  Addressable apt,  Addressable aj,  int cpt) {
        var mh$ = PolyDraw$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, aj, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SelectClipPath$MH() {
        return RuntimeHelper.requireNonNull(constants$395.SelectClipPath$MH,"SelectClipPath");
    }
    public static int SelectClipPath ( Addressable hdc,  int mode) {
        var mh$ = SelectClipPath$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetArcDirection$MH() {
        return RuntimeHelper.requireNonNull(constants$395.SetArcDirection$MH,"SetArcDirection");
    }
    public static int SetArcDirection ( Addressable hdc,  int dir) {
        var mh$ = SetArcDirection$MH();
        try {
            return (int)mh$.invokeExact(hdc, dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMiterLimit$MH() {
        return RuntimeHelper.requireNonNull(constants$395.SetMiterLimit$MH,"SetMiterLimit");
    }
    public static int SetMiterLimit ( Addressable hdc,  float limit,  Addressable old) {
        var mh$ = SetMiterLimit$MH();
        try {
            return (int)mh$.invokeExact(hdc, limit, old);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StrokeAndFillPath$MH() {
        return RuntimeHelper.requireNonNull(constants$395.StrokeAndFillPath$MH,"StrokeAndFillPath");
    }
    public static int StrokeAndFillPath ( Addressable hdc) {
        var mh$ = StrokeAndFillPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StrokePath$MH() {
        return RuntimeHelper.requireNonNull(constants$396.StrokePath$MH,"StrokePath");
    }
    public static int StrokePath ( Addressable hdc) {
        var mh$ = StrokePath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WidenPath$MH() {
        return RuntimeHelper.requireNonNull(constants$396.WidenPath$MH,"WidenPath");
    }
    public static int WidenPath ( Addressable hdc) {
        var mh$ = WidenPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtCreatePen$MH() {
        return RuntimeHelper.requireNonNull(constants$396.ExtCreatePen$MH,"ExtCreatePen");
    }
    public static MemoryAddress ExtCreatePen ( int iPenStyle,  int cWidth,  Addressable plbrush,  int cStyle,  Addressable pstyle) {
        var mh$ = ExtCreatePen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(iPenStyle, cWidth, plbrush, cStyle, pstyle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMiterLimit$MH() {
        return RuntimeHelper.requireNonNull(constants$396.GetMiterLimit$MH,"GetMiterLimit");
    }
    public static int GetMiterLimit ( Addressable hdc,  Addressable plimit) {
        var mh$ = GetMiterLimit$MH();
        try {
            return (int)mh$.invokeExact(hdc, plimit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetArcDirection$MH() {
        return RuntimeHelper.requireNonNull(constants$396.GetArcDirection$MH,"GetArcDirection");
    }
    public static int GetArcDirection ( Addressable hdc) {
        var mh$ = GetArcDirection$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetObjectA$MH() {
        return RuntimeHelper.requireNonNull(constants$396.GetObjectA$MH,"GetObjectA");
    }
    public static int GetObjectA ( Addressable h,  int c,  Addressable pv) {
        var mh$ = GetObjectA$MH();
        try {
            return (int)mh$.invokeExact(h, c, pv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetObjectW$MH() {
        return RuntimeHelper.requireNonNull(constants$397.GetObjectW$MH,"GetObjectW");
    }
    public static int GetObjectW ( Addressable h,  int c,  Addressable pv) {
        var mh$ = GetObjectW$MH();
        try {
            return (int)mh$.invokeExact(h, c, pv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveToEx$MH() {
        return RuntimeHelper.requireNonNull(constants$397.MoveToEx$MH,"MoveToEx");
    }
    public static int MoveToEx ( Addressable hdc,  int x,  int y,  Addressable lppt) {
        var mh$ = MoveToEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextOutA$MH() {
        return RuntimeHelper.requireNonNull(constants$397.TextOutA$MH,"TextOutA");
    }
    public static int TextOutA ( Addressable hdc,  int x,  int y,  Addressable lpString,  int c) {
        var mh$ = TextOutA$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpString, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextOutW$MH() {
        return RuntimeHelper.requireNonNull(constants$397.TextOutW$MH,"TextOutW");
    }
    public static int TextOutW ( Addressable hdc,  int x,  int y,  Addressable lpString,  int c) {
        var mh$ = TextOutW$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpString, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtTextOutA$MH() {
        return RuntimeHelper.requireNonNull(constants$397.ExtTextOutA$MH,"ExtTextOutA");
    }
    public static int ExtTextOutA ( Addressable hdc,  int x,  int y,  int options,  Addressable lprect,  Addressable lpString,  int c,  Addressable lpDx) {
        var mh$ = ExtTextOutA$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, options, lprect, lpString, c, lpDx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtTextOutW$MH() {
        return RuntimeHelper.requireNonNull(constants$397.ExtTextOutW$MH,"ExtTextOutW");
    }
    public static int ExtTextOutW ( Addressable hdc,  int x,  int y,  int options,  Addressable lprect,  Addressable lpString,  int c,  Addressable lpDx) {
        var mh$ = ExtTextOutW$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, options, lprect, lpString, c, lpDx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyTextOutA$MH() {
        return RuntimeHelper.requireNonNull(constants$398.PolyTextOutA$MH,"PolyTextOutA");
    }
    public static int PolyTextOutA ( Addressable hdc,  Addressable ppt,  int nstrings) {
        var mh$ = PolyTextOutA$MH();
        try {
            return (int)mh$.invokeExact(hdc, ppt, nstrings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyTextOutW$MH() {
        return RuntimeHelper.requireNonNull(constants$398.PolyTextOutW$MH,"PolyTextOutW");
    }
    public static int PolyTextOutW ( Addressable hdc,  Addressable ppt,  int nstrings) {
        var mh$ = PolyTextOutW$MH();
        try {
            return (int)mh$.invokeExact(hdc, ppt, nstrings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePolygonRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$398.CreatePolygonRgn$MH,"CreatePolygonRgn");
    }
    public static MemoryAddress CreatePolygonRgn ( Addressable pptl,  int cPoint,  int iMode) {
        var mh$ = CreatePolygonRgn$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pptl, cPoint, iMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DPtoLP$MH() {
        return RuntimeHelper.requireNonNull(constants$398.DPtoLP$MH,"DPtoLP");
    }
    public static int DPtoLP ( Addressable hdc,  Addressable lppt,  int c) {
        var mh$ = DPtoLP$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppt, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LPtoDP$MH() {
        return RuntimeHelper.requireNonNull(constants$398.LPtoDP$MH,"LPtoDP");
    }
    public static int LPtoDP ( Addressable hdc,  Addressable lppt,  int c) {
        var mh$ = LPtoDP$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppt, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Polygon$MH() {
        return RuntimeHelper.requireNonNull(constants$398.Polygon$MH,"Polygon");
    }
    public static int Polygon ( Addressable hdc,  Addressable apt,  int cpt) {
        var mh$ = Polygon$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Polyline$MH() {
        return RuntimeHelper.requireNonNull(constants$399.Polyline$MH,"Polyline");
    }
    public static int Polyline ( Addressable hdc,  Addressable apt,  int cpt) {
        var mh$ = Polyline$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyBezier$MH() {
        return RuntimeHelper.requireNonNull(constants$399.PolyBezier$MH,"PolyBezier");
    }
    public static int PolyBezier ( Addressable hdc,  Addressable apt,  int cpt) {
        var mh$ = PolyBezier$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyBezierTo$MH() {
        return RuntimeHelper.requireNonNull(constants$399.PolyBezierTo$MH,"PolyBezierTo");
    }
    public static int PolyBezierTo ( Addressable hdc,  Addressable apt,  int cpt) {
        var mh$ = PolyBezierTo$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolylineTo$MH() {
        return RuntimeHelper.requireNonNull(constants$399.PolylineTo$MH,"PolylineTo");
    }
    public static int PolylineTo ( Addressable hdc,  Addressable apt,  int cpt) {
        var mh$ = PolylineTo$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetViewportExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$399.SetViewportExtEx$MH,"SetViewportExtEx");
    }
    public static int SetViewportExtEx ( Addressable hdc,  int x,  int y,  Addressable lpsz) {
        var mh$ = SetViewportExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetViewportOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$399.SetViewportOrgEx$MH,"SetViewportOrgEx");
    }
    public static int SetViewportOrgEx ( Addressable hdc,  int x,  int y,  Addressable lppt) {
        var mh$ = SetViewportOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$400.SetWindowExtEx$MH,"SetWindowExtEx");
    }
    public static int SetWindowExtEx ( Addressable hdc,  int x,  int y,  Addressable lpsz) {
        var mh$ = SetWindowExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$400.SetWindowOrgEx$MH,"SetWindowOrgEx");
    }
    public static int SetWindowOrgEx ( Addressable hdc,  int x,  int y,  Addressable lppt) {
        var mh$ = SetWindowOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OffsetViewportOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$400.OffsetViewportOrgEx$MH,"OffsetViewportOrgEx");
    }
    public static int OffsetViewportOrgEx ( Addressable hdc,  int x,  int y,  Addressable lppt) {
        var mh$ = OffsetViewportOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OffsetWindowOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$400.OffsetWindowOrgEx$MH,"OffsetWindowOrgEx");
    }
    public static int OffsetWindowOrgEx ( Addressable hdc,  int x,  int y,  Addressable lppt) {
        var mh$ = OffsetWindowOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScaleViewportExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$400.ScaleViewportExtEx$MH,"ScaleViewportExtEx");
    }
    public static int ScaleViewportExtEx ( Addressable hdc,  int xn,  int dx,  int yn,  int yd,  Addressable lpsz) {
        var mh$ = ScaleViewportExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, xn, dx, yn, yd, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScaleWindowExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$400.ScaleWindowExtEx$MH,"ScaleWindowExtEx");
    }
    public static int ScaleWindowExtEx ( Addressable hdc,  int xn,  int xd,  int yn,  int yd,  Addressable lpsz) {
        var mh$ = ScaleWindowExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, xn, xd, yn, yd, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBitmapDimensionEx$MH() {
        return RuntimeHelper.requireNonNull(constants$401.SetBitmapDimensionEx$MH,"SetBitmapDimensionEx");
    }
    public static int SetBitmapDimensionEx ( Addressable hbm,  int w,  int h,  Addressable lpsz) {
        var mh$ = SetBitmapDimensionEx$MH();
        try {
            return (int)mh$.invokeExact(hbm, w, h, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBrushOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$401.SetBrushOrgEx$MH,"SetBrushOrgEx");
    }
    public static int SetBrushOrgEx ( Addressable hdc,  int x,  int y,  Addressable lppt) {
        var mh$ = SetBrushOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextFaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$401.GetTextFaceA$MH,"GetTextFaceA");
    }
    public static int GetTextFaceA ( Addressable hdc,  int c,  Addressable lpName) {
        var mh$ = GetTextFaceA$MH();
        try {
            return (int)mh$.invokeExact(hdc, c, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextFaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$401.GetTextFaceW$MH,"GetTextFaceW");
    }
    public static int GetTextFaceW ( Addressable hdc,  int c,  Addressable lpName) {
        var mh$ = GetTextFaceW$MH();
        try {
            return (int)mh$.invokeExact(hdc, c, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPKERNINGPAIR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetKerningPairsA$MH() {
        return RuntimeHelper.requireNonNull(constants$401.GetKerningPairsA$MH,"GetKerningPairsA");
    }
    public static int GetKerningPairsA ( Addressable hdc,  int nPairs,  Addressable lpKernPair) {
        var mh$ = GetKerningPairsA$MH();
        try {
            return (int)mh$.invokeExact(hdc, nPairs, lpKernPair);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKerningPairsW$MH() {
        return RuntimeHelper.requireNonNull(constants$401.GetKerningPairsW$MH,"GetKerningPairsW");
    }
    public static int GetKerningPairsW ( Addressable hdc,  int nPairs,  Addressable lpKernPair) {
        var mh$ = GetKerningPairsW$MH();
        try {
            return (int)mh$.invokeExact(hdc, nPairs, lpKernPair);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDCOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$402.GetDCOrgEx$MH,"GetDCOrgEx");
    }
    public static int GetDCOrgEx ( Addressable hdc,  Addressable lppt) {
        var mh$ = GetDCOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FixBrushOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$402.FixBrushOrgEx$MH,"FixBrushOrgEx");
    }
    public static int FixBrushOrgEx ( Addressable hdc,  int x,  int y,  Addressable ptl) {
        var mh$ = FixBrushOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, ptl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnrealizeObject$MH() {
        return RuntimeHelper.requireNonNull(constants$402.UnrealizeObject$MH,"UnrealizeObject");
    }
    public static int UnrealizeObject ( Addressable h) {
        var mh$ = UnrealizeObject$MH();
        try {
            return (int)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$402.GdiFlush$MH,"GdiFlush");
    }
    public static int GdiFlush () {
        var mh$ = GdiFlush$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiSetBatchLimit$MH() {
        return RuntimeHelper.requireNonNull(constants$402.GdiSetBatchLimit$MH,"GdiSetBatchLimit");
    }
    public static int GdiSetBatchLimit ( int dw) {
        var mh$ = GdiSetBatchLimit$MH();
        try {
            return (int)mh$.invokeExact(dw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiGetBatchLimit$MH() {
        return RuntimeHelper.requireNonNull(constants$402.GdiGetBatchLimit$MH,"GdiGetBatchLimit");
    }
    public static int GdiGetBatchLimit () {
        var mh$ = GdiGetBatchLimit$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetICMMode$MH() {
        return RuntimeHelper.requireNonNull(constants$403.SetICMMode$MH,"SetICMMode");
    }
    public static int SetICMMode ( Addressable hdc,  int mode) {
        var mh$ = SetICMMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckColorsInGamut$MH() {
        return RuntimeHelper.requireNonNull(constants$403.CheckColorsInGamut$MH,"CheckColorsInGamut");
    }
    public static int CheckColorsInGamut ( Addressable hdc,  Addressable lpRGBTriple,  Addressable dlpBuffer,  int nCount) {
        var mh$ = CheckColorsInGamut$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpRGBTriple, dlpBuffer, nCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetColorSpace$MH() {
        return RuntimeHelper.requireNonNull(constants$404.GetColorSpace$MH,"GetColorSpace");
    }
    public static MemoryAddress GetColorSpace ( Addressable hdc) {
        var mh$ = GetColorSpace$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogColorSpaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$404.GetLogColorSpaceA$MH,"GetLogColorSpaceA");
    }
    public static int GetLogColorSpaceA ( Addressable hColorSpace,  Addressable lpBuffer,  int nSize) {
        var mh$ = GetLogColorSpaceA$MH();
        try {
            return (int)mh$.invokeExact(hColorSpace, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogColorSpaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$404.GetLogColorSpaceW$MH,"GetLogColorSpaceW");
    }
    public static int GetLogColorSpaceW ( Addressable hColorSpace,  Addressable lpBuffer,  int nSize) {
        var mh$ = GetLogColorSpaceW$MH();
        try {
            return (int)mh$.invokeExact(hColorSpace, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateColorSpaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$404.CreateColorSpaceA$MH,"CreateColorSpaceA");
    }
    public static MemoryAddress CreateColorSpaceA ( Addressable lplcs) {
        var mh$ = CreateColorSpaceA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lplcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateColorSpaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$404.CreateColorSpaceW$MH,"CreateColorSpaceW");
    }
    public static MemoryAddress CreateColorSpaceW ( Addressable lplcs) {
        var mh$ = CreateColorSpaceW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lplcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetColorSpace$MH() {
        return RuntimeHelper.requireNonNull(constants$404.SetColorSpace$MH,"SetColorSpace");
    }
    public static MemoryAddress SetColorSpace ( Addressable hdc,  Addressable hcs) {
        var mh$ = SetColorSpace$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, hcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteColorSpace$MH() {
        return RuntimeHelper.requireNonNull(constants$405.DeleteColorSpace$MH,"DeleteColorSpace");
    }
    public static int DeleteColorSpace ( Addressable hcs) {
        var mh$ = DeleteColorSpace$MH();
        try {
            return (int)mh$.invokeExact(hcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetICMProfileA$MH() {
        return RuntimeHelper.requireNonNull(constants$405.GetICMProfileA$MH,"GetICMProfileA");
    }
    public static int GetICMProfileA ( Addressable hdc,  Addressable pBufSize,  Addressable pszFilename) {
        var mh$ = GetICMProfileA$MH();
        try {
            return (int)mh$.invokeExact(hdc, pBufSize, pszFilename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetICMProfileW$MH() {
        return RuntimeHelper.requireNonNull(constants$405.GetICMProfileW$MH,"GetICMProfileW");
    }
    public static int GetICMProfileW ( Addressable hdc,  Addressable pBufSize,  Addressable pszFilename) {
        var mh$ = GetICMProfileW$MH();
        try {
            return (int)mh$.invokeExact(hdc, pBufSize, pszFilename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetICMProfileA$MH() {
        return RuntimeHelper.requireNonNull(constants$405.SetICMProfileA$MH,"SetICMProfileA");
    }
    public static int SetICMProfileA ( Addressable hdc,  Addressable lpFileName) {
        var mh$ = SetICMProfileA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetICMProfileW$MH() {
        return RuntimeHelper.requireNonNull(constants$405.SetICMProfileW$MH,"SetICMProfileW");
    }
    public static int SetICMProfileW ( Addressable hdc,  Addressable lpFileName) {
        var mh$ = SetICMProfileW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDeviceGammaRamp$MH() {
        return RuntimeHelper.requireNonNull(constants$405.GetDeviceGammaRamp$MH,"GetDeviceGammaRamp");
    }
    public static int GetDeviceGammaRamp ( Addressable hdc,  Addressable lpRamp) {
        var mh$ = GetDeviceGammaRamp$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpRamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDeviceGammaRamp$MH() {
        return RuntimeHelper.requireNonNull(constants$406.SetDeviceGammaRamp$MH,"SetDeviceGammaRamp");
    }
    public static int SetDeviceGammaRamp ( Addressable hdc,  Addressable lpRamp) {
        var mh$ = SetDeviceGammaRamp$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpRamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ColorMatchToTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$406.ColorMatchToTarget$MH,"ColorMatchToTarget");
    }
    public static int ColorMatchToTarget ( Addressable hdc,  Addressable hdcTarget,  int action) {
        var mh$ = ColorMatchToTarget$MH();
        try {
            return (int)mh$.invokeExact(hdc, hdcTarget, action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumICMProfilesA$MH() {
        return RuntimeHelper.requireNonNull(constants$406.EnumICMProfilesA$MH,"EnumICMProfilesA");
    }
    public static int EnumICMProfilesA ( Addressable hdc,  Addressable proc,  long param) {
        var mh$ = EnumICMProfilesA$MH();
        try {
            return (int)mh$.invokeExact(hdc, proc, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumICMProfilesW$MH() {
        return RuntimeHelper.requireNonNull(constants$406.EnumICMProfilesW$MH,"EnumICMProfilesW");
    }
    public static int EnumICMProfilesW ( Addressable hdc,  Addressable proc,  long param) {
        var mh$ = EnumICMProfilesW$MH();
        try {
            return (int)mh$.invokeExact(hdc, proc, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateICMRegKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$406.UpdateICMRegKeyA$MH,"UpdateICMRegKeyA");
    }
    public static int UpdateICMRegKeyA ( int reserved,  Addressable lpszCMID,  Addressable lpszFileName,  int command) {
        var mh$ = UpdateICMRegKeyA$MH();
        try {
            return (int)mh$.invokeExact(reserved, lpszCMID, lpszFileName, command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateICMRegKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$406.UpdateICMRegKeyW$MH,"UpdateICMRegKeyW");
    }
    public static int UpdateICMRegKeyW ( int reserved,  Addressable lpszCMID,  Addressable lpszFileName,  int command) {
        var mh$ = UpdateICMRegKeyW$MH();
        try {
            return (int)mh$.invokeExact(reserved, lpszCMID, lpszFileName, command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ColorCorrectPalette$MH() {
        return RuntimeHelper.requireNonNull(constants$407.ColorCorrectPalette$MH,"ColorCorrectPalette");
    }
    public static int ColorCorrectPalette ( Addressable hdc,  Addressable hPal,  int deFirst,  int num) {
        var mh$ = ColorCorrectPalette$MH();
        try {
            return (int)mh$.invokeExact(hdc, hPal, deFirst, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PEMR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRABORTPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRBEGINPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRENDPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCLOSEFIGURE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRFLATTENPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRWIDENPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETMETARGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSAVEDC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRREALIZEPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSELECTCLIPPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETBKMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETMAPMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETLAYOUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETPOLYFILLMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETROP2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETSTRETCHBLTMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETICMMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETTEXTALIGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETMITERLIMIT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRRESTOREDC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETARCDIRECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETMAPPERFLAGS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETBKCOLOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETTEXTCOLOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSELECTOBJECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRDELETEOBJECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSELECTPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRRESIZEPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETPALETTEENTRIES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETCOLORADJUSTMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRGDICOMMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREOF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRLINETO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRMOVETOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMROFFSETCLIPRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRFILLPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSTROKEANDFILLPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSTROKEPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXCLUDECLIPRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRINTERSECTCLIPRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETVIEWPORTORGEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETWINDOWORGEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETBRUSHORGEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETVIEWPORTEXTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETWINDOWEXTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSCALEVIEWPORTEXTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSCALEWINDOWEXTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETWORLDTRANSFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRMODIFYWORLDTRANSFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETPIXELV = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTFLOODFILL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRELLIPSE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRRECTANGLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRROUNDRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRARC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRARCTO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCHORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPIE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRANGLEARC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYLINE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYBEZIER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYGON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYBEZIERTO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYLINETO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYLINE16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYBEZIER16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYGON16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYBEZIERTO16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYLINETO16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYDRAW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYDRAW16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYPOLYLINE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYPOLYGON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYPOLYLINE16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYPOLYGON16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRINVERTRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPAINTRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRFILLRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRFRAMERGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTSELECTCLIPRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTTEXTOUTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTTEXTOUTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYTEXTOUTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYTEXTOUTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRBITBLT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSTRETCHBLT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRMASKBLT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPLGBLT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETDIBITSTODEVICE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSTRETCHDIBITS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTCREATEFONTINDIRECTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATEPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATEPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTCREATEPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATEBRUSHINDIRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATEMONOBRUSH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATEDIBPATTERNBRUSHPT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRFORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRGLSRECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRGLSBOUNDEDRECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPIXELFORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATECOLORSPACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETCOLORSPACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSELECTCOLORSPACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRDELETECOLORSPACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTESCAPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRDRAWESCAPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRNAMEDESCAPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETICMPROFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETICMPROFILEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETICMPROFILEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATECOLORSPACEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCOLORMATCHTOTARGET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCOLORCORRECTPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRALPHABLEND = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRGRADIENTFILL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRTRANSPARENTBLT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle wglCopyContext$MH() {
        return RuntimeHelper.requireNonNull(constants$407.wglCopyContext$MH,"wglCopyContext");
    }
    public static int wglCopyContext ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = wglCopyContext$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$407.wglCreateContext$MH,"wglCreateContext");
    }
    public static MemoryAddress wglCreateContext ( Addressable x0) {
        var mh$ = wglCreateContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglCreateLayerContext$MH() {
        return RuntimeHelper.requireNonNull(constants$407.wglCreateLayerContext$MH,"wglCreateLayerContext");
    }
    public static MemoryAddress wglCreateLayerContext ( Addressable x0,  int x1) {
        var mh$ = wglCreateLayerContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglDeleteContext$MH() {
        return RuntimeHelper.requireNonNull(constants$407.wglDeleteContext$MH,"wglDeleteContext");
    }
    public static int wglDeleteContext ( Addressable x0) {
        var mh$ = wglDeleteContext$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglGetCurrentContext$MH() {
        return RuntimeHelper.requireNonNull(constants$407.wglGetCurrentContext$MH,"wglGetCurrentContext");
    }
    public static MemoryAddress wglGetCurrentContext () {
        var mh$ = wglGetCurrentContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglGetCurrentDC$MH() {
        return RuntimeHelper.requireNonNull(constants$408.wglGetCurrentDC$MH,"wglGetCurrentDC");
    }
    public static MemoryAddress wglGetCurrentDC () {
        var mh$ = wglGetCurrentDC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglGetProcAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$408.wglGetProcAddress$MH,"wglGetProcAddress");
    }
    public static MemoryAddress wglGetProcAddress ( Addressable x0) {
        var mh$ = wglGetProcAddress$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglMakeCurrent$MH() {
        return RuntimeHelper.requireNonNull(constants$408.wglMakeCurrent$MH,"wglMakeCurrent");
    }
    public static int wglMakeCurrent ( Addressable x0,  Addressable x1) {
        var mh$ = wglMakeCurrent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglShareLists$MH() {
        return RuntimeHelper.requireNonNull(constants$408.wglShareLists$MH,"wglShareLists");
    }
    public static int wglShareLists ( Addressable x0,  Addressable x1) {
        var mh$ = wglShareLists$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglUseFontBitmapsA$MH() {
        return RuntimeHelper.requireNonNull(constants$408.wglUseFontBitmapsA$MH,"wglUseFontBitmapsA");
    }
    public static int wglUseFontBitmapsA ( Addressable x0,  int x1,  int x2,  int x3) {
        var mh$ = wglUseFontBitmapsA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglUseFontBitmapsW$MH() {
        return RuntimeHelper.requireNonNull(constants$408.wglUseFontBitmapsW$MH,"wglUseFontBitmapsW");
    }
    public static int wglUseFontBitmapsW ( Addressable x0,  int x1,  int x2,  int x3) {
        var mh$ = wglUseFontBitmapsW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwapBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$409.SwapBuffers$MH,"SwapBuffers");
    }
    public static int SwapBuffers ( Addressable x0) {
        var mh$ = SwapBuffers$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PPOINTFLOAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGLYPHMETRICSFLOAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGLYPHMETRICSFLOAT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle wglUseFontOutlinesA$MH() {
        return RuntimeHelper.requireNonNull(constants$409.wglUseFontOutlinesA$MH,"wglUseFontOutlinesA");
    }
    public static int wglUseFontOutlinesA ( Addressable x0,  int x1,  int x2,  int x3,  float x4,  float x5,  int x6,  Addressable x7) {
        var mh$ = wglUseFontOutlinesA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglUseFontOutlinesW$MH() {
        return RuntimeHelper.requireNonNull(constants$409.wglUseFontOutlinesW$MH,"wglUseFontOutlinesW");
    }
    public static int wglUseFontOutlinesW ( Addressable x0,  int x1,  int x2,  int x3,  float x4,  float x5,  int x6,  Addressable x7) {
        var mh$ = wglUseFontOutlinesW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PLAYERPLANEDESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLAYERPLANEDESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle wglDescribeLayerPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$409.wglDescribeLayerPlane$MH,"wglDescribeLayerPlane");
    }
    public static int wglDescribeLayerPlane ( Addressable x0,  int x1,  int x2,  int x3,  Addressable x4) {
        var mh$ = wglDescribeLayerPlane$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglSetLayerPaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$409.wglSetLayerPaletteEntries$MH,"wglSetLayerPaletteEntries");
    }
    public static int wglSetLayerPaletteEntries ( Addressable x0,  int x1,  int x2,  int x3,  Addressable x4) {
        var mh$ = wglSetLayerPaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglGetLayerPaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$409.wglGetLayerPaletteEntries$MH,"wglGetLayerPaletteEntries");
    }
    public static int wglGetLayerPaletteEntries ( Addressable x0,  int x1,  int x2,  int x3,  Addressable x4) {
        var mh$ = wglGetLayerPaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglRealizeLayerPalette$MH() {
        return RuntimeHelper.requireNonNull(constants$410.wglRealizeLayerPalette$MH,"wglRealizeLayerPalette");
    }
    public static int wglRealizeLayerPalette ( Addressable x0,  int x1,  int x2) {
        var mh$ = wglRealizeLayerPalette$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglSwapLayerBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$410.wglSwapLayerBuffers$MH,"wglSwapLayerBuffers");
    }
    public static int wglSwapLayerBuffers ( Addressable x0,  int x1) {
        var mh$ = wglSwapLayerBuffers$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PWGLSWAP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWGLSWAP = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle wglSwapMultipleBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$410.wglSwapMultipleBuffers$MH,"wglSwapMultipleBuffers");
    }
    public static int wglSwapMultipleBuffers ( int x0,  Addressable x1) {
        var mh$ = wglSwapMultipleBuffers$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HDWP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMENUTEMPLATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMENUTEMPLATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMENUTEMPLATE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle wvsprintfA$MH() {
        return RuntimeHelper.requireNonNull(constants$418.wvsprintfA$MH,"wvsprintfA");
    }
    public static int wvsprintfA ( Addressable x0,  Addressable x1,  Addressable arglist) {
        var mh$ = wvsprintfA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, arglist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wvsprintfW$MH() {
        return RuntimeHelper.requireNonNull(constants$419.wvsprintfW$MH,"wvsprintfW");
    }
    public static int wvsprintfW ( Addressable x0,  Addressable x1,  Addressable arglist) {
        var mh$ = wvsprintfW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, arglist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wsprintfA$MH() {
        return RuntimeHelper.requireNonNull(constants$419.wsprintfA$MH,"wsprintfA");
    }
    public static int wsprintfA ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = wsprintfA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wsprintfW$MH() {
        return RuntimeHelper.requireNonNull(constants$419.wsprintfW$MH,"wsprintfW");
    }
    public static int wsprintfW ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = wsprintfW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPCBT_CREATEWNDA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCBT_CREATEWNDW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCBT_CREATEWND = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCBTACTIVATESTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWTSSESSION_NOTIFICATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSHELLHOOKINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEVENTMSGMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPEVENTMSGMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEVENTMSGMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEVENTMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPEVENTMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEVENTMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCWPSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPCWPSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCWPSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCWPRETSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPCWPRETSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCWPRETSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPKBDLLHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKBDLLHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMSLLHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMSLLHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEBUGHOOKINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPDEBUGHOOKINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDEBUGHOOKINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMOUSEHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMOUSEHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMOUSEHOOKSTRUCTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMOUSEHOOKSTRUCTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHARDWAREHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHARDWAREHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LoadKeyboardLayoutA$MH() {
        return RuntimeHelper.requireNonNull(constants$419.LoadKeyboardLayoutA$MH,"LoadKeyboardLayoutA");
    }
    public static MemoryAddress LoadKeyboardLayoutA ( Addressable pwszKLID,  int Flags) {
        var mh$ = LoadKeyboardLayoutA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pwszKLID, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadKeyboardLayoutW$MH() {
        return RuntimeHelper.requireNonNull(constants$419.LoadKeyboardLayoutW$MH,"LoadKeyboardLayoutW");
    }
    public static MemoryAddress LoadKeyboardLayoutW ( Addressable pwszKLID,  int Flags) {
        var mh$ = LoadKeyboardLayoutW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pwszKLID, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ActivateKeyboardLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$419.ActivateKeyboardLayout$MH,"ActivateKeyboardLayout");
    }
    public static MemoryAddress ActivateKeyboardLayout ( Addressable hkl,  int Flags) {
        var mh$ = ActivateKeyboardLayout$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hkl, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ToUnicodeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$420.ToUnicodeEx$MH,"ToUnicodeEx");
    }
    public static int ToUnicodeEx ( int wVirtKey,  int wScanCode,  Addressable lpKeyState,  Addressable pwszBuff,  int cchBuff,  int wFlags,  Addressable dwhkl) {
        var mh$ = ToUnicodeEx$MH();
        try {
            return (int)mh$.invokeExact(wVirtKey, wScanCode, lpKeyState, pwszBuff, cchBuff, wFlags, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadKeyboardLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$420.UnloadKeyboardLayout$MH,"UnloadKeyboardLayout");
    }
    public static int UnloadKeyboardLayout ( Addressable hkl) {
        var mh$ = UnloadKeyboardLayout$MH();
        try {
            return (int)mh$.invokeExact(hkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardLayoutNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$420.GetKeyboardLayoutNameA$MH,"GetKeyboardLayoutNameA");
    }
    public static int GetKeyboardLayoutNameA ( Addressable pwszKLID) {
        var mh$ = GetKeyboardLayoutNameA$MH();
        try {
            return (int)mh$.invokeExact(pwszKLID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardLayoutNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$420.GetKeyboardLayoutNameW$MH,"GetKeyboardLayoutNameW");
    }
    public static int GetKeyboardLayoutNameW ( Addressable pwszKLID) {
        var mh$ = GetKeyboardLayoutNameW$MH();
        try {
            return (int)mh$.invokeExact(pwszKLID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardLayoutList$MH() {
        return RuntimeHelper.requireNonNull(constants$420.GetKeyboardLayoutList$MH,"GetKeyboardLayoutList");
    }
    public static int GetKeyboardLayoutList ( int nBuff,  Addressable lpList) {
        var mh$ = GetKeyboardLayoutList$MH();
        try {
            return (int)mh$.invokeExact(nBuff, lpList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$420.GetKeyboardLayout$MH,"GetKeyboardLayout");
    }
    public static MemoryAddress GetKeyboardLayout ( int idThread) {
        var mh$ = GetKeyboardLayout$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(idThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMOUSEMOVEPOINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMOUSEMOVEPOINT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetMouseMovePointsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$421.GetMouseMovePointsEx$MH,"GetMouseMovePointsEx");
    }
    public static int GetMouseMovePointsEx ( int cbSize,  Addressable lppt,  Addressable lpptBuf,  int nBufPoints,  int resolution) {
        var mh$ = GetMouseMovePointsEx$MH();
        try {
            return (int)mh$.invokeExact(cbSize, lppt, lpptBuf, nBufPoints, resolution);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDesktopA$MH() {
        return RuntimeHelper.requireNonNull(constants$421.CreateDesktopA$MH,"CreateDesktopA");
    }
    public static MemoryAddress CreateDesktopA ( Addressable lpszDesktop,  Addressable lpszDevice,  Addressable pDevmode,  int dwFlags,  int dwDesiredAccess,  Addressable lpsa) {
        var mh$ = CreateDesktopA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDesktopW$MH() {
        return RuntimeHelper.requireNonNull(constants$421.CreateDesktopW$MH,"CreateDesktopW");
    }
    public static MemoryAddress CreateDesktopW ( Addressable lpszDesktop,  Addressable lpszDevice,  Addressable pDevmode,  int dwFlags,  int dwDesiredAccess,  Addressable lpsa) {
        var mh$ = CreateDesktopW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDesktopExA$MH() {
        return RuntimeHelper.requireNonNull(constants$421.CreateDesktopExA$MH,"CreateDesktopExA");
    }
    public static MemoryAddress CreateDesktopExA ( Addressable lpszDesktop,  Addressable lpszDevice,  Addressable pDevmode,  int dwFlags,  int dwDesiredAccess,  Addressable lpsa,  int ulHeapSize,  Addressable pvoid) {
        var mh$ = CreateDesktopExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa, ulHeapSize, pvoid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDesktopExW$MH() {
        return RuntimeHelper.requireNonNull(constants$421.CreateDesktopExW$MH,"CreateDesktopExW");
    }
    public static MemoryAddress CreateDesktopExW ( Addressable lpszDesktop,  Addressable lpszDevice,  Addressable pDevmode,  int dwFlags,  int dwDesiredAccess,  Addressable lpsa,  int ulHeapSize,  Addressable pvoid) {
        var mh$ = CreateDesktopExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa, ulHeapSize, pvoid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenDesktopA$MH() {
        return RuntimeHelper.requireNonNull(constants$421.OpenDesktopA$MH,"OpenDesktopA");
    }
    public static MemoryAddress OpenDesktopA ( Addressable lpszDesktop,  int dwFlags,  int fInherit,  int dwDesiredAccess) {
        var mh$ = OpenDesktopA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszDesktop, dwFlags, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenDesktopW$MH() {
        return RuntimeHelper.requireNonNull(constants$422.OpenDesktopW$MH,"OpenDesktopW");
    }
    public static MemoryAddress OpenDesktopW ( Addressable lpszDesktop,  int dwFlags,  int fInherit,  int dwDesiredAccess) {
        var mh$ = OpenDesktopW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszDesktop, dwFlags, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenInputDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$422.OpenInputDesktop$MH,"OpenInputDesktop");
    }
    public static MemoryAddress OpenInputDesktop ( int dwFlags,  int fInherit,  int dwDesiredAccess) {
        var mh$ = OpenInputDesktop$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwFlags, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDesktopsA$MH() {
        return RuntimeHelper.requireNonNull(constants$422.EnumDesktopsA$MH,"EnumDesktopsA");
    }
    public static int EnumDesktopsA ( Addressable hwinsta,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumDesktopsA$MH();
        try {
            return (int)mh$.invokeExact(hwinsta, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDesktopsW$MH() {
        return RuntimeHelper.requireNonNull(constants$422.EnumDesktopsW$MH,"EnumDesktopsW");
    }
    public static int EnumDesktopsW ( Addressable hwinsta,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumDesktopsW$MH();
        try {
            return (int)mh$.invokeExact(hwinsta, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDesktopWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$422.EnumDesktopWindows$MH,"EnumDesktopWindows");
    }
    public static int EnumDesktopWindows ( Addressable hDesktop,  Addressable lpfn,  long lParam) {
        var mh$ = EnumDesktopWindows$MH();
        try {
            return (int)mh$.invokeExact(hDesktop, lpfn, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwitchDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$422.SwitchDesktop$MH,"SwitchDesktop");
    }
    public static int SwitchDesktop ( Addressable hDesktop) {
        var mh$ = SwitchDesktop$MH();
        try {
            return (int)mh$.invokeExact(hDesktop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$423.SetThreadDesktop$MH,"SetThreadDesktop");
    }
    public static int SetThreadDesktop ( Addressable hDesktop) {
        var mh$ = SetThreadDesktop$MH();
        try {
            return (int)mh$.invokeExact(hDesktop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$423.CloseDesktop$MH,"CloseDesktop");
    }
    public static int CloseDesktop ( Addressable hDesktop) {
        var mh$ = CloseDesktop$MH();
        try {
            return (int)mh$.invokeExact(hDesktop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$423.GetThreadDesktop$MH,"GetThreadDesktop");
    }
    public static MemoryAddress GetThreadDesktop ( int dwThreadId) {
        var mh$ = GetThreadDesktop$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWindowStationA$MH() {
        return RuntimeHelper.requireNonNull(constants$423.CreateWindowStationA$MH,"CreateWindowStationA");
    }
    public static MemoryAddress CreateWindowStationA ( Addressable lpwinsta,  int dwFlags,  int dwDesiredAccess,  Addressable lpsa) {
        var mh$ = CreateWindowStationA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpwinsta, dwFlags, dwDesiredAccess, lpsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWindowStationW$MH() {
        return RuntimeHelper.requireNonNull(constants$423.CreateWindowStationW$MH,"CreateWindowStationW");
    }
    public static MemoryAddress CreateWindowStationW ( Addressable lpwinsta,  int dwFlags,  int dwDesiredAccess,  Addressable lpsa) {
        var mh$ = CreateWindowStationW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpwinsta, dwFlags, dwDesiredAccess, lpsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenWindowStationA$MH() {
        return RuntimeHelper.requireNonNull(constants$423.OpenWindowStationA$MH,"OpenWindowStationA");
    }
    public static MemoryAddress OpenWindowStationA ( Addressable lpszWinSta,  int fInherit,  int dwDesiredAccess) {
        var mh$ = OpenWindowStationA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszWinSta, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenWindowStationW$MH() {
        return RuntimeHelper.requireNonNull(constants$424.OpenWindowStationW$MH,"OpenWindowStationW");
    }
    public static MemoryAddress OpenWindowStationW ( Addressable lpszWinSta,  int fInherit,  int dwDesiredAccess) {
        var mh$ = OpenWindowStationW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszWinSta, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumWindowStationsA$MH() {
        return RuntimeHelper.requireNonNull(constants$424.EnumWindowStationsA$MH,"EnumWindowStationsA");
    }
    public static int EnumWindowStationsA ( Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumWindowStationsA$MH();
        try {
            return (int)mh$.invokeExact(lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumWindowStationsW$MH() {
        return RuntimeHelper.requireNonNull(constants$424.EnumWindowStationsW$MH,"EnumWindowStationsW");
    }
    public static int EnumWindowStationsW ( Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumWindowStationsW$MH();
        try {
            return (int)mh$.invokeExact(lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseWindowStation$MH() {
        return RuntimeHelper.requireNonNull(constants$424.CloseWindowStation$MH,"CloseWindowStation");
    }
    public static int CloseWindowStation ( Addressable hWinSta) {
        var mh$ = CloseWindowStation$MH();
        try {
            return (int)mh$.invokeExact(hWinSta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessWindowStation$MH() {
        return RuntimeHelper.requireNonNull(constants$424.SetProcessWindowStation$MH,"SetProcessWindowStation");
    }
    public static int SetProcessWindowStation ( Addressable hWinSta) {
        var mh$ = SetProcessWindowStation$MH();
        try {
            return (int)mh$.invokeExact(hWinSta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessWindowStation$MH() {
        return RuntimeHelper.requireNonNull(constants$424.GetProcessWindowStation$MH,"GetProcessWindowStation");
    }
    public static MemoryAddress GetProcessWindowStation () {
        var mh$ = GetProcessWindowStation$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$425.SetUserObjectSecurity$MH,"SetUserObjectSecurity");
    }
    public static int SetUserObjectSecurity ( Addressable hObj,  Addressable pSIRequested,  Addressable pSID) {
        var mh$ = SetUserObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(hObj, pSIRequested, pSID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$425.GetUserObjectSecurity$MH,"GetUserObjectSecurity");
    }
    public static int GetUserObjectSecurity ( Addressable hObj,  Addressable pSIRequested,  Addressable pSID,  int nLength,  Addressable lpnLengthNeeded) {
        var mh$ = GetUserObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(hObj, pSIRequested, pSID, nLength, lpnLengthNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PUSEROBJECTFLAGS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetUserObjectInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$425.GetUserObjectInformationA$MH,"GetUserObjectInformationA");
    }
    public static int GetUserObjectInformationA ( Addressable hObj,  int nIndex,  Addressable pvInfo,  int nLength,  Addressable lpnLengthNeeded) {
        var mh$ = GetUserObjectInformationA$MH();
        try {
            return (int)mh$.invokeExact(hObj, nIndex, pvInfo, nLength, lpnLengthNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserObjectInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$425.GetUserObjectInformationW$MH,"GetUserObjectInformationW");
    }
    public static int GetUserObjectInformationW ( Addressable hObj,  int nIndex,  Addressable pvInfo,  int nLength,  Addressable lpnLengthNeeded) {
        var mh$ = GetUserObjectInformationW$MH();
        try {
            return (int)mh$.invokeExact(hObj, nIndex, pvInfo, nLength, lpnLengthNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserObjectInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$425.SetUserObjectInformationA$MH,"SetUserObjectInformationA");
    }
    public static int SetUserObjectInformationA ( Addressable hObj,  int nIndex,  Addressable pvInfo,  int nLength) {
        var mh$ = SetUserObjectInformationA$MH();
        try {
            return (int)mh$.invokeExact(hObj, nIndex, pvInfo, nLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserObjectInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$425.SetUserObjectInformationW$MH,"SetUserObjectInformationW");
    }
    public static int SetUserObjectInformationW ( Addressable hObj,  int nIndex,  Addressable pvInfo,  int nLength) {
        var mh$ = SetUserObjectInformationW$MH();
        try {
            return (int)mh$.invokeExact(hObj, nIndex, pvInfo, nLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PWNDCLASSEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWNDCLASSEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWNDCLASSEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWNDCLASSEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWNDCLASSEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWNDCLASSEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWNDCLASSEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWNDCLASSEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWNDCLASSEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWNDCLASSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWNDCLASSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWNDCLASSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWNDCLASSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWNDCLASSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWNDCLASSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWNDCLASS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWNDCLASS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWNDCLASS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle IsHungAppWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$426.IsHungAppWindow$MH,"IsHungAppWindow");
    }
    public static int IsHungAppWindow ( Addressable hwnd) {
        var mh$ = IsHungAppWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisableProcessWindowsGhosting$MH() {
        return RuntimeHelper.requireNonNull(constants$426.DisableProcessWindowsGhosting$MH,"DisableProcessWindowsGhosting");
    }
    public static void DisableProcessWindowsGhosting () {
        var mh$ = DisableProcessWindowsGhosting$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMINMAXINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMINMAXINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCOPYDATASTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMDINEXTMENU = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMDINEXTMENU = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWERBROADCAST_SETTING = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RegisterWindowMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$426.RegisterWindowMessageA$MH,"RegisterWindowMessageA");
    }
    public static int RegisterWindowMessageA ( Addressable lpString) {
        var mh$ = RegisterWindowMessageA$MH();
        try {
            return (int)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterWindowMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$426.RegisterWindowMessageW$MH,"RegisterWindowMessageW");
    }
    public static int RegisterWindowMessageW ( Addressable lpString) {
        var mh$ = RegisterWindowMessageW$MH();
        try {
            return (int)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPWINDOWPOS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWINDOWPOS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNCCALCSIZE_PARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTRACKMOUSEEVENT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle TrackMouseEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$426.TrackMouseEvent$MH,"TrackMouseEvent");
    }
    public static int TrackMouseEvent ( Addressable lpEventTrack) {
        var mh$ = TrackMouseEvent$MH();
        try {
            return (int)mh$.invokeExact(lpEventTrack);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawEdge$MH() {
        return RuntimeHelper.requireNonNull(constants$426.DrawEdge$MH,"DrawEdge");
    }
    public static int DrawEdge ( Addressable hdc,  Addressable qrc,  int edge,  int grfFlags) {
        var mh$ = DrawEdge$MH();
        try {
            return (int)mh$.invokeExact(hdc, qrc, edge, grfFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawFrameControl$MH() {
        return RuntimeHelper.requireNonNull(constants$427.DrawFrameControl$MH,"DrawFrameControl");
    }
    public static int DrawFrameControl ( Addressable x0,  Addressable x1,  int x2,  int x3) {
        var mh$ = DrawFrameControl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCaption$MH() {
        return RuntimeHelper.requireNonNull(constants$427.DrawCaption$MH,"DrawCaption");
    }
    public static int DrawCaption ( Addressable hwnd,  Addressable hdc,  Addressable lprect,  int flags) {
        var mh$ = DrawCaption$MH();
        try {
            return (int)mh$.invokeExact(hwnd, hdc, lprect, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawAnimatedRects$MH() {
        return RuntimeHelper.requireNonNull(constants$427.DrawAnimatedRects$MH,"DrawAnimatedRects");
    }
    public static int DrawAnimatedRects ( Addressable hwnd,  int idAni,  Addressable lprcFrom,  Addressable lprcTo) {
        var mh$ = DrawAnimatedRects$MH();
        try {
            return (int)mh$.invokeExact(hwnd, idAni, lprcFrom, lprcTo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPACCEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPAINTSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPPAINTSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPAINTSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCREATESTRUCTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCREATESTRUCTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCREATESTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWINDOWPLACEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWINDOWPLACEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNMHDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTYLESTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMEASUREITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMEASUREITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRAWITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRAWITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDELETEITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDELETEITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCOMPAREITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCOMPAREITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$427.GetMessageA$MH,"GetMessageA");
    }
    public static int GetMessageA ( Addressable lpMsg,  Addressable hWnd,  int wMsgFilterMin,  int wMsgFilterMax) {
        var mh$ = GetMessageA$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$427.GetMessageW$MH,"GetMessageW");
    }
    public static int GetMessageW ( Addressable lpMsg,  Addressable hWnd,  int wMsgFilterMin,  int wMsgFilterMax) {
        var mh$ = GetMessageW$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TranslateMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$427.TranslateMessage$MH,"TranslateMessage");
    }
    public static int TranslateMessage ( Addressable lpMsg) {
        var mh$ = TranslateMessage$MH();
        try {
            return (int)mh$.invokeExact(lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DispatchMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$428.DispatchMessageA$MH,"DispatchMessageA");
    }
    public static long DispatchMessageA ( Addressable lpMsg) {
        var mh$ = DispatchMessageA$MH();
        try {
            return (long)mh$.invokeExact(lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DispatchMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$428.DispatchMessageW$MH,"DispatchMessageW");
    }
    public static long DispatchMessageW ( Addressable lpMsg) {
        var mh$ = DispatchMessageW$MH();
        try {
            return (long)mh$.invokeExact(lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMessageQueue$MH() {
        return RuntimeHelper.requireNonNull(constants$428.SetMessageQueue$MH,"SetMessageQueue");
    }
    public static int SetMessageQueue ( int cMessagesMax) {
        var mh$ = SetMessageQueue$MH();
        try {
            return (int)mh$.invokeExact(cMessagesMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$428.PeekMessageA$MH,"PeekMessageA");
    }
    public static int PeekMessageA ( Addressable lpMsg,  Addressable hWnd,  int wMsgFilterMin,  int wMsgFilterMax,  int wRemoveMsg) {
        var mh$ = PeekMessageA$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$428.PeekMessageW$MH,"PeekMessageW");
    }
    public static int PeekMessageW ( Addressable lpMsg,  Addressable hWnd,  int wMsgFilterMin,  int wMsgFilterMax,  int wRemoveMsg) {
        var mh$ = PeekMessageW$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterHotKey$MH() {
        return RuntimeHelper.requireNonNull(constants$428.RegisterHotKey$MH,"RegisterHotKey");
    }
    public static int RegisterHotKey ( Addressable hWnd,  int id,  int fsModifiers,  int vk) {
        var mh$ = RegisterHotKey$MH();
        try {
            return (int)mh$.invokeExact(hWnd, id, fsModifiers, vk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterHotKey$MH() {
        return RuntimeHelper.requireNonNull(constants$429.UnregisterHotKey$MH,"UnregisterHotKey");
    }
    public static int UnregisterHotKey ( Addressable hWnd,  int id) {
        var mh$ = UnregisterHotKey$MH();
        try {
            return (int)mh$.invokeExact(hWnd, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExitWindowsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$429.ExitWindowsEx$MH,"ExitWindowsEx");
    }
    public static int ExitWindowsEx ( int uFlags,  int dwReason) {
        var mh$ = ExitWindowsEx$MH();
        try {
            return (int)mh$.invokeExact(uFlags, dwReason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwapMouseButton$MH() {
        return RuntimeHelper.requireNonNull(constants$429.SwapMouseButton$MH,"SwapMouseButton");
    }
    public static int SwapMouseButton ( int fSwap) {
        var mh$ = SwapMouseButton$MH();
        try {
            return (int)mh$.invokeExact(fSwap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMessagePos$MH() {
        return RuntimeHelper.requireNonNull(constants$429.GetMessagePos$MH,"GetMessagePos");
    }
    public static int GetMessagePos () {
        var mh$ = GetMessagePos$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMessageTime$MH() {
        return RuntimeHelper.requireNonNull(constants$429.GetMessageTime$MH,"GetMessageTime");
    }
    public static int GetMessageTime () {
        var mh$ = GetMessageTime$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMessageExtraInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$429.GetMessageExtraInfo$MH,"GetMessageExtraInfo");
    }
    public static long GetMessageExtraInfo () {
        var mh$ = GetMessageExtraInfo$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUnpredictedMessagePos$MH() {
        return RuntimeHelper.requireNonNull(constants$430.GetUnpredictedMessagePos$MH,"GetUnpredictedMessagePos");
    }
    public static int GetUnpredictedMessagePos () {
        var mh$ = GetUnpredictedMessagePos$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWow64Message$MH() {
        return RuntimeHelper.requireNonNull(constants$430.IsWow64Message$MH,"IsWow64Message");
    }
    public static int IsWow64Message () {
        var mh$ = IsWow64Message$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMessageExtraInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$430.SetMessageExtraInfo$MH,"SetMessageExtraInfo");
    }
    public static long SetMessageExtraInfo ( long lParam) {
        var mh$ = SetMessageExtraInfo$MH();
        try {
            return (long)mh$.invokeExact(lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$430.SendMessageA$MH,"SendMessageA");
    }
    public static long SendMessageA ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = SendMessageA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$430.SendMessageW$MH,"SendMessageW");
    }
    public static long SendMessageW ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = SendMessageW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageTimeoutA$MH() {
        return RuntimeHelper.requireNonNull(constants$430.SendMessageTimeoutA$MH,"SendMessageTimeoutA");
    }
    public static long SendMessageTimeoutA ( Addressable hWnd,  int Msg,  long wParam,  long lParam,  int fuFlags,  int uTimeout,  Addressable lpdwResult) {
        var mh$ = SendMessageTimeoutA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam, fuFlags, uTimeout, lpdwResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageTimeoutW$MH() {
        return RuntimeHelper.requireNonNull(constants$431.SendMessageTimeoutW$MH,"SendMessageTimeoutW");
    }
    public static long SendMessageTimeoutW ( Addressable hWnd,  int Msg,  long wParam,  long lParam,  int fuFlags,  int uTimeout,  Addressable lpdwResult) {
        var mh$ = SendMessageTimeoutW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam, fuFlags, uTimeout, lpdwResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendNotifyMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$431.SendNotifyMessageA$MH,"SendNotifyMessageA");
    }
    public static int SendNotifyMessageA ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = SendNotifyMessageA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendNotifyMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$431.SendNotifyMessageW$MH,"SendNotifyMessageW");
    }
    public static int SendNotifyMessageW ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = SendNotifyMessageW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageCallbackA$MH() {
        return RuntimeHelper.requireNonNull(constants$431.SendMessageCallbackA$MH,"SendMessageCallbackA");
    }
    public static int SendMessageCallbackA ( Addressable hWnd,  int Msg,  long wParam,  long lParam,  Addressable lpResultCallBack,  long dwData) {
        var mh$ = SendMessageCallbackA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam, lpResultCallBack, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageCallbackW$MH() {
        return RuntimeHelper.requireNonNull(constants$431.SendMessageCallbackW$MH,"SendMessageCallbackW");
    }
    public static int SendMessageCallbackW ( Addressable hWnd,  int Msg,  long wParam,  long lParam,  Addressable lpResultCallBack,  long dwData) {
        var mh$ = SendMessageCallbackW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam, lpResultCallBack, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PBSMINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle BroadcastSystemMessageExA$MH() {
        return RuntimeHelper.requireNonNull(constants$431.BroadcastSystemMessageExA$MH,"BroadcastSystemMessageExA");
    }
    public static int BroadcastSystemMessageExA ( int flags,  Addressable lpInfo,  int Msg,  long wParam,  long lParam,  Addressable pbsmInfo) {
        var mh$ = BroadcastSystemMessageExA$MH();
        try {
            return (int)mh$.invokeExact(flags, lpInfo, Msg, wParam, lParam, pbsmInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BroadcastSystemMessageExW$MH() {
        return RuntimeHelper.requireNonNull(constants$432.BroadcastSystemMessageExW$MH,"BroadcastSystemMessageExW");
    }
    public static int BroadcastSystemMessageExW ( int flags,  Addressable lpInfo,  int Msg,  long wParam,  long lParam,  Addressable pbsmInfo) {
        var mh$ = BroadcastSystemMessageExW$MH();
        try {
            return (int)mh$.invokeExact(flags, lpInfo, Msg, wParam, lParam, pbsmInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BroadcastSystemMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$432.BroadcastSystemMessageA$MH,"BroadcastSystemMessageA");
    }
    public static int BroadcastSystemMessageA ( int flags,  Addressable lpInfo,  int Msg,  long wParam,  long lParam) {
        var mh$ = BroadcastSystemMessageA$MH();
        try {
            return (int)mh$.invokeExact(flags, lpInfo, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BroadcastSystemMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$432.BroadcastSystemMessageW$MH,"BroadcastSystemMessageW");
    }
    public static int BroadcastSystemMessageW ( int flags,  Addressable lpInfo,  int Msg,  long wParam,  long lParam) {
        var mh$ = BroadcastSystemMessageW$MH();
        try {
            return (int)mh$.invokeExact(flags, lpInfo, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HDEVNOTIFY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHDEVNOTIFY = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RegisterDeviceNotificationA$MH() {
        return RuntimeHelper.requireNonNull(constants$432.RegisterDeviceNotificationA$MH,"RegisterDeviceNotificationA");
    }
    public static MemoryAddress RegisterDeviceNotificationA ( Addressable hRecipient,  Addressable NotificationFilter,  int Flags) {
        var mh$ = RegisterDeviceNotificationA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hRecipient, NotificationFilter, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterDeviceNotificationW$MH() {
        return RuntimeHelper.requireNonNull(constants$432.RegisterDeviceNotificationW$MH,"RegisterDeviceNotificationW");
    }
    public static MemoryAddress RegisterDeviceNotificationW ( Addressable hRecipient,  Addressable NotificationFilter,  int Flags) {
        var mh$ = RegisterDeviceNotificationW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hRecipient, NotificationFilter, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterDeviceNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$432.UnregisterDeviceNotification$MH,"UnregisterDeviceNotification");
    }
    public static int UnregisterDeviceNotification ( Addressable Handle) {
        var mh$ = UnregisterDeviceNotification$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HPOWERNOTIFY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHPOWERNOTIFY = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RegisterPowerSettingNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$433.RegisterPowerSettingNotification$MH,"RegisterPowerSettingNotification");
    }
    public static MemoryAddress RegisterPowerSettingNotification ( Addressable hRecipient,  Addressable PowerSettingGuid,  int Flags) {
        var mh$ = RegisterPowerSettingNotification$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hRecipient, PowerSettingGuid, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterPowerSettingNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$433.UnregisterPowerSettingNotification$MH,"UnregisterPowerSettingNotification");
    }
    public static int UnregisterPowerSettingNotification ( Addressable Handle) {
        var mh$ = UnregisterPowerSettingNotification$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterSuspendResumeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$433.RegisterSuspendResumeNotification$MH,"RegisterSuspendResumeNotification");
    }
    public static MemoryAddress RegisterSuspendResumeNotification ( Addressable hRecipient,  int Flags) {
        var mh$ = RegisterSuspendResumeNotification$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hRecipient, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterSuspendResumeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$433.UnregisterSuspendResumeNotification$MH,"UnregisterSuspendResumeNotification");
    }
    public static int UnregisterSuspendResumeNotification ( Addressable Handle) {
        var mh$ = UnregisterSuspendResumeNotification$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$433.PostMessageA$MH,"PostMessageA");
    }
    public static int PostMessageA ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = PostMessageA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$433.PostMessageW$MH,"PostMessageW");
    }
    public static int PostMessageW ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = PostMessageW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostThreadMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$434.PostThreadMessageA$MH,"PostThreadMessageA");
    }
    public static int PostThreadMessageA ( int idThread,  int Msg,  long wParam,  long lParam) {
        var mh$ = PostThreadMessageA$MH();
        try {
            return (int)mh$.invokeExact(idThread, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostThreadMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$434.PostThreadMessageW$MH,"PostThreadMessageW");
    }
    public static int PostThreadMessageW ( int idThread,  int Msg,  long wParam,  long lParam) {
        var mh$ = PostThreadMessageW$MH();
        try {
            return (int)mh$.invokeExact(idThread, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AttachThreadInput$MH() {
        return RuntimeHelper.requireNonNull(constants$434.AttachThreadInput$MH,"AttachThreadInput");
    }
    public static int AttachThreadInput ( int idAttach,  int idAttachTo,  int fAttach) {
        var mh$ = AttachThreadInput$MH();
        try {
            return (int)mh$.invokeExact(idAttach, idAttachTo, fAttach);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReplyMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$434.ReplyMessage$MH,"ReplyMessage");
    }
    public static int ReplyMessage ( long lResult) {
        var mh$ = ReplyMessage$MH();
        try {
            return (int)mh$.invokeExact(lResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$434.WaitMessage$MH,"WaitMessage");
    }
    public static int WaitMessage () {
        var mh$ = WaitMessage$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForInputIdle$MH() {
        return RuntimeHelper.requireNonNull(constants$434.WaitForInputIdle$MH,"WaitForInputIdle");
    }
    public static int WaitForInputIdle ( Addressable hProcess,  int dwMilliseconds) {
        var mh$ = WaitForInputIdle$MH();
        try {
            return (int)mh$.invokeExact(hProcess, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefWindowProcA$MH() {
        return RuntimeHelper.requireNonNull(constants$435.DefWindowProcA$MH,"DefWindowProcA");
    }
    public static long DefWindowProcA ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = DefWindowProcA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefWindowProcW$MH() {
        return RuntimeHelper.requireNonNull(constants$435.DefWindowProcW$MH,"DefWindowProcW");
    }
    public static long DefWindowProcW ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = DefWindowProcW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostQuitMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$435.PostQuitMessage$MH,"PostQuitMessage");
    }
    public static void PostQuitMessage ( int nExitCode) {
        var mh$ = PostQuitMessage$MH();
        try {
            mh$.invokeExact(nExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallWindowProcA$MH() {
        return RuntimeHelper.requireNonNull(constants$435.CallWindowProcA$MH,"CallWindowProcA");
    }
    public static long CallWindowProcA ( Addressable lpPrevWndFunc,  Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = CallWindowProcA$MH();
        try {
            return (long)mh$.invokeExact(lpPrevWndFunc, hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallWindowProcW$MH() {
        return RuntimeHelper.requireNonNull(constants$435.CallWindowProcW$MH,"CallWindowProcW");
    }
    public static long CallWindowProcW ( Addressable lpPrevWndFunc,  Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = CallWindowProcW$MH();
        try {
            return (long)mh$.invokeExact(lpPrevWndFunc, hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InSendMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$435.InSendMessage$MH,"InSendMessage");
    }
    public static int InSendMessage () {
        var mh$ = InSendMessage$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InSendMessageEx$MH() {
        return RuntimeHelper.requireNonNull(constants$436.InSendMessageEx$MH,"InSendMessageEx");
    }
    public static int InSendMessageEx ( Addressable lpReserved) {
        var mh$ = InSendMessageEx$MH();
        try {
            return (int)mh$.invokeExact(lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDoubleClickTime$MH() {
        return RuntimeHelper.requireNonNull(constants$436.GetDoubleClickTime$MH,"GetDoubleClickTime");
    }
    public static int GetDoubleClickTime () {
        var mh$ = GetDoubleClickTime$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDoubleClickTime$MH() {
        return RuntimeHelper.requireNonNull(constants$436.SetDoubleClickTime$MH,"SetDoubleClickTime");
    }
    public static int SetDoubleClickTime ( int x0) {
        var mh$ = SetDoubleClickTime$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClassA$MH() {
        return RuntimeHelper.requireNonNull(constants$436.RegisterClassA$MH,"RegisterClassA");
    }
    public static short RegisterClassA ( Addressable lpWndClass) {
        var mh$ = RegisterClassA$MH();
        try {
            return (short)mh$.invokeExact(lpWndClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClassW$MH() {
        return RuntimeHelper.requireNonNull(constants$436.RegisterClassW$MH,"RegisterClassW");
    }
    public static short RegisterClassW ( Addressable lpWndClass) {
        var mh$ = RegisterClassW$MH();
        try {
            return (short)mh$.invokeExact(lpWndClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterClassA$MH() {
        return RuntimeHelper.requireNonNull(constants$436.UnregisterClassA$MH,"UnregisterClassA");
    }
    public static int UnregisterClassA ( Addressable lpClassName,  Addressable hInstance) {
        var mh$ = UnregisterClassA$MH();
        try {
            return (int)mh$.invokeExact(lpClassName, hInstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterClassW$MH() {
        return RuntimeHelper.requireNonNull(constants$437.UnregisterClassW$MH,"UnregisterClassW");
    }
    public static int UnregisterClassW ( Addressable lpClassName,  Addressable hInstance) {
        var mh$ = UnregisterClassW$MH();
        try {
            return (int)mh$.invokeExact(lpClassName, hInstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$437.GetClassInfoA$MH,"GetClassInfoA");
    }
    public static int GetClassInfoA ( Addressable hInstance,  Addressable lpClassName,  Addressable lpWndClass) {
        var mh$ = GetClassInfoA$MH();
        try {
            return (int)mh$.invokeExact(hInstance, lpClassName, lpWndClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$437.GetClassInfoW$MH,"GetClassInfoW");
    }
    public static int GetClassInfoW ( Addressable hInstance,  Addressable lpClassName,  Addressable lpWndClass) {
        var mh$ = GetClassInfoW$MH();
        try {
            return (int)mh$.invokeExact(hInstance, lpClassName, lpWndClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClassExA$MH() {
        return RuntimeHelper.requireNonNull(constants$437.RegisterClassExA$MH,"RegisterClassExA");
    }
    public static short RegisterClassExA ( Addressable x0) {
        var mh$ = RegisterClassExA$MH();
        try {
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClassExW$MH() {
        return RuntimeHelper.requireNonNull(constants$437.RegisterClassExW$MH,"RegisterClassExW");
    }
    public static short RegisterClassExW ( Addressable x0) {
        var mh$ = RegisterClassExW$MH();
        try {
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$437.GetClassInfoExA$MH,"GetClassInfoExA");
    }
    public static int GetClassInfoExA ( Addressable hInstance,  Addressable lpszClass,  Addressable lpwcx) {
        var mh$ = GetClassInfoExA$MH();
        try {
            return (int)mh$.invokeExact(hInstance, lpszClass, lpwcx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$438.GetClassInfoExW$MH,"GetClassInfoExW");
    }
    public static int GetClassInfoExW ( Addressable hInstance,  Addressable lpszClass,  Addressable lpwcx) {
        var mh$ = GetClassInfoExW$MH();
        try {
            return (int)mh$.invokeExact(hInstance, lpszClass, lpwcx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWindowExA$MH() {
        return RuntimeHelper.requireNonNull(constants$438.CreateWindowExA$MH,"CreateWindowExA");
    }
    public static MemoryAddress CreateWindowExA ( int dwExStyle,  Addressable lpClassName,  Addressable lpWindowName,  int dwStyle,  int X,  int Y,  int nWidth,  int nHeight,  Addressable hWndParent,  Addressable hMenu,  Addressable hInstance,  Addressable lpParam) {
        var mh$ = CreateWindowExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwExStyle, lpClassName, lpWindowName, dwStyle, X, Y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWindowExW$MH() {
        return RuntimeHelper.requireNonNull(constants$438.CreateWindowExW$MH,"CreateWindowExW");
    }
    public static MemoryAddress CreateWindowExW ( int dwExStyle,  Addressable lpClassName,  Addressable lpWindowName,  int dwStyle,  int X,  int Y,  int nWidth,  int nHeight,  Addressable hWndParent,  Addressable hMenu,  Addressable hInstance,  Addressable lpParam) {
        var mh$ = CreateWindowExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwExStyle, lpClassName, lpWindowName, dwStyle, X, Y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$438.IsWindow$MH,"IsWindow");
    }
    public static int IsWindow ( Addressable hWnd) {
        var mh$ = IsWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$439.IsMenu$MH,"IsMenu");
    }
    public static int IsMenu ( Addressable hMenu) {
        var mh$ = IsMenu$MH();
        try {
            return (int)mh$.invokeExact(hMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsChild$MH() {
        return RuntimeHelper.requireNonNull(constants$439.IsChild$MH,"IsChild");
    }
    public static int IsChild ( Addressable hWndParent,  Addressable hWnd) {
        var mh$ = IsChild$MH();
        try {
            return (int)mh$.invokeExact(hWndParent, hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$439.DestroyWindow$MH,"DestroyWindow");
    }
    public static int DestroyWindow ( Addressable hWnd) {
        var mh$ = DestroyWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$439.ShowWindow$MH,"ShowWindow");
    }
    public static int ShowWindow ( Addressable hWnd,  int nCmdShow) {
        var mh$ = ShowWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nCmdShow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AnimateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$439.AnimateWindow$MH,"AnimateWindow");
    }
    public static int AnimateWindow ( Addressable hWnd,  int dwTime,  int dwFlags) {
        var mh$ = AnimateWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, dwTime, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateLayeredWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$439.UpdateLayeredWindow$MH,"UpdateLayeredWindow");
    }
    public static int UpdateLayeredWindow ( Addressable hWnd,  Addressable hdcDst,  Addressable pptDst,  Addressable psize,  Addressable hdcSrc,  Addressable pptSrc,  int crKey,  Addressable pblend,  int dwFlags) {
        var mh$ = UpdateLayeredWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hdcDst, pptDst, psize, hdcSrc, pptSrc, crKey, pblend, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PUPDATELAYEREDWINDOWINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle UpdateLayeredWindowIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$440.UpdateLayeredWindowIndirect$MH,"UpdateLayeredWindowIndirect");
    }
    public static int UpdateLayeredWindowIndirect ( Addressable hWnd,  Addressable pULWInfo) {
        var mh$ = UpdateLayeredWindowIndirect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, pULWInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLayeredWindowAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$440.GetLayeredWindowAttributes$MH,"GetLayeredWindowAttributes");
    }
    public static int GetLayeredWindowAttributes ( Addressable hwnd,  Addressable pcrKey,  Addressable pbAlpha,  Addressable pdwFlags) {
        var mh$ = GetLayeredWindowAttributes$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pcrKey, pbAlpha, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrintWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$440.PrintWindow$MH,"PrintWindow");
    }
    public static int PrintWindow ( Addressable hwnd,  Addressable hdcBlt,  int nFlags) {
        var mh$ = PrintWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd, hdcBlt, nFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLayeredWindowAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$440.SetLayeredWindowAttributes$MH,"SetLayeredWindowAttributes");
    }
    public static int SetLayeredWindowAttributes ( Addressable hwnd,  int crKey,  byte bAlpha,  int dwFlags) {
        var mh$ = SetLayeredWindowAttributes$MH();
        try {
            return (int)mh$.invokeExact(hwnd, crKey, bAlpha, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowWindowAsync$MH() {
        return RuntimeHelper.requireNonNull(constants$440.ShowWindowAsync$MH,"ShowWindowAsync");
    }
    public static int ShowWindowAsync ( Addressable hWnd,  int nCmdShow) {
        var mh$ = ShowWindowAsync$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nCmdShow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlashWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$440.FlashWindow$MH,"FlashWindow");
    }
    public static int FlashWindow ( Addressable hWnd,  int bInvert) {
        var mh$ = FlashWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, bInvert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PFLASHWINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle FlashWindowEx$MH() {
        return RuntimeHelper.requireNonNull(constants$441.FlashWindowEx$MH,"FlashWindowEx");
    }
    public static int FlashWindowEx ( Addressable pfwi) {
        var mh$ = FlashWindowEx$MH();
        try {
            return (int)mh$.invokeExact(pfwi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowOwnedPopups$MH() {
        return RuntimeHelper.requireNonNull(constants$441.ShowOwnedPopups$MH,"ShowOwnedPopups");
    }
    public static int ShowOwnedPopups ( Addressable hWnd,  int fShow) {
        var mh$ = ShowOwnedPopups$MH();
        try {
            return (int)mh$.invokeExact(hWnd, fShow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenIcon$MH() {
        return RuntimeHelper.requireNonNull(constants$441.OpenIcon$MH,"OpenIcon");
    }
    public static int OpenIcon ( Addressable hWnd) {
        var mh$ = OpenIcon$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$441.CloseWindow$MH,"CloseWindow");
    }
    public static int CloseWindow ( Addressable hWnd) {
        var mh$ = CloseWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$441.MoveWindow$MH,"MoveWindow");
    }
    public static int MoveWindow ( Addressable hWnd,  int X,  int Y,  int nWidth,  int nHeight,  int bRepaint) {
        var mh$ = MoveWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, X, Y, nWidth, nHeight, bRepaint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$441.SetWindowPos$MH,"SetWindowPos");
    }
    public static int SetWindowPos ( Addressable hWnd,  Addressable hWndInsertAfter,  int X,  int Y,  int cx,  int cy,  int uFlags) {
        var mh$ = SetWindowPos$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hWndInsertAfter, X, Y, cx, cy, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowPlacement$MH() {
        return RuntimeHelper.requireNonNull(constants$442.GetWindowPlacement$MH,"GetWindowPlacement");
    }
    public static int GetWindowPlacement ( Addressable hWnd,  Addressable lpwndpl) {
        var mh$ = GetWindowPlacement$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpwndpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowPlacement$MH() {
        return RuntimeHelper.requireNonNull(constants$442.SetWindowPlacement$MH,"SetWindowPlacement");
    }
    public static int SetWindowPlacement ( Addressable hWnd,  Addressable lpwndpl) {
        var mh$ = SetWindowPlacement$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpwndpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowDisplayAffinity$MH() {
        return RuntimeHelper.requireNonNull(constants$442.GetWindowDisplayAffinity$MH,"GetWindowDisplayAffinity");
    }
    public static int GetWindowDisplayAffinity ( Addressable hWnd,  Addressable pdwAffinity) {
        var mh$ = GetWindowDisplayAffinity$MH();
        try {
            return (int)mh$.invokeExact(hWnd, pdwAffinity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowDisplayAffinity$MH() {
        return RuntimeHelper.requireNonNull(constants$442.SetWindowDisplayAffinity$MH,"SetWindowDisplayAffinity");
    }
    public static int SetWindowDisplayAffinity ( Addressable hWnd,  int dwAffinity) {
        var mh$ = SetWindowDisplayAffinity$MH();
        try {
            return (int)mh$.invokeExact(hWnd, dwAffinity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginDeferWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$442.BeginDeferWindowPos$MH,"BeginDeferWindowPos");
    }
    public static MemoryAddress BeginDeferWindowPos ( int nNumWindows) {
        var mh$ = BeginDeferWindowPos$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(nNumWindows);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeferWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$442.DeferWindowPos$MH,"DeferWindowPos");
    }
    public static MemoryAddress DeferWindowPos ( Addressable hWinPosInfo,  Addressable hWnd,  Addressable hWndInsertAfter,  int x,  int y,  int cx,  int cy,  int uFlags) {
        var mh$ = DeferWindowPos$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWinPosInfo, hWnd, hWndInsertAfter, x, y, cx, cy, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndDeferWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$443.EndDeferWindowPos$MH,"EndDeferWindowPos");
    }
    public static int EndDeferWindowPos ( Addressable hWinPosInfo) {
        var mh$ = EndDeferWindowPos$MH();
        try {
            return (int)mh$.invokeExact(hWinPosInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindowVisible$MH() {
        return RuntimeHelper.requireNonNull(constants$443.IsWindowVisible$MH,"IsWindowVisible");
    }
    public static int IsWindowVisible ( Addressable hWnd) {
        var mh$ = IsWindowVisible$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsIconic$MH() {
        return RuntimeHelper.requireNonNull(constants$443.IsIconic$MH,"IsIconic");
    }
    public static int IsIconic ( Addressable hWnd) {
        var mh$ = IsIconic$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AnyPopup$MH() {
        return RuntimeHelper.requireNonNull(constants$443.AnyPopup$MH,"AnyPopup");
    }
    public static int AnyPopup () {
        var mh$ = AnyPopup$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BringWindowToTop$MH() {
        return RuntimeHelper.requireNonNull(constants$443.BringWindowToTop$MH,"BringWindowToTop");
    }
    public static int BringWindowToTop ( Addressable hWnd) {
        var mh$ = BringWindowToTop$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsZoomed$MH() {
        return RuntimeHelper.requireNonNull(constants$443.IsZoomed$MH,"IsZoomed");
    }
    public static int IsZoomed ( Addressable hWnd) {
        var mh$ = IsZoomed$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPDLGTEMPLATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDLGTEMPLATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDLGTEMPLATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCDLGTEMPLATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCDLGTEMPLATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCDLGTEMPLATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDLGITEMTEMPLATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDLGITEMTEMPLATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDLGITEMTEMPLATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDLGITEMTEMPLATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDLGITEMTEMPLATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDLGITEMTEMPLATE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CreateDialogParamA$MH() {
        return RuntimeHelper.requireNonNull(constants$444.CreateDialogParamA$MH,"CreateDialogParamA");
    }
    public static MemoryAddress CreateDialogParamA ( Addressable hInstance,  Addressable lpTemplateName,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = CreateDialogParamA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDialogParamW$MH() {
        return RuntimeHelper.requireNonNull(constants$444.CreateDialogParamW$MH,"CreateDialogParamW");
    }
    public static MemoryAddress CreateDialogParamW ( Addressable hInstance,  Addressable lpTemplateName,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = CreateDialogParamW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDialogIndirectParamA$MH() {
        return RuntimeHelper.requireNonNull(constants$444.CreateDialogIndirectParamA$MH,"CreateDialogIndirectParamA");
    }
    public static MemoryAddress CreateDialogIndirectParamA ( Addressable hInstance,  Addressable lpTemplate,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = CreateDialogIndirectParamA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpTemplate, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDialogIndirectParamW$MH() {
        return RuntimeHelper.requireNonNull(constants$444.CreateDialogIndirectParamW$MH,"CreateDialogIndirectParamW");
    }
    public static MemoryAddress CreateDialogIndirectParamW ( Addressable hInstance,  Addressable lpTemplate,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = CreateDialogIndirectParamW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpTemplate, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DialogBoxParamA$MH() {
        return RuntimeHelper.requireNonNull(constants$444.DialogBoxParamA$MH,"DialogBoxParamA");
    }
    public static long DialogBoxParamA ( Addressable hInstance,  Addressable lpTemplateName,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = DialogBoxParamA$MH();
        try {
            return (long)mh$.invokeExact(hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DialogBoxParamW$MH() {
        return RuntimeHelper.requireNonNull(constants$444.DialogBoxParamW$MH,"DialogBoxParamW");
    }
    public static long DialogBoxParamW ( Addressable hInstance,  Addressable lpTemplateName,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = DialogBoxParamW$MH();
        try {
            return (long)mh$.invokeExact(hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DialogBoxIndirectParamA$MH() {
        return RuntimeHelper.requireNonNull(constants$445.DialogBoxIndirectParamA$MH,"DialogBoxIndirectParamA");
    }
    public static long DialogBoxIndirectParamA ( Addressable hInstance,  Addressable hDialogTemplate,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = DialogBoxIndirectParamA$MH();
        try {
            return (long)mh$.invokeExact(hInstance, hDialogTemplate, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DialogBoxIndirectParamW$MH() {
        return RuntimeHelper.requireNonNull(constants$445.DialogBoxIndirectParamW$MH,"DialogBoxIndirectParamW");
    }
    public static long DialogBoxIndirectParamW ( Addressable hInstance,  Addressable hDialogTemplate,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = DialogBoxIndirectParamW$MH();
        try {
            return (long)mh$.invokeExact(hInstance, hDialogTemplate, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$445.EndDialog$MH,"EndDialog");
    }
    public static int EndDialog ( Addressable hDlg,  long nResult) {
        var mh$ = EndDialog$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgItem$MH() {
        return RuntimeHelper.requireNonNull(constants$445.GetDlgItem$MH,"GetDlgItem");
    }
    public static MemoryAddress GetDlgItem ( Addressable hDlg,  int nIDDlgItem) {
        var mh$ = GetDlgItem$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hDlg, nIDDlgItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDlgItemInt$MH() {
        return RuntimeHelper.requireNonNull(constants$445.SetDlgItemInt$MH,"SetDlgItemInt");
    }
    public static int SetDlgItemInt ( Addressable hDlg,  int nIDDlgItem,  int uValue,  int bSigned) {
        var mh$ = SetDlgItemInt$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, uValue, bSigned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgItemInt$MH() {
        return RuntimeHelper.requireNonNull(constants$445.GetDlgItemInt$MH,"GetDlgItemInt");
    }
    public static int GetDlgItemInt ( Addressable hDlg,  int nIDDlgItem,  Addressable lpTranslated,  int bSigned) {
        var mh$ = GetDlgItemInt$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpTranslated, bSigned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDlgItemTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$446.SetDlgItemTextA$MH,"SetDlgItemTextA");
    }
    public static int SetDlgItemTextA ( Addressable hDlg,  int nIDDlgItem,  Addressable lpString) {
        var mh$ = SetDlgItemTextA$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDlgItemTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$446.SetDlgItemTextW$MH,"SetDlgItemTextW");
    }
    public static int SetDlgItemTextW ( Addressable hDlg,  int nIDDlgItem,  Addressable lpString) {
        var mh$ = SetDlgItemTextW$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgItemTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$446.GetDlgItemTextA$MH,"GetDlgItemTextA");
    }
    public static int GetDlgItemTextA ( Addressable hDlg,  int nIDDlgItem,  Addressable lpString,  int cchMax) {
        var mh$ = GetDlgItemTextA$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpString, cchMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgItemTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$446.GetDlgItemTextW$MH,"GetDlgItemTextW");
    }
    public static int GetDlgItemTextW ( Addressable hDlg,  int nIDDlgItem,  Addressable lpString,  int cchMax) {
        var mh$ = GetDlgItemTextW$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpString, cchMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckDlgButton$MH() {
        return RuntimeHelper.requireNonNull(constants$446.CheckDlgButton$MH,"CheckDlgButton");
    }
    public static int CheckDlgButton ( Addressable hDlg,  int nIDButton,  int uCheck) {
        var mh$ = CheckDlgButton$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDButton, uCheck);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckRadioButton$MH() {
        return RuntimeHelper.requireNonNull(constants$446.CheckRadioButton$MH,"CheckRadioButton");
    }
    public static int CheckRadioButton ( Addressable hDlg,  int nIDFirstButton,  int nIDLastButton,  int nIDCheckButton) {
        var mh$ = CheckRadioButton$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDFirstButton, nIDLastButton, nIDCheckButton);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsDlgButtonChecked$MH() {
        return RuntimeHelper.requireNonNull(constants$447.IsDlgButtonChecked$MH,"IsDlgButtonChecked");
    }
    public static int IsDlgButtonChecked ( Addressable hDlg,  int nIDButton) {
        var mh$ = IsDlgButtonChecked$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDButton);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendDlgItemMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$447.SendDlgItemMessageA$MH,"SendDlgItemMessageA");
    }
    public static long SendDlgItemMessageA ( Addressable hDlg,  int nIDDlgItem,  int Msg,  long wParam,  long lParam) {
        var mh$ = SendDlgItemMessageA$MH();
        try {
            return (long)mh$.invokeExact(hDlg, nIDDlgItem, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendDlgItemMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$447.SendDlgItemMessageW$MH,"SendDlgItemMessageW");
    }
    public static long SendDlgItemMessageW ( Addressable hDlg,  int nIDDlgItem,  int Msg,  long wParam,  long lParam) {
        var mh$ = SendDlgItemMessageW$MH();
        try {
            return (long)mh$.invokeExact(hDlg, nIDDlgItem, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNextDlgGroupItem$MH() {
        return RuntimeHelper.requireNonNull(constants$447.GetNextDlgGroupItem$MH,"GetNextDlgGroupItem");
    }
    public static MemoryAddress GetNextDlgGroupItem ( Addressable hDlg,  Addressable hCtl,  int bPrevious) {
        var mh$ = GetNextDlgGroupItem$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hDlg, hCtl, bPrevious);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNextDlgTabItem$MH() {
        return RuntimeHelper.requireNonNull(constants$447.GetNextDlgTabItem$MH,"GetNextDlgTabItem");
    }
    public static MemoryAddress GetNextDlgTabItem ( Addressable hDlg,  Addressable hCtl,  int bPrevious) {
        var mh$ = GetNextDlgTabItem$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hDlg, hCtl, bPrevious);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgCtrlID$MH() {
        return RuntimeHelper.requireNonNull(constants$447.GetDlgCtrlID$MH,"GetDlgCtrlID");
    }
    public static int GetDlgCtrlID ( Addressable hWnd) {
        var mh$ = GetDlgCtrlID$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDialogBaseUnits$MH() {
        return RuntimeHelper.requireNonNull(constants$448.GetDialogBaseUnits$MH,"GetDialogBaseUnits");
    }
    public static int GetDialogBaseUnits () {
        var mh$ = GetDialogBaseUnits$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefDlgProcA$MH() {
        return RuntimeHelper.requireNonNull(constants$448.DefDlgProcA$MH,"DefDlgProcA");
    }
    public static long DefDlgProcA ( Addressable hDlg,  int Msg,  long wParam,  long lParam) {
        var mh$ = DefDlgProcA$MH();
        try {
            return (long)mh$.invokeExact(hDlg, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefDlgProcW$MH() {
        return RuntimeHelper.requireNonNull(constants$448.DefDlgProcW$MH,"DefDlgProcW");
    }
    public static long DefDlgProcW ( Addressable hDlg,  int Msg,  long wParam,  long lParam) {
        var mh$ = DefDlgProcW$MH();
        try {
            return (long)mh$.invokeExact(hDlg, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int DCDC_DEFAULT() {
        return (int)0L;
    }
    public static int DCDC_DISABLE_FONT_UPDATE() {
        return (int)1L;
    }
    public static int DCDC_DISABLE_RELAYOUT() {
        return (int)2L;
    }
    public static MethodHandle SetDialogControlDpiChangeBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$448.SetDialogControlDpiChangeBehavior$MH,"SetDialogControlDpiChangeBehavior");
    }
    public static int SetDialogControlDpiChangeBehavior ( Addressable hWnd,  int mask,  int values) {
        var mh$ = SetDialogControlDpiChangeBehavior$MH();
        try {
            return (int)mh$.invokeExact(hWnd, mask, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDialogControlDpiChangeBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$448.GetDialogControlDpiChangeBehavior$MH,"GetDialogControlDpiChangeBehavior");
    }
    public static int GetDialogControlDpiChangeBehavior ( Addressable hWnd) {
        var mh$ = GetDialogControlDpiChangeBehavior$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int DDC_DEFAULT() {
        return (int)0L;
    }
    public static int DDC_DISABLE_ALL() {
        return (int)1L;
    }
    public static int DDC_DISABLE_RESIZE() {
        return (int)2L;
    }
    public static int DDC_DISABLE_CONTROL_RELAYOUT() {
        return (int)4L;
    }
    public static MethodHandle SetDialogDpiChangeBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$448.SetDialogDpiChangeBehavior$MH,"SetDialogDpiChangeBehavior");
    }
    public static int SetDialogDpiChangeBehavior ( Addressable hDlg,  int mask,  int values) {
        var mh$ = SetDialogDpiChangeBehavior$MH();
        try {
            return (int)mh$.invokeExact(hDlg, mask, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDialogDpiChangeBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$449.GetDialogDpiChangeBehavior$MH,"GetDialogDpiChangeBehavior");
    }
    public static int GetDialogDpiChangeBehavior ( Addressable hDlg) {
        var mh$ = GetDialogDpiChangeBehavior$MH();
        try {
            return (int)mh$.invokeExact(hDlg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallMsgFilterA$MH() {
        return RuntimeHelper.requireNonNull(constants$449.CallMsgFilterA$MH,"CallMsgFilterA");
    }
    public static int CallMsgFilterA ( Addressable lpMsg,  int nCode) {
        var mh$ = CallMsgFilterA$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, nCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallMsgFilterW$MH() {
        return RuntimeHelper.requireNonNull(constants$449.CallMsgFilterW$MH,"CallMsgFilterW");
    }
    public static int CallMsgFilterW ( Addressable lpMsg,  int nCode) {
        var mh$ = CallMsgFilterW$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, nCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$449.OpenClipboard$MH,"OpenClipboard");
    }
    public static int OpenClipboard ( Addressable hWndNewOwner) {
        var mh$ = OpenClipboard$MH();
        try {
            return (int)mh$.invokeExact(hWndNewOwner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$449.CloseClipboard$MH,"CloseClipboard");
    }
    public static int CloseClipboard () {
        var mh$ = CloseClipboard$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipboardSequenceNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$449.GetClipboardSequenceNumber$MH,"GetClipboardSequenceNumber");
    }
    public static int GetClipboardSequenceNumber () {
        var mh$ = GetClipboardSequenceNumber$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipboardOwner$MH() {
        return RuntimeHelper.requireNonNull(constants$450.GetClipboardOwner$MH,"GetClipboardOwner");
    }
    public static MemoryAddress GetClipboardOwner () {
        var mh$ = GetClipboardOwner$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetClipboardViewer$MH() {
        return RuntimeHelper.requireNonNull(constants$450.SetClipboardViewer$MH,"SetClipboardViewer");
    }
    public static MemoryAddress SetClipboardViewer ( Addressable hWndNewViewer) {
        var mh$ = SetClipboardViewer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWndNewViewer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipboardViewer$MH() {
        return RuntimeHelper.requireNonNull(constants$450.GetClipboardViewer$MH,"GetClipboardViewer");
    }
    public static MemoryAddress GetClipboardViewer () {
        var mh$ = GetClipboardViewer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeClipboardChain$MH() {
        return RuntimeHelper.requireNonNull(constants$450.ChangeClipboardChain$MH,"ChangeClipboardChain");
    }
    public static int ChangeClipboardChain ( Addressable hWndRemove,  Addressable hWndNewNext) {
        var mh$ = ChangeClipboardChain$MH();
        try {
            return (int)mh$.invokeExact(hWndRemove, hWndNewNext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetClipboardData$MH() {
        return RuntimeHelper.requireNonNull(constants$450.SetClipboardData$MH,"SetClipboardData");
    }
    public static MemoryAddress SetClipboardData ( int uFormat,  Addressable hMem) {
        var mh$ = SetClipboardData$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(uFormat, hMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipboardData$MH() {
        return RuntimeHelper.requireNonNull(constants$450.GetClipboardData$MH,"GetClipboardData");
    }
    public static MemoryAddress GetClipboardData ( int uFormat) {
        var mh$ = GetClipboardData$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(uFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClipboardFormatA$MH() {
        return RuntimeHelper.requireNonNull(constants$451.RegisterClipboardFormatA$MH,"RegisterClipboardFormatA");
    }
    public static int RegisterClipboardFormatA ( Addressable lpszFormat) {
        var mh$ = RegisterClipboardFormatA$MH();
        try {
            return (int)mh$.invokeExact(lpszFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClipboardFormatW$MH() {
        return RuntimeHelper.requireNonNull(constants$451.RegisterClipboardFormatW$MH,"RegisterClipboardFormatW");
    }
    public static int RegisterClipboardFormatW ( Addressable lpszFormat) {
        var mh$ = RegisterClipboardFormatW$MH();
        try {
            return (int)mh$.invokeExact(lpszFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CountClipboardFormats$MH() {
        return RuntimeHelper.requireNonNull(constants$451.CountClipboardFormats$MH,"CountClipboardFormats");
    }
    public static int CountClipboardFormats () {
        var mh$ = CountClipboardFormats$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumClipboardFormats$MH() {
        return RuntimeHelper.requireNonNull(constants$451.EnumClipboardFormats$MH,"EnumClipboardFormats");
    }
    public static int EnumClipboardFormats ( int format) {
        var mh$ = EnumClipboardFormats$MH();
        try {
            return (int)mh$.invokeExact(format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipboardFormatNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$451.GetClipboardFormatNameA$MH,"GetClipboardFormatNameA");
    }
    public static int GetClipboardFormatNameA ( int format,  Addressable lpszFormatName,  int cchMaxCount) {
        var mh$ = GetClipboardFormatNameA$MH();
        try {
            return (int)mh$.invokeExact(format, lpszFormatName, cchMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipboardFormatNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$451.GetClipboardFormatNameW$MH,"GetClipboardFormatNameW");
    }
    public static int GetClipboardFormatNameW ( int format,  Addressable lpszFormatName,  int cchMaxCount) {
        var mh$ = GetClipboardFormatNameW$MH();
        try {
            return (int)mh$.invokeExact(format, lpszFormatName, cchMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EmptyClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$452.EmptyClipboard$MH,"EmptyClipboard");
    }
    public static int EmptyClipboard () {
        var mh$ = EmptyClipboard$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsClipboardFormatAvailable$MH() {
        return RuntimeHelper.requireNonNull(constants$452.IsClipboardFormatAvailable$MH,"IsClipboardFormatAvailable");
    }
    public static int IsClipboardFormatAvailable ( int format) {
        var mh$ = IsClipboardFormatAvailable$MH();
        try {
            return (int)mh$.invokeExact(format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPriorityClipboardFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$452.GetPriorityClipboardFormat$MH,"GetPriorityClipboardFormat");
    }
    public static int GetPriorityClipboardFormat ( Addressable paFormatPriorityList,  int cFormats) {
        var mh$ = GetPriorityClipboardFormat$MH();
        try {
            return (int)mh$.invokeExact(paFormatPriorityList, cFormats);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOpenClipboardWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$452.GetOpenClipboardWindow$MH,"GetOpenClipboardWindow");
    }
    public static MemoryAddress GetOpenClipboardWindow () {
        var mh$ = GetOpenClipboardWindow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddClipboardFormatListener$MH() {
        return RuntimeHelper.requireNonNull(constants$452.AddClipboardFormatListener$MH,"AddClipboardFormatListener");
    }
    public static int AddClipboardFormatListener ( Addressable hwnd) {
        var mh$ = AddClipboardFormatListener$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveClipboardFormatListener$MH() {
        return RuntimeHelper.requireNonNull(constants$452.RemoveClipboardFormatListener$MH,"RemoveClipboardFormatListener");
    }
    public static int RemoveClipboardFormatListener ( Addressable hwnd) {
        var mh$ = RemoveClipboardFormatListener$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUpdatedClipboardFormats$MH() {
        return RuntimeHelper.requireNonNull(constants$453.GetUpdatedClipboardFormats$MH,"GetUpdatedClipboardFormats");
    }
    public static int GetUpdatedClipboardFormats ( Addressable lpuiFormats,  int cFormats,  Addressable pcFormatsOut) {
        var mh$ = GetUpdatedClipboardFormats$MH();
        try {
            return (int)mh$.invokeExact(lpuiFormats, cFormats, pcFormatsOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharToOemA$MH() {
        return RuntimeHelper.requireNonNull(constants$453.CharToOemA$MH,"CharToOemA");
    }
    public static int CharToOemA ( Addressable pSrc,  Addressable pDst) {
        var mh$ = CharToOemA$MH();
        try {
            return (int)mh$.invokeExact(pSrc, pDst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharToOemW$MH() {
        return RuntimeHelper.requireNonNull(constants$453.CharToOemW$MH,"CharToOemW");
    }
    public static int CharToOemW ( Addressable pSrc,  Addressable pDst) {
        var mh$ = CharToOemW$MH();
        try {
            return (int)mh$.invokeExact(pSrc, pDst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OemToCharA$MH() {
        return RuntimeHelper.requireNonNull(constants$453.OemToCharA$MH,"OemToCharA");
    }
    public static int OemToCharA ( Addressable pSrc,  Addressable pDst) {
        var mh$ = OemToCharA$MH();
        try {
            return (int)mh$.invokeExact(pSrc, pDst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OemToCharW$MH() {
        return RuntimeHelper.requireNonNull(constants$453.OemToCharW$MH,"OemToCharW");
    }
    public static int OemToCharW ( Addressable pSrc,  Addressable pDst) {
        var mh$ = OemToCharW$MH();
        try {
            return (int)mh$.invokeExact(pSrc, pDst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharToOemBuffA$MH() {
        return RuntimeHelper.requireNonNull(constants$453.CharToOemBuffA$MH,"CharToOemBuffA");
    }
    public static int CharToOemBuffA ( Addressable lpszSrc,  Addressable lpszDst,  int cchDstLength) {
        var mh$ = CharToOemBuffA$MH();
        try {
            return (int)mh$.invokeExact(lpszSrc, lpszDst, cchDstLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharToOemBuffW$MH() {
        return RuntimeHelper.requireNonNull(constants$454.CharToOemBuffW$MH,"CharToOemBuffW");
    }
    public static int CharToOemBuffW ( Addressable lpszSrc,  Addressable lpszDst,  int cchDstLength) {
        var mh$ = CharToOemBuffW$MH();
        try {
            return (int)mh$.invokeExact(lpszSrc, lpszDst, cchDstLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OemToCharBuffA$MH() {
        return RuntimeHelper.requireNonNull(constants$454.OemToCharBuffA$MH,"OemToCharBuffA");
    }
    public static int OemToCharBuffA ( Addressable lpszSrc,  Addressable lpszDst,  int cchDstLength) {
        var mh$ = OemToCharBuffA$MH();
        try {
            return (int)mh$.invokeExact(lpszSrc, lpszDst, cchDstLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OemToCharBuffW$MH() {
        return RuntimeHelper.requireNonNull(constants$454.OemToCharBuffW$MH,"OemToCharBuffW");
    }
    public static int OemToCharBuffW ( Addressable lpszSrc,  Addressable lpszDst,  int cchDstLength) {
        var mh$ = OemToCharBuffW$MH();
        try {
            return (int)mh$.invokeExact(lpszSrc, lpszDst, cchDstLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharUpperA$MH() {
        return RuntimeHelper.requireNonNull(constants$454.CharUpperA$MH,"CharUpperA");
    }
    public static MemoryAddress CharUpperA ( Addressable lpsz) {
        var mh$ = CharUpperA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharUpperW$MH() {
        return RuntimeHelper.requireNonNull(constants$454.CharUpperW$MH,"CharUpperW");
    }
    public static MemoryAddress CharUpperW ( Addressable lpsz) {
        var mh$ = CharUpperW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharUpperBuffA$MH() {
        return RuntimeHelper.requireNonNull(constants$454.CharUpperBuffA$MH,"CharUpperBuffA");
    }
    public static int CharUpperBuffA ( Addressable lpsz,  int cchLength) {
        var mh$ = CharUpperBuffA$MH();
        try {
            return (int)mh$.invokeExact(lpsz, cchLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharUpperBuffW$MH() {
        return RuntimeHelper.requireNonNull(constants$455.CharUpperBuffW$MH,"CharUpperBuffW");
    }
    public static int CharUpperBuffW ( Addressable lpsz,  int cchLength) {
        var mh$ = CharUpperBuffW$MH();
        try {
            return (int)mh$.invokeExact(lpsz, cchLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharLowerA$MH() {
        return RuntimeHelper.requireNonNull(constants$455.CharLowerA$MH,"CharLowerA");
    }
    public static MemoryAddress CharLowerA ( Addressable lpsz) {
        var mh$ = CharLowerA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharLowerW$MH() {
        return RuntimeHelper.requireNonNull(constants$455.CharLowerW$MH,"CharLowerW");
    }
    public static MemoryAddress CharLowerW ( Addressable lpsz) {
        var mh$ = CharLowerW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharLowerBuffA$MH() {
        return RuntimeHelper.requireNonNull(constants$455.CharLowerBuffA$MH,"CharLowerBuffA");
    }
    public static int CharLowerBuffA ( Addressable lpsz,  int cchLength) {
        var mh$ = CharLowerBuffA$MH();
        try {
            return (int)mh$.invokeExact(lpsz, cchLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharLowerBuffW$MH() {
        return RuntimeHelper.requireNonNull(constants$455.CharLowerBuffW$MH,"CharLowerBuffW");
    }
    public static int CharLowerBuffW ( Addressable lpsz,  int cchLength) {
        var mh$ = CharLowerBuffW$MH();
        try {
            return (int)mh$.invokeExact(lpsz, cchLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharNextA$MH() {
        return RuntimeHelper.requireNonNull(constants$455.CharNextA$MH,"CharNextA");
    }
    public static MemoryAddress CharNextA ( Addressable lpsz) {
        var mh$ = CharNextA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharNextW$MH() {
        return RuntimeHelper.requireNonNull(constants$456.CharNextW$MH,"CharNextW");
    }
    public static MemoryAddress CharNextW ( Addressable lpsz) {
        var mh$ = CharNextW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharPrevA$MH() {
        return RuntimeHelper.requireNonNull(constants$456.CharPrevA$MH,"CharPrevA");
    }
    public static MemoryAddress CharPrevA ( Addressable lpszStart,  Addressable lpszCurrent) {
        var mh$ = CharPrevA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszStart, lpszCurrent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharPrevW$MH() {
        return RuntimeHelper.requireNonNull(constants$456.CharPrevW$MH,"CharPrevW");
    }
    public static MemoryAddress CharPrevW ( Addressable lpszStart,  Addressable lpszCurrent) {
        var mh$ = CharPrevW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszStart, lpszCurrent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharNextExA$MH() {
        return RuntimeHelper.requireNonNull(constants$456.CharNextExA$MH,"CharNextExA");
    }
    public static MemoryAddress CharNextExA ( short CodePage,  Addressable lpCurrentChar,  int dwFlags) {
        var mh$ = CharNextExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(CodePage, lpCurrentChar, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharPrevExA$MH() {
        return RuntimeHelper.requireNonNull(constants$456.CharPrevExA$MH,"CharPrevExA");
    }
    public static MemoryAddress CharPrevExA ( short CodePage,  Addressable lpStart,  Addressable lpCurrentChar,  int dwFlags) {
        var mh$ = CharPrevExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(CodePage, lpStart, lpCurrentChar, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharAlphaA$MH() {
        return RuntimeHelper.requireNonNull(constants$456.IsCharAlphaA$MH,"IsCharAlphaA");
    }
    public static int IsCharAlphaA ( byte ch) {
        var mh$ = IsCharAlphaA$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharAlphaW$MH() {
        return RuntimeHelper.requireNonNull(constants$457.IsCharAlphaW$MH,"IsCharAlphaW");
    }
    public static int IsCharAlphaW ( short ch) {
        var mh$ = IsCharAlphaW$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharAlphaNumericA$MH() {
        return RuntimeHelper.requireNonNull(constants$457.IsCharAlphaNumericA$MH,"IsCharAlphaNumericA");
    }
    public static int IsCharAlphaNumericA ( byte ch) {
        var mh$ = IsCharAlphaNumericA$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharAlphaNumericW$MH() {
        return RuntimeHelper.requireNonNull(constants$457.IsCharAlphaNumericW$MH,"IsCharAlphaNumericW");
    }
    public static int IsCharAlphaNumericW ( short ch) {
        var mh$ = IsCharAlphaNumericW$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharUpperA$MH() {
        return RuntimeHelper.requireNonNull(constants$457.IsCharUpperA$MH,"IsCharUpperA");
    }
    public static int IsCharUpperA ( byte ch) {
        var mh$ = IsCharUpperA$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharUpperW$MH() {
        return RuntimeHelper.requireNonNull(constants$457.IsCharUpperW$MH,"IsCharUpperW");
    }
    public static int IsCharUpperW ( short ch) {
        var mh$ = IsCharUpperW$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharLowerA$MH() {
        return RuntimeHelper.requireNonNull(constants$457.IsCharLowerA$MH,"IsCharLowerA");
    }
    public static int IsCharLowerA ( byte ch) {
        var mh$ = IsCharLowerA$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharLowerW$MH() {
        return RuntimeHelper.requireNonNull(constants$458.IsCharLowerW$MH,"IsCharLowerW");
    }
    public static int IsCharLowerW ( short ch) {
        var mh$ = IsCharLowerW$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$458.SetFocus$MH,"SetFocus");
    }
    public static MemoryAddress SetFocus ( Addressable hWnd) {
        var mh$ = SetFocus$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetActiveWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$458.GetActiveWindow$MH,"GetActiveWindow");
    }
    public static MemoryAddress GetActiveWindow () {
        var mh$ = GetActiveWindow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$458.GetFocus$MH,"GetFocus");
    }
    public static MemoryAddress GetFocus () {
        var mh$ = GetFocus$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKBCodePage$MH() {
        return RuntimeHelper.requireNonNull(constants$458.GetKBCodePage$MH,"GetKBCodePage");
    }
    public static int GetKBCodePage () {
        var mh$ = GetKBCodePage$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyState$MH() {
        return RuntimeHelper.requireNonNull(constants$458.GetKeyState$MH,"GetKeyState");
    }
    public static short GetKeyState ( int nVirtKey) {
        var mh$ = GetKeyState$MH();
        try {
            return (short)mh$.invokeExact(nVirtKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAsyncKeyState$MH() {
        return RuntimeHelper.requireNonNull(constants$459.GetAsyncKeyState$MH,"GetAsyncKeyState");
    }
    public static short GetAsyncKeyState ( int vKey) {
        var mh$ = GetAsyncKeyState$MH();
        try {
            return (short)mh$.invokeExact(vKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardState$MH() {
        return RuntimeHelper.requireNonNull(constants$459.GetKeyboardState$MH,"GetKeyboardState");
    }
    public static int GetKeyboardState ( Addressable lpKeyState) {
        var mh$ = GetKeyboardState$MH();
        try {
            return (int)mh$.invokeExact(lpKeyState);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetKeyboardState$MH() {
        return RuntimeHelper.requireNonNull(constants$459.SetKeyboardState$MH,"SetKeyboardState");
    }
    public static int SetKeyboardState ( Addressable lpKeyState) {
        var mh$ = SetKeyboardState$MH();
        try {
            return (int)mh$.invokeExact(lpKeyState);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyNameTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$459.GetKeyNameTextA$MH,"GetKeyNameTextA");
    }
    public static int GetKeyNameTextA ( int lParam,  Addressable lpString,  int cchSize) {
        var mh$ = GetKeyNameTextA$MH();
        try {
            return (int)mh$.invokeExact(lParam, lpString, cchSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyNameTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$459.GetKeyNameTextW$MH,"GetKeyNameTextW");
    }
    public static int GetKeyNameTextW ( int lParam,  Addressable lpString,  int cchSize) {
        var mh$ = GetKeyNameTextW$MH();
        try {
            return (int)mh$.invokeExact(lParam, lpString, cchSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardType$MH() {
        return RuntimeHelper.requireNonNull(constants$459.GetKeyboardType$MH,"GetKeyboardType");
    }
    public static int GetKeyboardType ( int nTypeFlag) {
        var mh$ = GetKeyboardType$MH();
        try {
            return (int)mh$.invokeExact(nTypeFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ToAscii$MH() {
        return RuntimeHelper.requireNonNull(constants$460.ToAscii$MH,"ToAscii");
    }
    public static int ToAscii ( int uVirtKey,  int uScanCode,  Addressable lpKeyState,  Addressable lpChar,  int uFlags) {
        var mh$ = ToAscii$MH();
        try {
            return (int)mh$.invokeExact(uVirtKey, uScanCode, lpKeyState, lpChar, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ToAsciiEx$MH() {
        return RuntimeHelper.requireNonNull(constants$460.ToAsciiEx$MH,"ToAsciiEx");
    }
    public static int ToAsciiEx ( int uVirtKey,  int uScanCode,  Addressable lpKeyState,  Addressable lpChar,  int uFlags,  Addressable dwhkl) {
        var mh$ = ToAsciiEx$MH();
        try {
            return (int)mh$.invokeExact(uVirtKey, uScanCode, lpKeyState, lpChar, uFlags, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ToUnicode$MH() {
        return RuntimeHelper.requireNonNull(constants$460.ToUnicode$MH,"ToUnicode");
    }
    public static int ToUnicode ( int wVirtKey,  int wScanCode,  Addressable lpKeyState,  Addressable pwszBuff,  int cchBuff,  int wFlags) {
        var mh$ = ToUnicode$MH();
        try {
            return (int)mh$.invokeExact(wVirtKey, wScanCode, lpKeyState, pwszBuff, cchBuff, wFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OemKeyScan$MH() {
        return RuntimeHelper.requireNonNull(constants$460.OemKeyScan$MH,"OemKeyScan");
    }
    public static int OemKeyScan ( short wOemChar) {
        var mh$ = OemKeyScan$MH();
        try {
            return (int)mh$.invokeExact(wOemChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VkKeyScanA$MH() {
        return RuntimeHelper.requireNonNull(constants$460.VkKeyScanA$MH,"VkKeyScanA");
    }
    public static short VkKeyScanA ( byte ch) {
        var mh$ = VkKeyScanA$MH();
        try {
            return (short)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VkKeyScanW$MH() {
        return RuntimeHelper.requireNonNull(constants$460.VkKeyScanW$MH,"VkKeyScanW");
    }
    public static short VkKeyScanW ( short ch) {
        var mh$ = VkKeyScanW$MH();
        try {
            return (short)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VkKeyScanExA$MH() {
        return RuntimeHelper.requireNonNull(constants$461.VkKeyScanExA$MH,"VkKeyScanExA");
    }
    public static short VkKeyScanExA ( byte ch,  Addressable dwhkl) {
        var mh$ = VkKeyScanExA$MH();
        try {
            return (short)mh$.invokeExact(ch, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VkKeyScanExW$MH() {
        return RuntimeHelper.requireNonNull(constants$461.VkKeyScanExW$MH,"VkKeyScanExW");
    }
    public static short VkKeyScanExW ( short ch,  Addressable dwhkl) {
        var mh$ = VkKeyScanExW$MH();
        try {
            return (short)mh$.invokeExact(ch, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle keybd_event$MH() {
        return RuntimeHelper.requireNonNull(constants$461.keybd_event$MH,"keybd_event");
    }
    public static void keybd_event ( byte bVk,  byte bScan,  int dwFlags,  long dwExtraInfo) {
        var mh$ = keybd_event$MH();
        try {
            mh$.invokeExact(bVk, bScan, dwFlags, dwExtraInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mouse_event$MH() {
        return RuntimeHelper.requireNonNull(constants$461.mouse_event$MH,"mouse_event");
    }
    public static void mouse_event ( int dwFlags,  int dx,  int dy,  int dwData,  long dwExtraInfo) {
        var mh$ = mouse_event$MH();
        try {
            mh$.invokeExact(dwFlags, dx, dy, dwData, dwExtraInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMOUSEINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMOUSEINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKEYBDINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPKEYBDINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHARDWAREINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHARDWAREINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPINPUT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SendInput$MH() {
        return RuntimeHelper.requireNonNull(constants$461.SendInput$MH,"SendInput");
    }
    public static int SendInput ( int cInputs,  Addressable pInputs,  int cbSize) {
        var mh$ = SendInput$MH();
        try {
            return (int)mh$.invokeExact(cInputs, pInputs, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HTOUCHINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOUCHINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTOUCHINPUT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetTouchInputInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$461.GetTouchInputInfo$MH,"GetTouchInputInfo");
    }
    public static int GetTouchInputInfo ( Addressable hTouchInput,  int cInputs,  Addressable pInputs,  int cbSize) {
        var mh$ = GetTouchInputInfo$MH();
        try {
            return (int)mh$.invokeExact(hTouchInput, cInputs, pInputs, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseTouchInputHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$462.CloseTouchInputHandle$MH,"CloseTouchInputHandle");
    }
    public static int CloseTouchInputHandle ( Addressable hTouchInput) {
        var mh$ = CloseTouchInputHandle$MH();
        try {
            return (int)mh$.invokeExact(hTouchInput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterTouchWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$462.RegisterTouchWindow$MH,"RegisterTouchWindow");
    }
    public static int RegisterTouchWindow ( Addressable hwnd,  int ulFlags) {
        var mh$ = RegisterTouchWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd, ulFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterTouchWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$462.UnregisterTouchWindow$MH,"UnregisterTouchWindow");
    }
    public static int UnregisterTouchWindow ( Addressable hwnd) {
        var mh$ = UnregisterTouchWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsTouchWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$462.IsTouchWindow$MH,"IsTouchWindow");
    }
    public static int IsTouchWindow ( Addressable hwnd,  Addressable pulFlags) {
        var mh$ = IsTouchWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pulFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int PT_POINTER() {
        return (int)1L;
    }
    public static int PT_TOUCH() {
        return (int)2L;
    }
    public static int PT_PEN() {
        return (int)3L;
    }
    public static int PT_MOUSE() {
        return (int)4L;
    }
    public static int PT_TOUCHPAD() {
        return (int)5L;
    }
    public static int POINTER_CHANGE_NONE() {
        return (int)0L;
    }
    public static int POINTER_CHANGE_FIRSTBUTTON_DOWN() {
        return (int)1L;
    }
    public static int POINTER_CHANGE_FIRSTBUTTON_UP() {
        return (int)2L;
    }
    public static int POINTER_CHANGE_SECONDBUTTON_DOWN() {
        return (int)3L;
    }
    public static int POINTER_CHANGE_SECONDBUTTON_UP() {
        return (int)4L;
    }
    public static int POINTER_CHANGE_THIRDBUTTON_DOWN() {
        return (int)5L;
    }
    public static int POINTER_CHANGE_THIRDBUTTON_UP() {
        return (int)6L;
    }
    public static int POINTER_CHANGE_FOURTHBUTTON_DOWN() {
        return (int)7L;
    }
    public static int POINTER_CHANGE_FOURTHBUTTON_UP() {
        return (int)8L;
    }
    public static int POINTER_CHANGE_FIFTHBUTTON_DOWN() {
        return (int)9L;
    }
    public static int POINTER_CHANGE_FIFTHBUTTON_UP() {
        return (int)10L;
    }
    public static int POINTER_FEEDBACK_DEFAULT() {
        return (int)1L;
    }
    public static int POINTER_FEEDBACK_INDIRECT() {
        return (int)2L;
    }
    public static int POINTER_FEEDBACK_NONE() {
        return (int)3L;
    }
    public static MethodHandle InitializeTouchInjection$MH() {
        return RuntimeHelper.requireNonNull(constants$462.InitializeTouchInjection$MH,"InitializeTouchInjection");
    }
    public static int InitializeTouchInjection ( int maxCount,  int dwMode) {
        var mh$ = InitializeTouchInjection$MH();
        try {
            return (int)mh$.invokeExact(maxCount, dwMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InjectTouchInput$MH() {
        return RuntimeHelper.requireNonNull(constants$462.InjectTouchInput$MH,"InjectTouchInput");
    }
    public static int InjectTouchInput ( int count,  Addressable contacts) {
        var mh$ = InjectTouchInput$MH();
        try {
            return (int)mh$.invokeExact(count, contacts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PUSAGE_PROPERTIES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOINTER_TYPE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PINPUT_INJECTION_VALUE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetPointerType$MH() {
        return RuntimeHelper.requireNonNull(constants$463.GetPointerType$MH,"GetPointerType");
    }
    public static int GetPointerType ( int pointerId,  Addressable pointerType) {
        var mh$ = GetPointerType$MH();
        try {
            return (int)mh$.invokeExact(pointerId, pointerType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerCursorId$MH() {
        return RuntimeHelper.requireNonNull(constants$463.GetPointerCursorId$MH,"GetPointerCursorId");
    }
    public static int GetPointerCursorId ( int pointerId,  Addressable cursorId) {
        var mh$ = GetPointerCursorId$MH();
        try {
            return (int)mh$.invokeExact(pointerId, cursorId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$463.GetPointerInfo$MH,"GetPointerInfo");
    }
    public static int GetPointerInfo ( int pointerId,  Addressable pointerInfo) {
        var mh$ = GetPointerInfo$MH();
        try {
            return (int)mh$.invokeExact(pointerId, pointerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerInfoHistory$MH() {
        return RuntimeHelper.requireNonNull(constants$463.GetPointerInfoHistory$MH,"GetPointerInfoHistory");
    }
    public static int GetPointerInfoHistory ( int pointerId,  Addressable entriesCount,  Addressable pointerInfo) {
        var mh$ = GetPointerInfoHistory$MH();
        try {
            return (int)mh$.invokeExact(pointerId, entriesCount, pointerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerFrameInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$463.GetPointerFrameInfo$MH,"GetPointerFrameInfo");
    }
    public static int GetPointerFrameInfo ( int pointerId,  Addressable pointerCount,  Addressable pointerInfo) {
        var mh$ = GetPointerFrameInfo$MH();
        try {
            return (int)mh$.invokeExact(pointerId, pointerCount, pointerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerFrameInfoHistory$MH() {
        return RuntimeHelper.requireNonNull(constants$463.GetPointerFrameInfoHistory$MH,"GetPointerFrameInfoHistory");
    }
    public static int GetPointerFrameInfoHistory ( int pointerId,  Addressable entriesCount,  Addressable pointerCount,  Addressable pointerInfo) {
        var mh$ = GetPointerFrameInfoHistory$MH();
        try {
            return (int)mh$.invokeExact(pointerId, entriesCount, pointerCount, pointerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerTouchInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$464.GetPointerTouchInfo$MH,"GetPointerTouchInfo");
    }
    public static int GetPointerTouchInfo ( int pointerId,  Addressable touchInfo) {
        var mh$ = GetPointerTouchInfo$MH();
        try {
            return (int)mh$.invokeExact(pointerId, touchInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerTouchInfoHistory$MH() {
        return RuntimeHelper.requireNonNull(constants$464.GetPointerTouchInfoHistory$MH,"GetPointerTouchInfoHistory");
    }
    public static int GetPointerTouchInfoHistory ( int pointerId,  Addressable entriesCount,  Addressable touchInfo) {
        var mh$ = GetPointerTouchInfoHistory$MH();
        try {
            return (int)mh$.invokeExact(pointerId, entriesCount, touchInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerFrameTouchInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$464.GetPointerFrameTouchInfo$MH,"GetPointerFrameTouchInfo");
    }
    public static int GetPointerFrameTouchInfo ( int pointerId,  Addressable pointerCount,  Addressable touchInfo) {
        var mh$ = GetPointerFrameTouchInfo$MH();
        try {
            return (int)mh$.invokeExact(pointerId, pointerCount, touchInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerFrameTouchInfoHistory$MH() {
        return RuntimeHelper.requireNonNull(constants$464.GetPointerFrameTouchInfoHistory$MH,"GetPointerFrameTouchInfoHistory");
    }
    public static int GetPointerFrameTouchInfoHistory ( int pointerId,  Addressable entriesCount,  Addressable pointerCount,  Addressable touchInfo) {
        var mh$ = GetPointerFrameTouchInfoHistory$MH();
        try {
            return (int)mh$.invokeExact(pointerId, entriesCount, pointerCount, touchInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerPenInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$464.GetPointerPenInfo$MH,"GetPointerPenInfo");
    }
    public static int GetPointerPenInfo ( int pointerId,  Addressable penInfo) {
        var mh$ = GetPointerPenInfo$MH();
        try {
            return (int)mh$.invokeExact(pointerId, penInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerPenInfoHistory$MH() {
        return RuntimeHelper.requireNonNull(constants$464.GetPointerPenInfoHistory$MH,"GetPointerPenInfoHistory");
    }
    public static int GetPointerPenInfoHistory ( int pointerId,  Addressable entriesCount,  Addressable penInfo) {
        var mh$ = GetPointerPenInfoHistory$MH();
        try {
            return (int)mh$.invokeExact(pointerId, entriesCount, penInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerFramePenInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$465.GetPointerFramePenInfo$MH,"GetPointerFramePenInfo");
    }
    public static int GetPointerFramePenInfo ( int pointerId,  Addressable pointerCount,  Addressable penInfo) {
        var mh$ = GetPointerFramePenInfo$MH();
        try {
            return (int)mh$.invokeExact(pointerId, pointerCount, penInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerFramePenInfoHistory$MH() {
        return RuntimeHelper.requireNonNull(constants$465.GetPointerFramePenInfoHistory$MH,"GetPointerFramePenInfoHistory");
    }
    public static int GetPointerFramePenInfoHistory ( int pointerId,  Addressable entriesCount,  Addressable pointerCount,  Addressable penInfo) {
        var mh$ = GetPointerFramePenInfoHistory$MH();
        try {
            return (int)mh$.invokeExact(pointerId, entriesCount, pointerCount, penInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkipPointerFrameMessages$MH() {
        return RuntimeHelper.requireNonNull(constants$465.SkipPointerFrameMessages$MH,"SkipPointerFrameMessages");
    }
    public static int SkipPointerFrameMessages ( int pointerId) {
        var mh$ = SkipPointerFrameMessages$MH();
        try {
            return (int)mh$.invokeExact(pointerId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterPointerInputTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$465.RegisterPointerInputTarget$MH,"RegisterPointerInputTarget");
    }
    public static int RegisterPointerInputTarget ( Addressable hwnd,  int pointerType) {
        var mh$ = RegisterPointerInputTarget$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pointerType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterPointerInputTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$465.UnregisterPointerInputTarget$MH,"UnregisterPointerInputTarget");
    }
    public static int UnregisterPointerInputTarget ( Addressable hwnd,  int pointerType) {
        var mh$ = UnregisterPointerInputTarget$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pointerType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterPointerInputTargetEx$MH() {
        return RuntimeHelper.requireNonNull(constants$465.RegisterPointerInputTargetEx$MH,"RegisterPointerInputTargetEx");
    }
    public static int RegisterPointerInputTargetEx ( Addressable hwnd,  int pointerType,  int fObserve) {
        var mh$ = RegisterPointerInputTargetEx$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pointerType, fObserve);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterPointerInputTargetEx$MH() {
        return RuntimeHelper.requireNonNull(constants$466.UnregisterPointerInputTargetEx$MH,"UnregisterPointerInputTargetEx");
    }
    public static int UnregisterPointerInputTargetEx ( Addressable hwnd,  int pointerType) {
        var mh$ = UnregisterPointerInputTargetEx$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pointerType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HSYNTHETICPOINTERDEVICE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CreateSyntheticPointerDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$466.CreateSyntheticPointerDevice$MH,"CreateSyntheticPointerDevice");
    }
    public static MemoryAddress CreateSyntheticPointerDevice ( int pointerType,  int maxCount,  int mode) {
        var mh$ = CreateSyntheticPointerDevice$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pointerType, maxCount, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InjectSyntheticPointerInput$MH() {
        return RuntimeHelper.requireNonNull(constants$466.InjectSyntheticPointerInput$MH,"InjectSyntheticPointerInput");
    }
    public static int InjectSyntheticPointerInput ( Addressable device,  Addressable pointerInfo,  int count) {
        var mh$ = InjectSyntheticPointerInput$MH();
        try {
            return (int)mh$.invokeExact(device, pointerInfo, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroySyntheticPointerDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$466.DestroySyntheticPointerDevice$MH,"DestroySyntheticPointerDevice");
    }
    public static void DestroySyntheticPointerDevice ( Addressable device) {
        var mh$ = DestroySyntheticPointerDevice$MH();
        try {
            mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableMouseInPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$466.EnableMouseInPointer$MH,"EnableMouseInPointer");
    }
    public static int EnableMouseInPointer ( int fEnable) {
        var mh$ = EnableMouseInPointer$MH();
        try {
            return (int)mh$.invokeExact(fEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsMouseInPointerEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$466.IsMouseInPointerEnabled$MH,"IsMouseInPointerEnabled");
    }
    public static int IsMouseInPointerEnabled () {
        var mh$ = IsMouseInPointerEnabled$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableMouseInPointerForThread$MH() {
        return RuntimeHelper.requireNonNull(constants$467.EnableMouseInPointerForThread$MH,"EnableMouseInPointerForThread");
    }
    public static int EnableMouseInPointerForThread () {
        var mh$ = EnableMouseInPointerForThread$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterTouchHitTestingWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$467.RegisterTouchHitTestingWindow$MH,"RegisterTouchHitTestingWindow");
    }
    public static int RegisterTouchHitTestingWindow ( Addressable hwnd,  int value) {
        var mh$ = RegisterTouchHitTestingWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOUCH_HIT_TESTING_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle EvaluateProximityToRect$MH() {
        return RuntimeHelper.requireNonNull(constants$467.EvaluateProximityToRect$MH,"EvaluateProximityToRect");
    }
    public static int EvaluateProximityToRect ( Addressable controlBoundingBox,  Addressable pHitTestingInput,  Addressable pProximityEval) {
        var mh$ = EvaluateProximityToRect$MH();
        try {
            return (int)mh$.invokeExact(controlBoundingBox, pHitTestingInput, pProximityEval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EvaluateProximityToPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$467.EvaluateProximityToPolygon$MH,"EvaluateProximityToPolygon");
    }
    public static int EvaluateProximityToPolygon ( int numVertices,  Addressable controlPolygon,  Addressable pHitTestingInput,  Addressable pProximityEval) {
        var mh$ = EvaluateProximityToPolygon$MH();
        try {
            return (int)mh$.invokeExact(numVertices, controlPolygon, pHitTestingInput, pProximityEval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PackTouchHitTestingProximityEvaluation$MH() {
        return RuntimeHelper.requireNonNull(constants$467.PackTouchHitTestingProximityEvaluation$MH,"PackTouchHitTestingProximityEvaluation");
    }
    public static long PackTouchHitTestingProximityEvaluation ( Addressable pHitTestingInput,  Addressable pProximityEval) {
        var mh$ = PackTouchHitTestingProximityEvaluation$MH();
        try {
            return (long)mh$.invokeExact(pHitTestingInput, pProximityEval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int FEEDBACK_TOUCH_CONTACTVISUALIZATION() {
        return (int)1L;
    }
    public static int FEEDBACK_PEN_BARRELVISUALIZATION() {
        return (int)2L;
    }
    public static int FEEDBACK_PEN_TAP() {
        return (int)3L;
    }
    public static int FEEDBACK_PEN_DOUBLETAP() {
        return (int)4L;
    }
    public static int FEEDBACK_PEN_PRESSANDHOLD() {
        return (int)5L;
    }
    public static int FEEDBACK_PEN_RIGHTTAP() {
        return (int)6L;
    }
    public static int FEEDBACK_TOUCH_TAP() {
        return (int)7L;
    }
    public static int FEEDBACK_TOUCH_DOUBLETAP() {
        return (int)8L;
    }
    public static int FEEDBACK_TOUCH_PRESSANDHOLD() {
        return (int)9L;
    }
    public static int FEEDBACK_TOUCH_RIGHTTAP() {
        return (int)10L;
    }
    public static int FEEDBACK_GESTURE_PRESSANDTAP() {
        return (int)11L;
    }
    public static int FEEDBACK_MAX() {
        return (int)-1L;
    }
    public static MethodHandle GetWindowFeedbackSetting$MH() {
        return RuntimeHelper.requireNonNull(constants$467.GetWindowFeedbackSetting$MH,"GetWindowFeedbackSetting");
    }
    public static int GetWindowFeedbackSetting ( Addressable hwnd,  int feedback,  int dwFlags,  Addressable pSize,  Addressable config) {
        var mh$ = GetWindowFeedbackSetting$MH();
        try {
            return (int)mh$.invokeExact(hwnd, feedback, dwFlags, pSize, config);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowFeedbackSetting$MH() {
        return RuntimeHelper.requireNonNull(constants$468.SetWindowFeedbackSetting$MH,"SetWindowFeedbackSetting");
    }
    public static int SetWindowFeedbackSetting ( Addressable hwnd,  int feedback,  int dwFlags,  int size,  Addressable configuration) {
        var mh$ = SetWindowFeedbackSetting$MH();
        try {
            return (int)mh$.invokeExact(hwnd, feedback, dwFlags, size, configuration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerInputTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$468.GetPointerInputTransform$MH,"GetPointerInputTransform");
    }
    public static int GetPointerInputTransform ( int pointerId,  int historyCount,  Addressable inputTransform) {
        var mh$ = GetPointerInputTransform$MH();
        try {
            return (int)mh$.invokeExact(pointerId, historyCount, inputTransform);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PLASTINPUTINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetLastInputInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$468.GetLastInputInfo$MH,"GetLastInputInfo");
    }
    public static int GetLastInputInfo ( Addressable plii) {
        var mh$ = GetLastInputInfo$MH();
        try {
            return (int)mh$.invokeExact(plii);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapVirtualKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$468.MapVirtualKeyA$MH,"MapVirtualKeyA");
    }
    public static int MapVirtualKeyA ( int uCode,  int uMapType) {
        var mh$ = MapVirtualKeyA$MH();
        try {
            return (int)mh$.invokeExact(uCode, uMapType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapVirtualKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$468.MapVirtualKeyW$MH,"MapVirtualKeyW");
    }
    public static int MapVirtualKeyW ( int uCode,  int uMapType) {
        var mh$ = MapVirtualKeyW$MH();
        try {
            return (int)mh$.invokeExact(uCode, uMapType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapVirtualKeyExA$MH() {
        return RuntimeHelper.requireNonNull(constants$468.MapVirtualKeyExA$MH,"MapVirtualKeyExA");
    }
    public static int MapVirtualKeyExA ( int uCode,  int uMapType,  Addressable dwhkl) {
        var mh$ = MapVirtualKeyExA$MH();
        try {
            return (int)mh$.invokeExact(uCode, uMapType, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapVirtualKeyExW$MH() {
        return RuntimeHelper.requireNonNull(constants$469.MapVirtualKeyExW$MH,"MapVirtualKeyExW");
    }
    public static int MapVirtualKeyExW ( int uCode,  int uMapType,  Addressable dwhkl) {
        var mh$ = MapVirtualKeyExW$MH();
        try {
            return (int)mh$.invokeExact(uCode, uMapType, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetInputState$MH() {
        return RuntimeHelper.requireNonNull(constants$469.GetInputState$MH,"GetInputState");
    }
    public static int GetInputState () {
        var mh$ = GetInputState$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetQueueStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$469.GetQueueStatus$MH,"GetQueueStatus");
    }
    public static int GetQueueStatus ( int flags) {
        var mh$ = GetQueueStatus$MH();
        try {
            return (int)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCapture$MH() {
        return RuntimeHelper.requireNonNull(constants$469.GetCapture$MH,"GetCapture");
    }
    public static MemoryAddress GetCapture () {
        var mh$ = GetCapture$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCapture$MH() {
        return RuntimeHelper.requireNonNull(constants$469.SetCapture$MH,"SetCapture");
    }
    public static MemoryAddress SetCapture ( Addressable hWnd) {
        var mh$ = SetCapture$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseCapture$MH() {
        return RuntimeHelper.requireNonNull(constants$469.ReleaseCapture$MH,"ReleaseCapture");
    }
    public static int ReleaseCapture () {
        var mh$ = ReleaseCapture$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MsgWaitForMultipleObjects$MH() {
        return RuntimeHelper.requireNonNull(constants$470.MsgWaitForMultipleObjects$MH,"MsgWaitForMultipleObjects");
    }
    public static int MsgWaitForMultipleObjects ( int nCount,  Addressable pHandles,  int fWaitAll,  int dwMilliseconds,  int dwWakeMask) {
        var mh$ = MsgWaitForMultipleObjects$MH();
        try {
            return (int)mh$.invokeExact(nCount, pHandles, fWaitAll, dwMilliseconds, dwWakeMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MsgWaitForMultipleObjectsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$470.MsgWaitForMultipleObjectsEx$MH,"MsgWaitForMultipleObjectsEx");
    }
    public static int MsgWaitForMultipleObjectsEx ( int nCount,  Addressable pHandles,  int dwMilliseconds,  int dwWakeMask,  int dwFlags) {
        var mh$ = MsgWaitForMultipleObjectsEx$MH();
        try {
            return (int)mh$.invokeExact(nCount, pHandles, dwMilliseconds, dwWakeMask, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$470.SetTimer$MH,"SetTimer");
    }
    public static long SetTimer ( Addressable hWnd,  long nIDEvent,  int uElapse,  Addressable lpTimerFunc) {
        var mh$ = SetTimer$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIDEvent, uElapse, lpTimerFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCoalescableTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$470.SetCoalescableTimer$MH,"SetCoalescableTimer");
    }
    public static long SetCoalescableTimer ( Addressable hWnd,  long nIDEvent,  int uElapse,  Addressable lpTimerFunc,  int uToleranceDelay) {
        var mh$ = SetCoalescableTimer$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIDEvent, uElapse, lpTimerFunc, uToleranceDelay);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle KillTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$470.KillTimer$MH,"KillTimer");
    }
    public static int KillTimer ( Addressable hWnd,  long uIDEvent) {
        var mh$ = KillTimer$MH();
        try {
            return (int)mh$.invokeExact(hWnd, uIDEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindowUnicode$MH() {
        return RuntimeHelper.requireNonNull(constants$470.IsWindowUnicode$MH,"IsWindowUnicode");
    }
    public static int IsWindowUnicode ( Addressable hWnd) {
        var mh$ = IsWindowUnicode$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$471.EnableWindow$MH,"EnableWindow");
    }
    public static int EnableWindow ( Addressable hWnd,  int bEnable) {
        var mh$ = EnableWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, bEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindowEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$471.IsWindowEnabled$MH,"IsWindowEnabled");
    }
    public static int IsWindowEnabled ( Addressable hWnd) {
        var mh$ = IsWindowEnabled$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadAcceleratorsA$MH() {
        return RuntimeHelper.requireNonNull(constants$471.LoadAcceleratorsA$MH,"LoadAcceleratorsA");
    }
    public static MemoryAddress LoadAcceleratorsA ( Addressable hInstance,  Addressable lpTableName) {
        var mh$ = LoadAcceleratorsA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpTableName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadAcceleratorsW$MH() {
        return RuntimeHelper.requireNonNull(constants$471.LoadAcceleratorsW$MH,"LoadAcceleratorsW");
    }
    public static MemoryAddress LoadAcceleratorsW ( Addressable hInstance,  Addressable lpTableName) {
        var mh$ = LoadAcceleratorsW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpTableName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateAcceleratorTableA$MH() {
        return RuntimeHelper.requireNonNull(constants$471.CreateAcceleratorTableA$MH,"CreateAcceleratorTableA");
    }
    public static MemoryAddress CreateAcceleratorTableA ( Addressable paccel,  int cAccel) {
        var mh$ = CreateAcceleratorTableA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(paccel, cAccel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateAcceleratorTableW$MH() {
        return RuntimeHelper.requireNonNull(constants$471.CreateAcceleratorTableW$MH,"CreateAcceleratorTableW");
    }
    public static MemoryAddress CreateAcceleratorTableW ( Addressable paccel,  int cAccel) {
        var mh$ = CreateAcceleratorTableW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(paccel, cAccel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyAcceleratorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$472.DestroyAcceleratorTable$MH,"DestroyAcceleratorTable");
    }
    public static int DestroyAcceleratorTable ( Addressable hAccel) {
        var mh$ = DestroyAcceleratorTable$MH();
        try {
            return (int)mh$.invokeExact(hAccel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyAcceleratorTableA$MH() {
        return RuntimeHelper.requireNonNull(constants$472.CopyAcceleratorTableA$MH,"CopyAcceleratorTableA");
    }
    public static int CopyAcceleratorTableA ( Addressable hAccelSrc,  Addressable lpAccelDst,  int cAccelEntries) {
        var mh$ = CopyAcceleratorTableA$MH();
        try {
            return (int)mh$.invokeExact(hAccelSrc, lpAccelDst, cAccelEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyAcceleratorTableW$MH() {
        return RuntimeHelper.requireNonNull(constants$472.CopyAcceleratorTableW$MH,"CopyAcceleratorTableW");
    }
    public static int CopyAcceleratorTableW ( Addressable hAccelSrc,  Addressable lpAccelDst,  int cAccelEntries) {
        var mh$ = CopyAcceleratorTableW$MH();
        try {
            return (int)mh$.invokeExact(hAccelSrc, lpAccelDst, cAccelEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TranslateAcceleratorA$MH() {
        return RuntimeHelper.requireNonNull(constants$472.TranslateAcceleratorA$MH,"TranslateAcceleratorA");
    }
    public static int TranslateAcceleratorA ( Addressable hWnd,  Addressable hAccTable,  Addressable lpMsg) {
        var mh$ = TranslateAcceleratorA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hAccTable, lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TranslateAcceleratorW$MH() {
        return RuntimeHelper.requireNonNull(constants$472.TranslateAcceleratorW$MH,"TranslateAcceleratorW");
    }
    public static int TranslateAcceleratorW ( Addressable hWnd,  Addressable hAccTable,  Addressable lpMsg) {
        var mh$ = TranslateAcceleratorW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hAccTable, lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemMetrics$MH() {
        return RuntimeHelper.requireNonNull(constants$472.GetSystemMetrics$MH,"GetSystemMetrics");
    }
    public static int GetSystemMetrics ( int nIndex) {
        var mh$ = GetSystemMetrics$MH();
        try {
            return (int)mh$.invokeExact(nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemMetricsForDpi$MH() {
        return RuntimeHelper.requireNonNull(constants$473.GetSystemMetricsForDpi$MH,"GetSystemMetricsForDpi");
    }
    public static int GetSystemMetricsForDpi ( int nIndex,  int dpi) {
        var mh$ = GetSystemMetricsForDpi$MH();
        try {
            return (int)mh$.invokeExact(nIndex, dpi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadMenuA$MH() {
        return RuntimeHelper.requireNonNull(constants$473.LoadMenuA$MH,"LoadMenuA");
    }
    public static MemoryAddress LoadMenuA ( Addressable hInstance,  Addressable lpMenuName) {
        var mh$ = LoadMenuA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpMenuName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadMenuW$MH() {
        return RuntimeHelper.requireNonNull(constants$473.LoadMenuW$MH,"LoadMenuW");
    }
    public static MemoryAddress LoadMenuW ( Addressable hInstance,  Addressable lpMenuName) {
        var mh$ = LoadMenuW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpMenuName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadMenuIndirectA$MH() {
        return RuntimeHelper.requireNonNull(constants$473.LoadMenuIndirectA$MH,"LoadMenuIndirectA");
    }
    public static MemoryAddress LoadMenuIndirectA ( Addressable lpMenuTemplate) {
        var mh$ = LoadMenuIndirectA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpMenuTemplate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadMenuIndirectW$MH() {
        return RuntimeHelper.requireNonNull(constants$473.LoadMenuIndirectW$MH,"LoadMenuIndirectW");
    }
    public static MemoryAddress LoadMenuIndirectW ( Addressable lpMenuTemplate) {
        var mh$ = LoadMenuIndirectW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpMenuTemplate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$473.GetMenu$MH,"GetMenu");
    }
    public static MemoryAddress GetMenu ( Addressable hWnd) {
        var mh$ = GetMenu$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$474.SetMenu$MH,"SetMenu");
    }
    public static int SetMenu ( Addressable hWnd,  Addressable hMenu) {
        var mh$ = SetMenu$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeMenuA$MH() {
        return RuntimeHelper.requireNonNull(constants$474.ChangeMenuA$MH,"ChangeMenuA");
    }
    public static int ChangeMenuA ( Addressable hMenu,  int cmd,  Addressable lpszNewItem,  int cmdInsert,  int flags) {
        var mh$ = ChangeMenuA$MH();
        try {
            return (int)mh$.invokeExact(hMenu, cmd, lpszNewItem, cmdInsert, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeMenuW$MH() {
        return RuntimeHelper.requireNonNull(constants$474.ChangeMenuW$MH,"ChangeMenuW");
    }
    public static int ChangeMenuW ( Addressable hMenu,  int cmd,  Addressable lpszNewItem,  int cmdInsert,  int flags) {
        var mh$ = ChangeMenuW$MH();
        try {
            return (int)mh$.invokeExact(hMenu, cmd, lpszNewItem, cmdInsert, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HiliteMenuItem$MH() {
        return RuntimeHelper.requireNonNull(constants$474.HiliteMenuItem$MH,"HiliteMenuItem");
    }
    public static int HiliteMenuItem ( Addressable hWnd,  Addressable hMenu,  int uIDHiliteItem,  int uHilite) {
        var mh$ = HiliteMenuItem$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hMenu, uIDHiliteItem, uHilite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$474.GetMenuStringA$MH,"GetMenuStringA");
    }
    public static int GetMenuStringA ( Addressable hMenu,  int uIDItem,  Addressable lpString,  int cchMax,  int flags) {
        var mh$ = GetMenuStringA$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uIDItem, lpString, cchMax, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$474.GetMenuStringW$MH,"GetMenuStringW");
    }
    public static int GetMenuStringW ( Addressable hMenu,  int uIDItem,  Addressable lpString,  int cchMax,  int flags) {
        var mh$ = GetMenuStringW$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uIDItem, lpString, cchMax, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuState$MH() {
        return RuntimeHelper.requireNonNull(constants$475.GetMenuState$MH,"GetMenuState");
    }
    public static int GetMenuState ( Addressable hMenu,  int uId,  int uFlags) {
        var mh$ = GetMenuState$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uId, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawMenuBar$MH() {
        return RuntimeHelper.requireNonNull(constants$475.DrawMenuBar$MH,"DrawMenuBar");
    }
    public static int DrawMenuBar ( Addressable hWnd) {
        var mh$ = DrawMenuBar$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$475.GetSystemMenu$MH,"GetSystemMenu");
    }
    public static MemoryAddress GetSystemMenu ( Addressable hWnd,  int bRevert) {
        var mh$ = GetSystemMenu$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, bRevert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$475.CreateMenu$MH,"CreateMenu");
    }
    public static MemoryAddress CreateMenu () {
        var mh$ = CreateMenu$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePopupMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$475.CreatePopupMenu$MH,"CreatePopupMenu");
    }
    public static MemoryAddress CreatePopupMenu () {
        var mh$ = CreatePopupMenu$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$475.DestroyMenu$MH,"DestroyMenu");
    }
    public static int DestroyMenu ( Addressable hMenu) {
        var mh$ = DestroyMenu$MH();
        try {
            return (int)mh$.invokeExact(hMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckMenuItem$MH() {
        return RuntimeHelper.requireNonNull(constants$476.CheckMenuItem$MH,"CheckMenuItem");
    }
    public static int CheckMenuItem ( Addressable hMenu,  int uIDCheckItem,  int uCheck) {
        var mh$ = CheckMenuItem$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uIDCheckItem, uCheck);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableMenuItem$MH() {
        return RuntimeHelper.requireNonNull(constants$476.EnableMenuItem$MH,"EnableMenuItem");
    }
    public static int EnableMenuItem ( Addressable hMenu,  int uIDEnableItem,  int uEnable) {
        var mh$ = EnableMenuItem$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uIDEnableItem, uEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSubMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$476.GetSubMenu$MH,"GetSubMenu");
    }
    public static MemoryAddress GetSubMenu ( Addressable hMenu,  int nPos) {
        var mh$ = GetSubMenu$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hMenu, nPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuItemID$MH() {
        return RuntimeHelper.requireNonNull(constants$476.GetMenuItemID$MH,"GetMenuItemID");
    }
    public static int GetMenuItemID ( Addressable hMenu,  int nPos) {
        var mh$ = GetMenuItemID$MH();
        try {
            return (int)mh$.invokeExact(hMenu, nPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuItemCount$MH() {
        return RuntimeHelper.requireNonNull(constants$476.GetMenuItemCount$MH,"GetMenuItemCount");
    }
    public static int GetMenuItemCount ( Addressable hMenu) {
        var mh$ = GetMenuItemCount$MH();
        try {
            return (int)mh$.invokeExact(hMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InsertMenuA$MH() {
        return RuntimeHelper.requireNonNull(constants$476.InsertMenuA$MH,"InsertMenuA");
    }
    public static int InsertMenuA ( Addressable hMenu,  int uPosition,  int uFlags,  long uIDNewItem,  Addressable lpNewItem) {
        var mh$ = InsertMenuA$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uPosition, uFlags, uIDNewItem, lpNewItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InsertMenuW$MH() {
        return RuntimeHelper.requireNonNull(constants$477.InsertMenuW$MH,"InsertMenuW");
    }
    public static int InsertMenuW ( Addressable hMenu,  int uPosition,  int uFlags,  long uIDNewItem,  Addressable lpNewItem) {
        var mh$ = InsertMenuW$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uPosition, uFlags, uIDNewItem, lpNewItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AppendMenuA$MH() {
        return RuntimeHelper.requireNonNull(constants$477.AppendMenuA$MH,"AppendMenuA");
    }
    public static int AppendMenuA ( Addressable hMenu,  int uFlags,  long uIDNewItem,  Addressable lpNewItem) {
        var mh$ = AppendMenuA$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uFlags, uIDNewItem, lpNewItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AppendMenuW$MH() {
        return RuntimeHelper.requireNonNull(constants$477.AppendMenuW$MH,"AppendMenuW");
    }
    public static int AppendMenuW ( Addressable hMenu,  int uFlags,  long uIDNewItem,  Addressable lpNewItem) {
        var mh$ = AppendMenuW$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uFlags, uIDNewItem, lpNewItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ModifyMenuA$MH() {
        return RuntimeHelper.requireNonNull(constants$477.ModifyMenuA$MH,"ModifyMenuA");
    }
    public static int ModifyMenuA ( Addressable hMnu,  int uPosition,  int uFlags,  long uIDNewItem,  Addressable lpNewItem) {
        var mh$ = ModifyMenuA$MH();
        try {
            return (int)mh$.invokeExact(hMnu, uPosition, uFlags, uIDNewItem, lpNewItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ModifyMenuW$MH() {
        return RuntimeHelper.requireNonNull(constants$477.ModifyMenuW$MH,"ModifyMenuW");
    }
    public static int ModifyMenuW ( Addressable hMnu,  int uPosition,  int uFlags,  long uIDNewItem,  Addressable lpNewItem) {
        var mh$ = ModifyMenuW$MH();
        try {
            return (int)mh$.invokeExact(hMnu, uPosition, uFlags, uIDNewItem, lpNewItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$477.RemoveMenu$MH,"RemoveMenu");
    }
    public static int RemoveMenu ( Addressable hMenu,  int uPosition,  int uFlags) {
        var mh$ = RemoveMenu$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uPosition, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$478.DeleteMenu$MH,"DeleteMenu");
    }
    public static int DeleteMenu ( Addressable hMenu,  int uPosition,  int uFlags) {
        var mh$ = DeleteMenu$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uPosition, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenuItemBitmaps$MH() {
        return RuntimeHelper.requireNonNull(constants$478.SetMenuItemBitmaps$MH,"SetMenuItemBitmaps");
    }
    public static int SetMenuItemBitmaps ( Addressable hMenu,  int uPosition,  int uFlags,  Addressable hBitmapUnchecked,  Addressable hBitmapChecked) {
        var mh$ = SetMenuItemBitmaps$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uPosition, uFlags, hBitmapUnchecked, hBitmapChecked);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuCheckMarkDimensions$MH() {
        return RuntimeHelper.requireNonNull(constants$478.GetMenuCheckMarkDimensions$MH,"GetMenuCheckMarkDimensions");
    }
    public static int GetMenuCheckMarkDimensions () {
        var mh$ = GetMenuCheckMarkDimensions$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TrackPopupMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$478.TrackPopupMenu$MH,"TrackPopupMenu");
    }
    public static int TrackPopupMenu ( Addressable hMenu,  int uFlags,  int x,  int y,  int nReserved,  Addressable hWnd,  Addressable prcRect) {
        var mh$ = TrackPopupMenu$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uFlags, x, y, nReserved, hWnd, prcRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPTPMPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle TrackPopupMenuEx$MH() {
        return RuntimeHelper.requireNonNull(constants$478.TrackPopupMenuEx$MH,"TrackPopupMenuEx");
    }
    public static int TrackPopupMenuEx ( Addressable hMenu,  int uFlags,  int x,  int y,  Addressable hwnd,  Addressable lptpm) {
        var mh$ = TrackPopupMenuEx$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uFlags, x, y, hwnd, lptpm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CalculatePopupWindowPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$478.CalculatePopupWindowPosition$MH,"CalculatePopupWindowPosition");
    }
    public static int CalculatePopupWindowPosition ( Addressable anchorPoint,  Addressable windowSize,  int flags,  Addressable excludeRect,  Addressable popupWindowPosition) {
        var mh$ = CalculatePopupWindowPosition$MH();
        try {
            return (int)mh$.invokeExact(anchorPoint, windowSize, flags, excludeRect, popupWindowPosition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPMENUINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCMENUINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetMenuInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$479.GetMenuInfo$MH,"GetMenuInfo");
    }
    public static int GetMenuInfo ( Addressable x0,  Addressable x1) {
        var mh$ = GetMenuInfo$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenuInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$479.SetMenuInfo$MH,"SetMenuInfo");
    }
    public static int SetMenuInfo ( Addressable x0,  Addressable x1) {
        var mh$ = SetMenuInfo$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$479.EndMenu$MH,"EndMenu");
    }
    public static int EndMenu () {
        var mh$ = EndMenu$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMENUGETOBJECTINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle InsertMenuItemA$MH() {
        return RuntimeHelper.requireNonNull(constants$479.InsertMenuItemA$MH,"InsertMenuItemA");
    }
    public static int InsertMenuItemA ( Addressable hmenu,  int item,  int fByPosition,  Addressable lpmi) {
        var mh$ = InsertMenuItemA$MH();
        try {
            return (int)mh$.invokeExact(hmenu, item, fByPosition, lpmi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InsertMenuItemW$MH() {
        return RuntimeHelper.requireNonNull(constants$479.InsertMenuItemW$MH,"InsertMenuItemW");
    }
    public static int InsertMenuItemW ( Addressable hmenu,  int item,  int fByPosition,  Addressable lpmi) {
        var mh$ = InsertMenuItemW$MH();
        try {
            return (int)mh$.invokeExact(hmenu, item, fByPosition, lpmi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuItemInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$479.GetMenuItemInfoA$MH,"GetMenuItemInfoA");
    }
    public static int GetMenuItemInfoA ( Addressable hmenu,  int item,  int fByPosition,  Addressable lpmii) {
        var mh$ = GetMenuItemInfoA$MH();
        try {
            return (int)mh$.invokeExact(hmenu, item, fByPosition, lpmii);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuItemInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$480.GetMenuItemInfoW$MH,"GetMenuItemInfoW");
    }
    public static int GetMenuItemInfoW ( Addressable hmenu,  int item,  int fByPosition,  Addressable lpmii) {
        var mh$ = GetMenuItemInfoW$MH();
        try {
            return (int)mh$.invokeExact(hmenu, item, fByPosition, lpmii);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenuItemInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$480.SetMenuItemInfoA$MH,"SetMenuItemInfoA");
    }
    public static int SetMenuItemInfoA ( Addressable hmenu,  int item,  int fByPositon,  Addressable lpmii) {
        var mh$ = SetMenuItemInfoA$MH();
        try {
            return (int)mh$.invokeExact(hmenu, item, fByPositon, lpmii);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenuItemInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$480.SetMenuItemInfoW$MH,"SetMenuItemInfoW");
    }
    public static int SetMenuItemInfoW ( Addressable hmenu,  int item,  int fByPositon,  Addressable lpmii) {
        var mh$ = SetMenuItemInfoW$MH();
        try {
            return (int)mh$.invokeExact(hmenu, item, fByPositon, lpmii);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuDefaultItem$MH() {
        return RuntimeHelper.requireNonNull(constants$480.GetMenuDefaultItem$MH,"GetMenuDefaultItem");
    }
    public static int GetMenuDefaultItem ( Addressable hMenu,  int fByPos,  int gmdiFlags) {
        var mh$ = GetMenuDefaultItem$MH();
        try {
            return (int)mh$.invokeExact(hMenu, fByPos, gmdiFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenuDefaultItem$MH() {
        return RuntimeHelper.requireNonNull(constants$480.SetMenuDefaultItem$MH,"SetMenuDefaultItem");
    }
    public static int SetMenuDefaultItem ( Addressable hMenu,  int uItem,  int fByPos) {
        var mh$ = SetMenuDefaultItem$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uItem, fByPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuItemRect$MH() {
        return RuntimeHelper.requireNonNull(constants$480.GetMenuItemRect$MH,"GetMenuItemRect");
    }
    public static int GetMenuItemRect ( Addressable hWnd,  Addressable hMenu,  int uItem,  Addressable lprcItem) {
        var mh$ = GetMenuItemRect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hMenu, uItem, lprcItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MenuItemFromPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$481.MenuItemFromPoint$MH,"MenuItemFromPoint");
    }
    public static int MenuItemFromPoint ( Addressable hWnd,  Addressable hMenu,  MemorySegment ptScreen) {
        var mh$ = MenuItemFromPoint$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hMenu, ptScreen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PDROPSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDROPSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle DragObject$MH() {
        return RuntimeHelper.requireNonNull(constants$481.DragObject$MH,"DragObject");
    }
    public static int DragObject ( Addressable hwndParent,  Addressable hwndFrom,  int fmt,  long data,  Addressable hcur) {
        var mh$ = DragObject$MH();
        try {
            return (int)mh$.invokeExact(hwndParent, hwndFrom, fmt, data, hcur);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DragDetect$MH() {
        return RuntimeHelper.requireNonNull(constants$481.DragDetect$MH,"DragDetect");
    }
    public static int DragDetect ( Addressable hwnd,  MemorySegment pt) {
        var mh$ = DragDetect$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawIcon$MH() {
        return RuntimeHelper.requireNonNull(constants$481.DrawIcon$MH,"DrawIcon");
    }
    public static int DrawIcon ( Addressable hDC,  int X,  int Y,  Addressable hIcon) {
        var mh$ = DrawIcon$MH();
        try {
            return (int)mh$.invokeExact(hDC, X, Y, hIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPDRAWTEXTPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle DrawTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$481.DrawTextA$MH,"DrawTextA");
    }
    public static int DrawTextA ( Addressable hdc,  Addressable lpchText,  int cchText,  Addressable lprc,  int format) {
        var mh$ = DrawTextA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpchText, cchText, lprc, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$481.DrawTextW$MH,"DrawTextW");
    }
    public static int DrawTextW ( Addressable hdc,  Addressable lpchText,  int cchText,  Addressable lprc,  int format) {
        var mh$ = DrawTextW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpchText, cchText, lprc, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTextExA$MH() {
        return RuntimeHelper.requireNonNull(constants$482.DrawTextExA$MH,"DrawTextExA");
    }
    public static int DrawTextExA ( Addressable hdc,  Addressable lpchText,  int cchText,  Addressable lprc,  int format,  Addressable lpdtp) {
        var mh$ = DrawTextExA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpchText, cchText, lprc, format, lpdtp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTextExW$MH() {
        return RuntimeHelper.requireNonNull(constants$482.DrawTextExW$MH,"DrawTextExW");
    }
    public static int DrawTextExW ( Addressable hdc,  Addressable lpchText,  int cchText,  Addressable lprc,  int format,  Addressable lpdtp) {
        var mh$ = DrawTextExW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpchText, cchText, lprc, format, lpdtp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GrayStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$482.GrayStringA$MH,"GrayStringA");
    }
    public static int GrayStringA ( Addressable hDC,  Addressable hBrush,  Addressable lpOutputFunc,  long lpData,  int nCount,  int X,  int Y,  int nWidth,  int nHeight) {
        var mh$ = GrayStringA$MH();
        try {
            return (int)mh$.invokeExact(hDC, hBrush, lpOutputFunc, lpData, nCount, X, Y, nWidth, nHeight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GrayStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$482.GrayStringW$MH,"GrayStringW");
    }
    public static int GrayStringW ( Addressable hDC,  Addressable hBrush,  Addressable lpOutputFunc,  long lpData,  int nCount,  int X,  int Y,  int nWidth,  int nHeight) {
        var mh$ = GrayStringW$MH();
        try {
            return (int)mh$.invokeExact(hDC, hBrush, lpOutputFunc, lpData, nCount, X, Y, nWidth, nHeight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawStateA$MH() {
        return RuntimeHelper.requireNonNull(constants$482.DrawStateA$MH,"DrawStateA");
    }
    public static int DrawStateA ( Addressable hdc,  Addressable hbrFore,  Addressable qfnCallBack,  long lData,  long wData,  int x,  int y,  int cx,  int cy,  int uFlags) {
        var mh$ = DrawStateA$MH();
        try {
            return (int)mh$.invokeExact(hdc, hbrFore, qfnCallBack, lData, wData, x, y, cx, cy, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawStateW$MH() {
        return RuntimeHelper.requireNonNull(constants$482.DrawStateW$MH,"DrawStateW");
    }
    public static int DrawStateW ( Addressable hdc,  Addressable hbrFore,  Addressable qfnCallBack,  long lData,  long wData,  int x,  int y,  int cx,  int cy,  int uFlags) {
        var mh$ = DrawStateW$MH();
        try {
            return (int)mh$.invokeExact(hdc, hbrFore, qfnCallBack, lData, wData, x, y, cx, cy, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TabbedTextOutA$MH() {
        return RuntimeHelper.requireNonNull(constants$483.TabbedTextOutA$MH,"TabbedTextOutA");
    }
    public static int TabbedTextOutA ( Addressable hdc,  int x,  int y,  Addressable lpString,  int chCount,  int nTabPositions,  Addressable lpnTabStopPositions,  int nTabOrigin) {
        var mh$ = TabbedTextOutA$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpString, chCount, nTabPositions, lpnTabStopPositions, nTabOrigin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TabbedTextOutW$MH() {
        return RuntimeHelper.requireNonNull(constants$483.TabbedTextOutW$MH,"TabbedTextOutW");
    }
    public static int TabbedTextOutW ( Addressable hdc,  int x,  int y,  Addressable lpString,  int chCount,  int nTabPositions,  Addressable lpnTabStopPositions,  int nTabOrigin) {
        var mh$ = TabbedTextOutW$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpString, chCount, nTabPositions, lpnTabStopPositions, nTabOrigin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTabbedTextExtentA$MH() {
        return RuntimeHelper.requireNonNull(constants$483.GetTabbedTextExtentA$MH,"GetTabbedTextExtentA");
    }
    public static int GetTabbedTextExtentA ( Addressable hdc,  Addressable lpString,  int chCount,  int nTabPositions,  Addressable lpnTabStopPositions) {
        var mh$ = GetTabbedTextExtentA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, chCount, nTabPositions, lpnTabStopPositions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTabbedTextExtentW$MH() {
        return RuntimeHelper.requireNonNull(constants$483.GetTabbedTextExtentW$MH,"GetTabbedTextExtentW");
    }
    public static int GetTabbedTextExtentW ( Addressable hdc,  Addressable lpString,  int chCount,  int nTabPositions,  Addressable lpnTabStopPositions) {
        var mh$ = GetTabbedTextExtentW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, chCount, nTabPositions, lpnTabStopPositions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$483.UpdateWindow$MH,"UpdateWindow");
    }
    public static int UpdateWindow ( Addressable hWnd) {
        var mh$ = UpdateWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetActiveWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$483.SetActiveWindow$MH,"SetActiveWindow");
    }
    public static MemoryAddress SetActiveWindow ( Addressable hWnd) {
        var mh$ = SetActiveWindow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetForegroundWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$484.GetForegroundWindow$MH,"GetForegroundWindow");
    }
    public static MemoryAddress GetForegroundWindow () {
        var mh$ = GetForegroundWindow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PaintDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$484.PaintDesktop$MH,"PaintDesktop");
    }
    public static int PaintDesktop ( Addressable hdc) {
        var mh$ = PaintDesktop$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwitchToThisWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$484.SwitchToThisWindow$MH,"SwitchToThisWindow");
    }
    public static void SwitchToThisWindow ( Addressable hwnd,  int fUnknown) {
        var mh$ = SwitchToThisWindow$MH();
        try {
            mh$.invokeExact(hwnd, fUnknown);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetForegroundWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$484.SetForegroundWindow$MH,"SetForegroundWindow");
    }
    public static int SetForegroundWindow ( Addressable hWnd) {
        var mh$ = SetForegroundWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AllowSetForegroundWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$484.AllowSetForegroundWindow$MH,"AllowSetForegroundWindow");
    }
    public static int AllowSetForegroundWindow ( int dwProcessId) {
        var mh$ = AllowSetForegroundWindow$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockSetForegroundWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$484.LockSetForegroundWindow$MH,"LockSetForegroundWindow");
    }
    public static int LockSetForegroundWindow ( int uLockCode) {
        var mh$ = LockSetForegroundWindow$MH();
        try {
            return (int)mh$.invokeExact(uLockCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WindowFromDC$MH() {
        return RuntimeHelper.requireNonNull(constants$485.WindowFromDC$MH,"WindowFromDC");
    }
    public static MemoryAddress WindowFromDC ( Addressable hDC) {
        var mh$ = WindowFromDC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hDC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDC$MH() {
        return RuntimeHelper.requireNonNull(constants$485.GetDC$MH,"GetDC");
    }
    public static MemoryAddress GetDC ( Addressable hWnd) {
        var mh$ = GetDC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDCEx$MH() {
        return RuntimeHelper.requireNonNull(constants$485.GetDCEx$MH,"GetDCEx");
    }
    public static MemoryAddress GetDCEx ( Addressable hWnd,  Addressable hrgnClip,  int flags) {
        var mh$ = GetDCEx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, hrgnClip, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowDC$MH() {
        return RuntimeHelper.requireNonNull(constants$485.GetWindowDC$MH,"GetWindowDC");
    }
    public static MemoryAddress GetWindowDC ( Addressable hWnd) {
        var mh$ = GetWindowDC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseDC$MH() {
        return RuntimeHelper.requireNonNull(constants$485.ReleaseDC$MH,"ReleaseDC");
    }
    public static int ReleaseDC ( Addressable hWnd,  Addressable hDC) {
        var mh$ = ReleaseDC$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hDC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginPaint$MH() {
        return RuntimeHelper.requireNonNull(constants$485.BeginPaint$MH,"BeginPaint");
    }
    public static MemoryAddress BeginPaint ( Addressable hWnd,  Addressable lpPaint) {
        var mh$ = BeginPaint$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, lpPaint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndPaint$MH() {
        return RuntimeHelper.requireNonNull(constants$486.EndPaint$MH,"EndPaint");
    }
    public static int EndPaint ( Addressable hWnd,  Addressable lpPaint) {
        var mh$ = EndPaint$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpPaint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUpdateRect$MH() {
        return RuntimeHelper.requireNonNull(constants$486.GetUpdateRect$MH,"GetUpdateRect");
    }
    public static int GetUpdateRect ( Addressable hWnd,  Addressable lpRect,  int bErase) {
        var mh$ = GetUpdateRect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpRect, bErase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUpdateRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$486.GetUpdateRgn$MH,"GetUpdateRgn");
    }
    public static int GetUpdateRgn ( Addressable hWnd,  Addressable hRgn,  int bErase) {
        var mh$ = GetUpdateRgn$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hRgn, bErase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$486.SetWindowRgn$MH,"SetWindowRgn");
    }
    public static int SetWindowRgn ( Addressable hWnd,  Addressable hRgn,  int bRedraw) {
        var mh$ = SetWindowRgn$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hRgn, bRedraw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$486.GetWindowRgn$MH,"GetWindowRgn");
    }
    public static int GetWindowRgn ( Addressable hWnd,  Addressable hRgn) {
        var mh$ = GetWindowRgn$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hRgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowRgnBox$MH() {
        return RuntimeHelper.requireNonNull(constants$486.GetWindowRgnBox$MH,"GetWindowRgnBox");
    }
    public static int GetWindowRgnBox ( Addressable hWnd,  Addressable lprc) {
        var mh$ = GetWindowRgnBox$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lprc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExcludeUpdateRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$487.ExcludeUpdateRgn$MH,"ExcludeUpdateRgn");
    }
    public static int ExcludeUpdateRgn ( Addressable hDC,  Addressable hWnd) {
        var mh$ = ExcludeUpdateRgn$MH();
        try {
            return (int)mh$.invokeExact(hDC, hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InvalidateRect$MH() {
        return RuntimeHelper.requireNonNull(constants$487.InvalidateRect$MH,"InvalidateRect");
    }
    public static int InvalidateRect ( Addressable hWnd,  Addressable lpRect,  int bErase) {
        var mh$ = InvalidateRect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpRect, bErase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ValidateRect$MH() {
        return RuntimeHelper.requireNonNull(constants$487.ValidateRect$MH,"ValidateRect");
    }
    public static int ValidateRect ( Addressable hWnd,  Addressable lpRect) {
        var mh$ = ValidateRect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InvalidateRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$487.InvalidateRgn$MH,"InvalidateRgn");
    }
    public static int InvalidateRgn ( Addressable hWnd,  Addressable hRgn,  int bErase) {
        var mh$ = InvalidateRgn$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hRgn, bErase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ValidateRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$487.ValidateRgn$MH,"ValidateRgn");
    }
    public static int ValidateRgn ( Addressable hWnd,  Addressable hRgn) {
        var mh$ = ValidateRgn$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hRgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RedrawWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$487.RedrawWindow$MH,"RedrawWindow");
    }
    public static int RedrawWindow ( Addressable hWnd,  Addressable lprcUpdate,  Addressable hrgnUpdate,  int flags) {
        var mh$ = RedrawWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lprcUpdate, hrgnUpdate, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockWindowUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$488.LockWindowUpdate$MH,"LockWindowUpdate");
    }
    public static int LockWindowUpdate ( Addressable hWndLock) {
        var mh$ = LockWindowUpdate$MH();
        try {
            return (int)mh$.invokeExact(hWndLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScrollWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$488.ScrollWindow$MH,"ScrollWindow");
    }
    public static int ScrollWindow ( Addressable hWnd,  int XAmount,  int YAmount,  Addressable lpRect,  Addressable lpClipRect) {
        var mh$ = ScrollWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, XAmount, YAmount, lpRect, lpClipRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScrollDC$MH() {
        return RuntimeHelper.requireNonNull(constants$488.ScrollDC$MH,"ScrollDC");
    }
    public static int ScrollDC ( Addressable hDC,  int dx,  int dy,  Addressable lprcScroll,  Addressable lprcClip,  Addressable hrgnUpdate,  Addressable lprcUpdate) {
        var mh$ = ScrollDC$MH();
        try {
            return (int)mh$.invokeExact(hDC, dx, dy, lprcScroll, lprcClip, hrgnUpdate, lprcUpdate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScrollWindowEx$MH() {
        return RuntimeHelper.requireNonNull(constants$488.ScrollWindowEx$MH,"ScrollWindowEx");
    }
    public static int ScrollWindowEx ( Addressable hWnd,  int dx,  int dy,  Addressable prcScroll,  Addressable prcClip,  Addressable hrgnUpdate,  Addressable prcUpdate,  int flags) {
        var mh$ = ScrollWindowEx$MH();
        try {
            return (int)mh$.invokeExact(hWnd, dx, dy, prcScroll, prcClip, hrgnUpdate, prcUpdate, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetScrollPos$MH() {
        return RuntimeHelper.requireNonNull(constants$488.SetScrollPos$MH,"SetScrollPos");
    }
    public static int SetScrollPos ( Addressable hWnd,  int nBar,  int nPos,  int bRedraw) {
        var mh$ = SetScrollPos$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nBar, nPos, bRedraw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetScrollPos$MH() {
        return RuntimeHelper.requireNonNull(constants$488.GetScrollPos$MH,"GetScrollPos");
    }
    public static int GetScrollPos ( Addressable hWnd,  int nBar) {
        var mh$ = GetScrollPos$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nBar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetScrollRange$MH() {
        return RuntimeHelper.requireNonNull(constants$489.SetScrollRange$MH,"SetScrollRange");
    }
    public static int SetScrollRange ( Addressable hWnd,  int nBar,  int nMinPos,  int nMaxPos,  int bRedraw) {
        var mh$ = SetScrollRange$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nBar, nMinPos, nMaxPos, bRedraw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetScrollRange$MH() {
        return RuntimeHelper.requireNonNull(constants$489.GetScrollRange$MH,"GetScrollRange");
    }
    public static int GetScrollRange ( Addressable hWnd,  int nBar,  Addressable lpMinPos,  Addressable lpMaxPos) {
        var mh$ = GetScrollRange$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nBar, lpMinPos, lpMaxPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowScrollBar$MH() {
        return RuntimeHelper.requireNonNull(constants$489.ShowScrollBar$MH,"ShowScrollBar");
    }
    public static int ShowScrollBar ( Addressable hWnd,  int wBar,  int bShow) {
        var mh$ = ShowScrollBar$MH();
        try {
            return (int)mh$.invokeExact(hWnd, wBar, bShow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableScrollBar$MH() {
        return RuntimeHelper.requireNonNull(constants$489.EnableScrollBar$MH,"EnableScrollBar");
    }
    public static int EnableScrollBar ( Addressable hWnd,  int wSBflags,  int wArrows) {
        var mh$ = EnableScrollBar$MH();
        try {
            return (int)mh$.invokeExact(hWnd, wSBflags, wArrows);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPropA$MH() {
        return RuntimeHelper.requireNonNull(constants$489.SetPropA$MH,"SetPropA");
    }
    public static int SetPropA ( Addressable hWnd,  Addressable lpString,  Addressable hData) {
        var mh$ = SetPropA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpString, hData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPropW$MH() {
        return RuntimeHelper.requireNonNull(constants$489.SetPropW$MH,"SetPropW");
    }
    public static int SetPropW ( Addressable hWnd,  Addressable lpString,  Addressable hData) {
        var mh$ = SetPropW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpString, hData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPropA$MH() {
        return RuntimeHelper.requireNonNull(constants$490.GetPropA$MH,"GetPropA");
    }
    public static MemoryAddress GetPropA ( Addressable hWnd,  Addressable lpString) {
        var mh$ = GetPropA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPropW$MH() {
        return RuntimeHelper.requireNonNull(constants$490.GetPropW$MH,"GetPropW");
    }
    public static MemoryAddress GetPropW ( Addressable hWnd,  Addressable lpString) {
        var mh$ = GetPropW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemovePropA$MH() {
        return RuntimeHelper.requireNonNull(constants$490.RemovePropA$MH,"RemovePropA");
    }
    public static MemoryAddress RemovePropA ( Addressable hWnd,  Addressable lpString) {
        var mh$ = RemovePropA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemovePropW$MH() {
        return RuntimeHelper.requireNonNull(constants$490.RemovePropW$MH,"RemovePropW");
    }
    public static MemoryAddress RemovePropW ( Addressable hWnd,  Addressable lpString) {
        var mh$ = RemovePropW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPropsExA$MH() {
        return RuntimeHelper.requireNonNull(constants$490.EnumPropsExA$MH,"EnumPropsExA");
    }
    public static int EnumPropsExA ( Addressable hWnd,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumPropsExA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPropsExW$MH() {
        return RuntimeHelper.requireNonNull(constants$490.EnumPropsExW$MH,"EnumPropsExW");
    }
    public static int EnumPropsExW ( Addressable hWnd,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumPropsExW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPropsA$MH() {
        return RuntimeHelper.requireNonNull(constants$491.EnumPropsA$MH,"EnumPropsA");
    }
    public static int EnumPropsA ( Addressable hWnd,  Addressable lpEnumFunc) {
        var mh$ = EnumPropsA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpEnumFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPropsW$MH() {
        return RuntimeHelper.requireNonNull(constants$491.EnumPropsW$MH,"EnumPropsW");
    }
    public static int EnumPropsW ( Addressable hWnd,  Addressable lpEnumFunc) {
        var mh$ = EnumPropsW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpEnumFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$491.SetWindowTextA$MH,"SetWindowTextA");
    }
    public static int SetWindowTextA ( Addressable hWnd,  Addressable lpString) {
        var mh$ = SetWindowTextA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$491.SetWindowTextW$MH,"SetWindowTextW");
    }
    public static int SetWindowTextW ( Addressable hWnd,  Addressable lpString) {
        var mh$ = SetWindowTextW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$491.GetWindowTextA$MH,"GetWindowTextA");
    }
    public static int GetWindowTextA ( Addressable hWnd,  Addressable lpString,  int nMaxCount) {
        var mh$ = GetWindowTextA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpString, nMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$491.GetWindowTextW$MH,"GetWindowTextW");
    }
    public static int GetWindowTextW ( Addressable hWnd,  Addressable lpString,  int nMaxCount) {
        var mh$ = GetWindowTextW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpString, nMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowTextLengthA$MH() {
        return RuntimeHelper.requireNonNull(constants$492.GetWindowTextLengthA$MH,"GetWindowTextLengthA");
    }
    public static int GetWindowTextLengthA ( Addressable hWnd) {
        var mh$ = GetWindowTextLengthA$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowTextLengthW$MH() {
        return RuntimeHelper.requireNonNull(constants$492.GetWindowTextLengthW$MH,"GetWindowTextLengthW");
    }
    public static int GetWindowTextLengthW ( Addressable hWnd) {
        var mh$ = GetWindowTextLengthW$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClientRect$MH() {
        return RuntimeHelper.requireNonNull(constants$492.GetClientRect$MH,"GetClientRect");
    }
    public static int GetClientRect ( Addressable hWnd,  Addressable lpRect) {
        var mh$ = GetClientRect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowRect$MH() {
        return RuntimeHelper.requireNonNull(constants$492.GetWindowRect$MH,"GetWindowRect");
    }
    public static int GetWindowRect ( Addressable hWnd,  Addressable lpRect) {
        var mh$ = GetWindowRect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AdjustWindowRect$MH() {
        return RuntimeHelper.requireNonNull(constants$492.AdjustWindowRect$MH,"AdjustWindowRect");
    }
    public static int AdjustWindowRect ( Addressable lpRect,  int dwStyle,  int bMenu) {
        var mh$ = AdjustWindowRect$MH();
        try {
            return (int)mh$.invokeExact(lpRect, dwStyle, bMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AdjustWindowRectEx$MH() {
        return RuntimeHelper.requireNonNull(constants$492.AdjustWindowRectEx$MH,"AdjustWindowRectEx");
    }
    public static int AdjustWindowRectEx ( Addressable lpRect,  int dwStyle,  int bMenu,  int dwExStyle) {
        var mh$ = AdjustWindowRectEx$MH();
        try {
            return (int)mh$.invokeExact(lpRect, dwStyle, bMenu, dwExStyle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AdjustWindowRectExForDpi$MH() {
        return RuntimeHelper.requireNonNull(constants$493.AdjustWindowRectExForDpi$MH,"AdjustWindowRectExForDpi");
    }
    public static int AdjustWindowRectExForDpi ( Addressable lpRect,  int dwStyle,  int bMenu,  int dwExStyle,  int dpi) {
        var mh$ = AdjustWindowRectExForDpi$MH();
        try {
            return (int)mh$.invokeExact(lpRect, dwStyle, bMenu, dwExStyle, dpi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPHELPINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetWindowContextHelpId$MH() {
        return RuntimeHelper.requireNonNull(constants$493.SetWindowContextHelpId$MH,"SetWindowContextHelpId");
    }
    public static int SetWindowContextHelpId ( Addressable x0,  int x1) {
        var mh$ = SetWindowContextHelpId$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


