// Generated by jextract

package opengl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$168 {

    static final FunctionDescriptor CancelIoEx$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CancelIoEx$MH = RuntimeHelper.downcallHandle(
        "CancelIoEx",
        constants$168.CancelIoEx$FUNC
    );
    static final FunctionDescriptor CancelIo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CancelIo$MH = RuntimeHelper.downcallHandle(
        "CancelIo",
        constants$168.CancelIo$FUNC
    );
    static final FunctionDescriptor GetOverlappedResultEx$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GetOverlappedResultEx$MH = RuntimeHelper.downcallHandle(
        "GetOverlappedResultEx",
        constants$168.GetOverlappedResultEx$FUNC
    );
    static final FunctionDescriptor CancelSynchronousIo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CancelSynchronousIo$MH = RuntimeHelper.downcallHandle(
        "CancelSynchronousIo",
        constants$168.CancelSynchronousIo$FUNC
    );
    static final FunctionDescriptor InitializeSRWLock$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle InitializeSRWLock$MH = RuntimeHelper.downcallHandle(
        "InitializeSRWLock",
        constants$168.InitializeSRWLock$FUNC
    );
    static final FunctionDescriptor ReleaseSRWLockExclusive$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReleaseSRWLockExclusive$MH = RuntimeHelper.downcallHandle(
        "ReleaseSRWLockExclusive",
        constants$168.ReleaseSRWLockExclusive$FUNC
    );
}


