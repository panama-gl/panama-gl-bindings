// Generated by jextract

package opengl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class glut_h_15 extends glut_h_14 {

    public static OfAddress LPRECONVERTSTRING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTYLEBUFA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPSTYLEBUFA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTYLEBUFA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTYLEBUFW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPSTYLEBUFW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTYLEBUFW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTYLEBUF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPSTYLEBUF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTYLEBUF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMEMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMEMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMEMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMEMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMEMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMEMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMEMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMEMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMEMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMECHARPOSITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMECHARPOSITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMECHARPOSITION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ImmInstallIMEA$MH() {
        return RuntimeHelper.requireNonNull(constants$628.ImmInstallIMEA$MH,"ImmInstallIMEA");
    }
    public static MemoryAddress ImmInstallIMEA ( Addressable lpszIMEFileName,  Addressable lpszLayoutText) {
        var mh$ = ImmInstallIMEA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszIMEFileName, lpszLayoutText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmInstallIMEW$MH() {
        return RuntimeHelper.requireNonNull(constants$628.ImmInstallIMEW$MH,"ImmInstallIMEW");
    }
    public static MemoryAddress ImmInstallIMEW ( Addressable lpszIMEFileName,  Addressable lpszLayoutText) {
        var mh$ = ImmInstallIMEW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszIMEFileName, lpszLayoutText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetDefaultIMEWnd$MH() {
        return RuntimeHelper.requireNonNull(constants$628.ImmGetDefaultIMEWnd$MH,"ImmGetDefaultIMEWnd");
    }
    public static MemoryAddress ImmGetDefaultIMEWnd ( Addressable x0) {
        var mh$ = ImmGetDefaultIMEWnd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetDescriptionA$MH() {
        return RuntimeHelper.requireNonNull(constants$628.ImmGetDescriptionA$MH,"ImmGetDescriptionA");
    }
    public static int ImmGetDescriptionA ( Addressable x0,  Addressable lpszDescription,  int uBufLen) {
        var mh$ = ImmGetDescriptionA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszDescription, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetDescriptionW$MH() {
        return RuntimeHelper.requireNonNull(constants$628.ImmGetDescriptionW$MH,"ImmGetDescriptionW");
    }
    public static int ImmGetDescriptionW ( Addressable x0,  Addressable lpszDescription,  int uBufLen) {
        var mh$ = ImmGetDescriptionW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszDescription, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetIMEFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$629.ImmGetIMEFileNameA$MH,"ImmGetIMEFileNameA");
    }
    public static int ImmGetIMEFileNameA ( Addressable x0,  Addressable lpszFileName,  int uBufLen) {
        var mh$ = ImmGetIMEFileNameA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszFileName, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetIMEFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$629.ImmGetIMEFileNameW$MH,"ImmGetIMEFileNameW");
    }
    public static int ImmGetIMEFileNameW ( Addressable x0,  Addressable lpszFileName,  int uBufLen) {
        var mh$ = ImmGetIMEFileNameW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszFileName, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$629.ImmGetProperty$MH,"ImmGetProperty");
    }
    public static int ImmGetProperty ( Addressable x0,  int x1) {
        var mh$ = ImmGetProperty$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmIsIME$MH() {
        return RuntimeHelper.requireNonNull(constants$629.ImmIsIME$MH,"ImmIsIME");
    }
    public static int ImmIsIME ( Addressable x0) {
        var mh$ = ImmIsIME$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSimulateHotKey$MH() {
        return RuntimeHelper.requireNonNull(constants$629.ImmSimulateHotKey$MH,"ImmSimulateHotKey");
    }
    public static int ImmSimulateHotKey ( Addressable x0,  int x1) {
        var mh$ = ImmSimulateHotKey$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$629.ImmCreateContext$MH,"ImmCreateContext");
    }
    public static MemoryAddress ImmCreateContext () {
        var mh$ = ImmCreateContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDestroyContext$MH() {
        return RuntimeHelper.requireNonNull(constants$630.ImmDestroyContext$MH,"ImmDestroyContext");
    }
    public static int ImmDestroyContext ( Addressable x0) {
        var mh$ = ImmDestroyContext$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetContext$MH() {
        return RuntimeHelper.requireNonNull(constants$630.ImmGetContext$MH,"ImmGetContext");
    }
    public static MemoryAddress ImmGetContext ( Addressable x0) {
        var mh$ = ImmGetContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmReleaseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$630.ImmReleaseContext$MH,"ImmReleaseContext");
    }
    public static int ImmReleaseContext ( Addressable x0,  Addressable x1) {
        var mh$ = ImmReleaseContext$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmAssociateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$630.ImmAssociateContext$MH,"ImmAssociateContext");
    }
    public static MemoryAddress ImmAssociateContext ( Addressable x0,  Addressable x1) {
        var mh$ = ImmAssociateContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmAssociateContextEx$MH() {
        return RuntimeHelper.requireNonNull(constants$630.ImmAssociateContextEx$MH,"ImmAssociateContextEx");
    }
    public static int ImmAssociateContextEx ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = ImmAssociateContextEx$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$630.ImmGetCompositionStringA$MH,"ImmGetCompositionStringA");
    }
    public static int ImmGetCompositionStringA ( Addressable x0,  int x1,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = ImmGetCompositionStringA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$631.ImmGetCompositionStringW$MH,"ImmGetCompositionStringW");
    }
    public static int ImmGetCompositionStringW ( Addressable x0,  int x1,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = ImmGetCompositionStringW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$631.ImmSetCompositionStringA$MH,"ImmSetCompositionStringA");
    }
    public static int ImmSetCompositionStringA ( Addressable x0,  int dwIndex,  Addressable lpComp,  int dwCompLen,  Addressable lpRead,  int dwReadLen) {
        var mh$ = ImmSetCompositionStringA$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$631.ImmSetCompositionStringW$MH,"ImmSetCompositionStringW");
    }
    public static int ImmSetCompositionStringW ( Addressable x0,  int dwIndex,  Addressable lpComp,  int dwCompLen,  Addressable lpRead,  int dwReadLen) {
        var mh$ = ImmSetCompositionStringW$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListCountA$MH() {
        return RuntimeHelper.requireNonNull(constants$631.ImmGetCandidateListCountA$MH,"ImmGetCandidateListCountA");
    }
    public static int ImmGetCandidateListCountA ( Addressable x0,  Addressable lpdwListCount) {
        var mh$ = ImmGetCandidateListCountA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpdwListCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListCountW$MH() {
        return RuntimeHelper.requireNonNull(constants$631.ImmGetCandidateListCountW$MH,"ImmGetCandidateListCountW");
    }
    public static int ImmGetCandidateListCountW ( Addressable x0,  Addressable lpdwListCount) {
        var mh$ = ImmGetCandidateListCountW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpdwListCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListA$MH() {
        return RuntimeHelper.requireNonNull(constants$631.ImmGetCandidateListA$MH,"ImmGetCandidateListA");
    }
    public static int ImmGetCandidateListA ( Addressable x0,  int deIndex,  Addressable lpCandList,  int dwBufLen) {
        var mh$ = ImmGetCandidateListA$MH();
        try {
            return (int)mh$.invokeExact(x0, deIndex, lpCandList, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListW$MH() {
        return RuntimeHelper.requireNonNull(constants$632.ImmGetCandidateListW$MH,"ImmGetCandidateListW");
    }
    public static int ImmGetCandidateListW ( Addressable x0,  int deIndex,  Addressable lpCandList,  int dwBufLen) {
        var mh$ = ImmGetCandidateListW$MH();
        try {
            return (int)mh$.invokeExact(x0, deIndex, lpCandList, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetGuideLineA$MH() {
        return RuntimeHelper.requireNonNull(constants$632.ImmGetGuideLineA$MH,"ImmGetGuideLineA");
    }
    public static int ImmGetGuideLineA ( Addressable x0,  int dwIndex,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = ImmGetGuideLineA$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetGuideLineW$MH() {
        return RuntimeHelper.requireNonNull(constants$632.ImmGetGuideLineW$MH,"ImmGetGuideLineW");
    }
    public static int ImmGetGuideLineW ( Addressable x0,  int dwIndex,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = ImmGetGuideLineW$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetConversionStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$632.ImmGetConversionStatus$MH,"ImmGetConversionStatus");
    }
    public static int ImmGetConversionStatus ( Addressable x0,  Addressable lpfdwConversion,  Addressable lpfdwSentence) {
        var mh$ = ImmGetConversionStatus$MH();
        try {
            return (int)mh$.invokeExact(x0, lpfdwConversion, lpfdwSentence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetConversionStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$632.ImmSetConversionStatus$MH,"ImmSetConversionStatus");
    }
    public static int ImmSetConversionStatus ( Addressable x0,  int x1,  int x2) {
        var mh$ = ImmSetConversionStatus$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetOpenStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$632.ImmGetOpenStatus$MH,"ImmGetOpenStatus");
    }
    public static int ImmGetOpenStatus ( Addressable x0) {
        var mh$ = ImmGetOpenStatus$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetOpenStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$633.ImmSetOpenStatus$MH,"ImmSetOpenStatus");
    }
    public static int ImmSetOpenStatus ( Addressable x0,  int x1) {
        var mh$ = ImmSetOpenStatus$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionFontA$MH() {
        return RuntimeHelper.requireNonNull(constants$633.ImmGetCompositionFontA$MH,"ImmGetCompositionFontA");
    }
    public static int ImmGetCompositionFontA ( Addressable x0,  Addressable lplf) {
        var mh$ = ImmGetCompositionFontA$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionFontW$MH() {
        return RuntimeHelper.requireNonNull(constants$633.ImmGetCompositionFontW$MH,"ImmGetCompositionFontW");
    }
    public static int ImmGetCompositionFontW ( Addressable x0,  Addressable lplf) {
        var mh$ = ImmGetCompositionFontW$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionFontA$MH() {
        return RuntimeHelper.requireNonNull(constants$633.ImmSetCompositionFontA$MH,"ImmSetCompositionFontA");
    }
    public static int ImmSetCompositionFontA ( Addressable x0,  Addressable lplf) {
        var mh$ = ImmSetCompositionFontA$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionFontW$MH() {
        return RuntimeHelper.requireNonNull(constants$633.ImmSetCompositionFontW$MH,"ImmSetCompositionFontW");
    }
    public static int ImmSetCompositionFontW ( Addressable x0,  Addressable lplf) {
        var mh$ = ImmSetCompositionFontW$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmConfigureIMEA$MH() {
        return RuntimeHelper.requireNonNull(constants$633.ImmConfigureIMEA$MH,"ImmConfigureIMEA");
    }
    public static int ImmConfigureIMEA ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = ImmConfigureIMEA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmConfigureIMEW$MH() {
        return RuntimeHelper.requireNonNull(constants$634.ImmConfigureIMEW$MH,"ImmConfigureIMEW");
    }
    public static int ImmConfigureIMEW ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = ImmConfigureIMEW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEscapeA$MH() {
        return RuntimeHelper.requireNonNull(constants$634.ImmEscapeA$MH,"ImmEscapeA");
    }
    public static long ImmEscapeA ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = ImmEscapeA$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEscapeW$MH() {
        return RuntimeHelper.requireNonNull(constants$634.ImmEscapeW$MH,"ImmEscapeW");
    }
    public static long ImmEscapeW ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = ImmEscapeW$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetConversionListA$MH() {
        return RuntimeHelper.requireNonNull(constants$634.ImmGetConversionListA$MH,"ImmGetConversionListA");
    }
    public static int ImmGetConversionListA ( Addressable x0,  Addressable x1,  Addressable lpSrc,  Addressable lpDst,  int dwBufLen,  int uFlag) {
        var mh$ = ImmGetConversionListA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetConversionListW$MH() {
        return RuntimeHelper.requireNonNull(constants$634.ImmGetConversionListW$MH,"ImmGetConversionListW");
    }
    public static int ImmGetConversionListW ( Addressable x0,  Addressable x1,  Addressable lpSrc,  Addressable lpDst,  int dwBufLen,  int uFlag) {
        var mh$ = ImmGetConversionListW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmNotifyIME$MH() {
        return RuntimeHelper.requireNonNull(constants$634.ImmNotifyIME$MH,"ImmNotifyIME");
    }
    public static int ImmNotifyIME ( Addressable x0,  int dwAction,  int dwIndex,  int dwValue) {
        var mh$ = ImmNotifyIME$MH();
        try {
            return (int)mh$.invokeExact(x0, dwAction, dwIndex, dwValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetStatusWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$635.ImmGetStatusWindowPos$MH,"ImmGetStatusWindowPos");
    }
    public static int ImmGetStatusWindowPos ( Addressable x0,  Addressable lpptPos) {
        var mh$ = ImmGetStatusWindowPos$MH();
        try {
            return (int)mh$.invokeExact(x0, lpptPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetStatusWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$635.ImmSetStatusWindowPos$MH,"ImmSetStatusWindowPos");
    }
    public static int ImmSetStatusWindowPos ( Addressable x0,  Addressable lpptPos) {
        var mh$ = ImmSetStatusWindowPos$MH();
        try {
            return (int)mh$.invokeExact(x0, lpptPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$635.ImmGetCompositionWindow$MH,"ImmGetCompositionWindow");
    }
    public static int ImmGetCompositionWindow ( Addressable x0,  Addressable lpCompForm) {
        var mh$ = ImmGetCompositionWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, lpCompForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$635.ImmSetCompositionWindow$MH,"ImmSetCompositionWindow");
    }
    public static int ImmSetCompositionWindow ( Addressable x0,  Addressable lpCompForm) {
        var mh$ = ImmSetCompositionWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, lpCompForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$635.ImmGetCandidateWindow$MH,"ImmGetCandidateWindow");
    }
    public static int ImmGetCandidateWindow ( Addressable x0,  int x1,  Addressable lpCandidate) {
        var mh$ = ImmGetCandidateWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpCandidate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCandidateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$635.ImmSetCandidateWindow$MH,"ImmSetCandidateWindow");
    }
    public static int ImmSetCandidateWindow ( Addressable x0,  Addressable lpCandidate) {
        var mh$ = ImmSetCandidateWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, lpCandidate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmIsUIMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$636.ImmIsUIMessageA$MH,"ImmIsUIMessageA");
    }
    public static int ImmIsUIMessageA ( Addressable x0,  int x1,  long x2,  long x3) {
        var mh$ = ImmIsUIMessageA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmIsUIMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$636.ImmIsUIMessageW$MH,"ImmIsUIMessageW");
    }
    public static int ImmIsUIMessageW ( Addressable x0,  int x1,  long x2,  long x3) {
        var mh$ = ImmIsUIMessageW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetVirtualKey$MH() {
        return RuntimeHelper.requireNonNull(constants$636.ImmGetVirtualKey$MH,"ImmGetVirtualKey");
    }
    public static int ImmGetVirtualKey ( Addressable x0) {
        var mh$ = ImmGetVirtualKey$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmRegisterWordA$MH() {
        return RuntimeHelper.requireNonNull(constants$637.ImmRegisterWordA$MH,"ImmRegisterWordA");
    }
    public static int ImmRegisterWordA ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszRegister) {
        var mh$ = ImmRegisterWordA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszRegister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmRegisterWordW$MH() {
        return RuntimeHelper.requireNonNull(constants$637.ImmRegisterWordW$MH,"ImmRegisterWordW");
    }
    public static int ImmRegisterWordW ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszRegister) {
        var mh$ = ImmRegisterWordW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszRegister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmUnregisterWordA$MH() {
        return RuntimeHelper.requireNonNull(constants$637.ImmUnregisterWordA$MH,"ImmUnregisterWordA");
    }
    public static int ImmUnregisterWordA ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszUnregister) {
        var mh$ = ImmUnregisterWordA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszUnregister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmUnregisterWordW$MH() {
        return RuntimeHelper.requireNonNull(constants$637.ImmUnregisterWordW$MH,"ImmUnregisterWordW");
    }
    public static int ImmUnregisterWordW ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszUnregister) {
        var mh$ = ImmUnregisterWordW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszUnregister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetRegisterWordStyleA$MH() {
        return RuntimeHelper.requireNonNull(constants$637.ImmGetRegisterWordStyleA$MH,"ImmGetRegisterWordStyleA");
    }
    public static int ImmGetRegisterWordStyleA ( Addressable x0,  int nItem,  Addressable lpStyleBuf) {
        var mh$ = ImmGetRegisterWordStyleA$MH();
        try {
            return (int)mh$.invokeExact(x0, nItem, lpStyleBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetRegisterWordStyleW$MH() {
        return RuntimeHelper.requireNonNull(constants$638.ImmGetRegisterWordStyleW$MH,"ImmGetRegisterWordStyleW");
    }
    public static int ImmGetRegisterWordStyleW ( Addressable x0,  int nItem,  Addressable lpStyleBuf) {
        var mh$ = ImmGetRegisterWordStyleW$MH();
        try {
            return (int)mh$.invokeExact(x0, nItem, lpStyleBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEnumRegisterWordA$MH() {
        return RuntimeHelper.requireNonNull(constants$638.ImmEnumRegisterWordA$MH,"ImmEnumRegisterWordA");
    }
    public static int ImmEnumRegisterWordA ( Addressable x0,  Addressable x1,  Addressable lpszReading,  int x3,  Addressable lpszRegister,  Addressable x5) {
        var mh$ = ImmEnumRegisterWordA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpszReading, x3, lpszRegister, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEnumRegisterWordW$MH() {
        return RuntimeHelper.requireNonNull(constants$638.ImmEnumRegisterWordW$MH,"ImmEnumRegisterWordW");
    }
    public static int ImmEnumRegisterWordW ( Addressable x0,  Addressable x1,  Addressable lpszReading,  int x3,  Addressable lpszRegister,  Addressable x5) {
        var mh$ = ImmEnumRegisterWordW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpszReading, x3, lpszRegister, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDisableIME$MH() {
        return RuntimeHelper.requireNonNull(constants$638.ImmDisableIME$MH,"ImmDisableIME");
    }
    public static int ImmDisableIME ( int x0) {
        var mh$ = ImmDisableIME$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEnumInputContext$MH() {
        return RuntimeHelper.requireNonNull(constants$638.ImmEnumInputContext$MH,"ImmEnumInputContext");
    }
    public static int ImmEnumInputContext ( int idThread,  Addressable lpfn,  long lParam) {
        var mh$ = ImmEnumInputContext$MH();
        try {
            return (int)mh$.invokeExact(idThread, lpfn, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetImeMenuItemsA$MH() {
        return RuntimeHelper.requireNonNull(constants$638.ImmGetImeMenuItemsA$MH,"ImmGetImeMenuItemsA");
    }
    public static int ImmGetImeMenuItemsA ( Addressable x0,  int x1,  int x2,  Addressable lpImeParentMenu,  Addressable lpImeMenu,  int dwSize) {
        var mh$ = ImmGetImeMenuItemsA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetImeMenuItemsW$MH() {
        return RuntimeHelper.requireNonNull(constants$639.ImmGetImeMenuItemsW$MH,"ImmGetImeMenuItemsW");
    }
    public static int ImmGetImeMenuItemsW ( Addressable x0,  int x1,  int x2,  Addressable lpImeParentMenu,  Addressable lpImeMenu,  int dwSize) {
        var mh$ = ImmGetImeMenuItemsW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDisableTextFrameService$MH() {
        return RuntimeHelper.requireNonNull(constants$639.ImmDisableTextFrameService$MH,"ImmDisableTextFrameService");
    }
    public static int ImmDisableTextFrameService ( int idThread) {
        var mh$ = ImmDisableTextFrameService$MH();
        try {
            return (int)mh$.invokeExact(idThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDisableLegacyIME$MH() {
        return RuntimeHelper.requireNonNull(constants$639.ImmDisableLegacyIME$MH,"ImmDisableLegacyIME");
    }
    public static int ImmDisableLegacyIME () {
        var mh$ = ImmDisableLegacyIME$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfShort GLshort = Constants$root.C_SHORT$LAYOUT;
    public static OfInt GLint = Constants$root.C_LONG$LAYOUT;
    public static OfInt GLsizei = Constants$root.C_LONG$LAYOUT;
    public static OfFloat GLfloat = Constants$root.C_FLOAT$LAYOUT;
    public static OfFloat GLclampf = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble GLdouble = Constants$root.C_DOUBLE$LAYOUT;
    public static OfDouble GLclampd = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle glAccum$MH() {
        return RuntimeHelper.requireNonNull(constants$639.glAccum$MH,"glAccum");
    }
    public static void glAccum ( int op,  float value) {
        var mh$ = glAccum$MH();
        try {
            mh$.invokeExact(op, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAlphaFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$639.glAlphaFunc$MH,"glAlphaFunc");
    }
    public static void glAlphaFunc ( int func,  float ref) {
        var mh$ = glAlphaFunc$MH();
        try {
            mh$.invokeExact(func, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAreTexturesResident$MH() {
        return RuntimeHelper.requireNonNull(constants$639.glAreTexturesResident$MH,"glAreTexturesResident");
    }
    public static byte glAreTexturesResident ( int n,  Addressable textures,  Addressable residences) {
        var mh$ = glAreTexturesResident$MH();
        try {
            return (byte)mh$.invokeExact(n, textures, residences);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glArrayElement$MH() {
        return RuntimeHelper.requireNonNull(constants$640.glArrayElement$MH,"glArrayElement");
    }
    public static void glArrayElement ( int i) {
        var mh$ = glArrayElement$MH();
        try {
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBegin$MH() {
        return RuntimeHelper.requireNonNull(constants$640.glBegin$MH,"glBegin");
    }
    public static void glBegin ( int mode) {
        var mh$ = glBegin$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$640.glBindTexture$MH,"glBindTexture");
    }
    public static void glBindTexture ( int target,  int texture) {
        var mh$ = glBindTexture$MH();
        try {
            mh$.invokeExact(target, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$640.glBitmap$MH,"glBitmap");
    }
    public static void glBitmap ( int width,  int height,  float xorig,  float yorig,  float xmove,  float ymove,  Addressable bitmap) {
        var mh$ = glBitmap$MH();
        try {
            mh$.invokeExact(width, height, xorig, yorig, xmove, ymove, bitmap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$640.glBlendFunc$MH,"glBlendFunc");
    }
    public static void glBlendFunc ( int sfactor,  int dfactor) {
        var mh$ = glBlendFunc$MH();
        try {
            mh$.invokeExact(sfactor, dfactor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCallList$MH() {
        return RuntimeHelper.requireNonNull(constants$640.glCallList$MH,"glCallList");
    }
    public static void glCallList ( int list) {
        var mh$ = glCallList$MH();
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCallLists$MH() {
        return RuntimeHelper.requireNonNull(constants$641.glCallLists$MH,"glCallLists");
    }
    public static void glCallLists ( int n,  int type,  Addressable lists) {
        var mh$ = glCallLists$MH();
        try {
            mh$.invokeExact(n, type, lists);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClear$MH() {
        return RuntimeHelper.requireNonNull(constants$641.glClear$MH,"glClear");
    }
    public static void glClear ( int mask) {
        var mh$ = glClear$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearAccum$MH() {
        return RuntimeHelper.requireNonNull(constants$641.glClearAccum$MH,"glClearAccum");
    }
    public static void glClearAccum ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glClearAccum$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearColor$MH() {
        return RuntimeHelper.requireNonNull(constants$641.glClearColor$MH,"glClearColor");
    }
    public static void glClearColor ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glClearColor$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearDepth$MH() {
        return RuntimeHelper.requireNonNull(constants$641.glClearDepth$MH,"glClearDepth");
    }
    public static void glClearDepth ( double depth) {
        var mh$ = glClearDepth$MH();
        try {
            mh$.invokeExact(depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$641.glClearIndex$MH,"glClearIndex");
    }
    public static void glClearIndex ( float c) {
        var mh$ = glClearIndex$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearStencil$MH() {
        return RuntimeHelper.requireNonNull(constants$642.glClearStencil$MH,"glClearStencil");
    }
    public static void glClearStencil ( int s) {
        var mh$ = glClearStencil$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClipPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$642.glClipPlane$MH,"glClipPlane");
    }
    public static void glClipPlane ( int plane,  Addressable equation) {
        var mh$ = glClipPlane$MH();
        try {
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3b$MH() {
        return RuntimeHelper.requireNonNull(constants$642.glColor3b$MH,"glColor3b");
    }
    public static void glColor3b ( byte red,  byte green,  byte blue) {
        var mh$ = glColor3b$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3bv$MH() {
        return RuntimeHelper.requireNonNull(constants$642.glColor3bv$MH,"glColor3bv");
    }
    public static void glColor3bv ( Addressable v) {
        var mh$ = glColor3bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3d$MH() {
        return RuntimeHelper.requireNonNull(constants$642.glColor3d$MH,"glColor3d");
    }
    public static void glColor3d ( double red,  double green,  double blue) {
        var mh$ = glColor3d$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$642.glColor3dv$MH,"glColor3dv");
    }
    public static void glColor3dv ( Addressable v) {
        var mh$ = glColor3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3f$MH() {
        return RuntimeHelper.requireNonNull(constants$643.glColor3f$MH,"glColor3f");
    }
    public static void glColor3f ( float red,  float green,  float blue) {
        var mh$ = glColor3f$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$643.glColor3fv$MH,"glColor3fv");
    }
    public static void glColor3fv ( Addressable v) {
        var mh$ = glColor3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3i$MH() {
        return RuntimeHelper.requireNonNull(constants$643.glColor3i$MH,"glColor3i");
    }
    public static void glColor3i ( int red,  int green,  int blue) {
        var mh$ = glColor3i$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$643.glColor3iv$MH,"glColor3iv");
    }
    public static void glColor3iv ( Addressable v) {
        var mh$ = glColor3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3s$MH() {
        return RuntimeHelper.requireNonNull(constants$643.glColor3s$MH,"glColor3s");
    }
    public static void glColor3s ( short red,  short green,  short blue) {
        var mh$ = glColor3s$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$643.glColor3sv$MH,"glColor3sv");
    }
    public static void glColor3sv ( Addressable v) {
        var mh$ = glColor3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ub$MH() {
        return RuntimeHelper.requireNonNull(constants$644.glColor3ub$MH,"glColor3ub");
    }
    public static void glColor3ub ( byte red,  byte green,  byte blue) {
        var mh$ = glColor3ub$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$644.glColor3ubv$MH,"glColor3ubv");
    }
    public static void glColor3ubv ( Addressable v) {
        var mh$ = glColor3ubv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$644.glColor3ui$MH,"glColor3ui");
    }
    public static void glColor3ui ( int red,  int green,  int blue) {
        var mh$ = glColor3ui$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$644.glColor3uiv$MH,"glColor3uiv");
    }
    public static void glColor3uiv ( Addressable v) {
        var mh$ = glColor3uiv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3us$MH() {
        return RuntimeHelper.requireNonNull(constants$644.glColor3us$MH,"glColor3us");
    }
    public static void glColor3us ( short red,  short green,  short blue) {
        var mh$ = glColor3us$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3usv$MH() {
        return RuntimeHelper.requireNonNull(constants$644.glColor3usv$MH,"glColor3usv");
    }
    public static void glColor3usv ( Addressable v) {
        var mh$ = glColor3usv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4b$MH() {
        return RuntimeHelper.requireNonNull(constants$645.glColor4b$MH,"glColor4b");
    }
    public static void glColor4b ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = glColor4b$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4bv$MH() {
        return RuntimeHelper.requireNonNull(constants$645.glColor4bv$MH,"glColor4bv");
    }
    public static void glColor4bv ( Addressable v) {
        var mh$ = glColor4bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4d$MH() {
        return RuntimeHelper.requireNonNull(constants$645.glColor4d$MH,"glColor4d");
    }
    public static void glColor4d ( double red,  double green,  double blue,  double alpha) {
        var mh$ = glColor4d$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$645.glColor4dv$MH,"glColor4dv");
    }
    public static void glColor4dv ( Addressable v) {
        var mh$ = glColor4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4f$MH() {
        return RuntimeHelper.requireNonNull(constants$645.glColor4f$MH,"glColor4f");
    }
    public static void glColor4f ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glColor4f$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$645.glColor4fv$MH,"glColor4fv");
    }
    public static void glColor4fv ( Addressable v) {
        var mh$ = glColor4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4i$MH() {
        return RuntimeHelper.requireNonNull(constants$646.glColor4i$MH,"glColor4i");
    }
    public static void glColor4i ( int red,  int green,  int blue,  int alpha) {
        var mh$ = glColor4i$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$646.glColor4iv$MH,"glColor4iv");
    }
    public static void glColor4iv ( Addressable v) {
        var mh$ = glColor4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4s$MH() {
        return RuntimeHelper.requireNonNull(constants$646.glColor4s$MH,"glColor4s");
    }
    public static void glColor4s ( short red,  short green,  short blue,  short alpha) {
        var mh$ = glColor4s$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$646.glColor4sv$MH,"glColor4sv");
    }
    public static void glColor4sv ( Addressable v) {
        var mh$ = glColor4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ub$MH() {
        return RuntimeHelper.requireNonNull(constants$646.glColor4ub$MH,"glColor4ub");
    }
    public static void glColor4ub ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = glColor4ub$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$646.glColor4ubv$MH,"glColor4ubv");
    }
    public static void glColor4ubv ( Addressable v) {
        var mh$ = glColor4ubv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ui$MH() {
        return RuntimeHelper.requireNonNull(constants$647.glColor4ui$MH,"glColor4ui");
    }
    public static void glColor4ui ( int red,  int green,  int blue,  int alpha) {
        var mh$ = glColor4ui$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$647.glColor4uiv$MH,"glColor4uiv");
    }
    public static void glColor4uiv ( Addressable v) {
        var mh$ = glColor4uiv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4us$MH() {
        return RuntimeHelper.requireNonNull(constants$647.glColor4us$MH,"glColor4us");
    }
    public static void glColor4us ( short red,  short green,  short blue,  short alpha) {
        var mh$ = glColor4us$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4usv$MH() {
        return RuntimeHelper.requireNonNull(constants$647.glColor4usv$MH,"glColor4usv");
    }
    public static void glColor4usv ( Addressable v) {
        var mh$ = glColor4usv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMask$MH() {
        return RuntimeHelper.requireNonNull(constants$647.glColorMask$MH,"glColorMask");
    }
    public static void glColorMask ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = glColorMask$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$647.glColorMaterial$MH,"glColorMaterial");
    }
    public static void glColorMaterial ( int face,  int mode) {
        var mh$ = glColorMaterial$MH();
        try {
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$648.glColorPointer$MH,"glColorPointer");
    }
    public static void glColorPointer ( int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glColorPointer$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$648.glCopyPixels$MH,"glCopyPixels");
    }
    public static void glCopyPixels ( int x,  int y,  int width,  int height,  int type) {
        var mh$ = glCopyPixels$MH();
        try {
            mh$.invokeExact(x, y, width, height, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$648.glCopyTexImage1D$MH,"glCopyTexImage1D");
    }
    public static void glCopyTexImage1D ( int target,  int level,  int internalFormat,  int x,  int y,  int width,  int border) {
        var mh$ = glCopyTexImage1D$MH();
        try {
            mh$.invokeExact(target, level, internalFormat, x, y, width, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$648.glCopyTexImage2D$MH,"glCopyTexImage2D");
    }
    public static void glCopyTexImage2D ( int target,  int level,  int internalFormat,  int x,  int y,  int width,  int height,  int border) {
        var mh$ = glCopyTexImage2D$MH();
        try {
            mh$.invokeExact(target, level, internalFormat, x, y, width, height, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$648.glCopyTexSubImage1D$MH,"glCopyTexSubImage1D");
    }
    public static void glCopyTexSubImage1D ( int target,  int level,  int xoffset,  int x,  int y,  int width) {
        var mh$ = glCopyTexSubImage1D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$648.glCopyTexSubImage2D$MH,"glCopyTexSubImage2D");
    }
    public static void glCopyTexSubImage2D ( int target,  int level,  int xoffset,  int yoffset,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyTexSubImage2D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCullFace$MH() {
        return RuntimeHelper.requireNonNull(constants$649.glCullFace$MH,"glCullFace");
    }
    public static void glCullFace ( int mode) {
        var mh$ = glCullFace$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteLists$MH() {
        return RuntimeHelper.requireNonNull(constants$649.glDeleteLists$MH,"glDeleteLists");
    }
    public static void glDeleteLists ( int list,  int range) {
        var mh$ = glDeleteLists$MH();
        try {
            mh$.invokeExact(list, range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$649.glDeleteTextures$MH,"glDeleteTextures");
    }
    public static void glDeleteTextures ( int n,  Addressable textures) {
        var mh$ = glDeleteTextures$MH();
        try {
            mh$.invokeExact(n, textures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$649.glDepthFunc$MH,"glDepthFunc");
    }
    public static void glDepthFunc ( int func) {
        var mh$ = glDepthFunc$MH();
        try {
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthMask$MH() {
        return RuntimeHelper.requireNonNull(constants$649.glDepthMask$MH,"glDepthMask");
    }
    public static void glDepthMask ( byte flag) {
        var mh$ = glDepthMask$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthRange$MH() {
        return RuntimeHelper.requireNonNull(constants$649.glDepthRange$MH,"glDepthRange");
    }
    public static void glDepthRange ( double zNear,  double zFar) {
        var mh$ = glDepthRange$MH();
        try {
            mh$.invokeExact(zNear, zFar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisable$MH() {
        return RuntimeHelper.requireNonNull(constants$650.glDisable$MH,"glDisable");
    }
    public static void glDisable ( int cap) {
        var mh$ = glDisable$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableClientState$MH() {
        return RuntimeHelper.requireNonNull(constants$650.glDisableClientState$MH,"glDisableClientState");
    }
    public static void glDisableClientState ( int array) {
        var mh$ = glDisableClientState$MH();
        try {
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawArrays$MH() {
        return RuntimeHelper.requireNonNull(constants$650.glDrawArrays$MH,"glDrawArrays");
    }
    public static void glDrawArrays ( int mode,  int first,  int count) {
        var mh$ = glDrawArrays$MH();
        try {
            mh$.invokeExact(mode, first, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$650.glDrawBuffer$MH,"glDrawBuffer");
    }
    public static void glDrawBuffer ( int mode) {
        var mh$ = glDrawBuffer$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElements$MH() {
        return RuntimeHelper.requireNonNull(constants$650.glDrawElements$MH,"glDrawElements");
    }
    public static void glDrawElements ( int mode,  int count,  int type,  Addressable indices) {
        var mh$ = glDrawElements$MH();
        try {
            mh$.invokeExact(mode, count, type, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$650.glDrawPixels$MH,"glDrawPixels");
    }
    public static void glDrawPixels ( int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = glDrawPixels$MH();
        try {
            mh$.invokeExact(width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlag$MH() {
        return RuntimeHelper.requireNonNull(constants$651.glEdgeFlag$MH,"glEdgeFlag");
    }
    public static void glEdgeFlag ( byte flag) {
        var mh$ = glEdgeFlag$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlagPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$651.glEdgeFlagPointer$MH,"glEdgeFlagPointer");
    }
    public static void glEdgeFlagPointer ( int stride,  Addressable pointer) {
        var mh$ = glEdgeFlagPointer$MH();
        try {
            mh$.invokeExact(stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlagv$MH() {
        return RuntimeHelper.requireNonNull(constants$651.glEdgeFlagv$MH,"glEdgeFlagv");
    }
    public static void glEdgeFlagv ( Addressable flag) {
        var mh$ = glEdgeFlagv$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnable$MH() {
        return RuntimeHelper.requireNonNull(constants$651.glEnable$MH,"glEnable");
    }
    public static void glEnable ( int cap) {
        var mh$ = glEnable$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableClientState$MH() {
        return RuntimeHelper.requireNonNull(constants$651.glEnableClientState$MH,"glEnableClientState");
    }
    public static void glEnableClientState ( int array) {
        var mh$ = glEnableClientState$MH();
        try {
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$651.glEnd$MH,"glEnd");
    }
    public static void glEnd () {
        var mh$ = glEnd$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndList$MH() {
        return RuntimeHelper.requireNonNull(constants$652.glEndList$MH,"glEndList");
    }
    public static void glEndList () {
        var mh$ = glEndList$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1d$MH() {
        return RuntimeHelper.requireNonNull(constants$652.glEvalCoord1d$MH,"glEvalCoord1d");
    }
    public static void glEvalCoord1d ( double u) {
        var mh$ = glEvalCoord1d$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$652.glEvalCoord1dv$MH,"glEvalCoord1dv");
    }
    public static void glEvalCoord1dv ( Addressable u) {
        var mh$ = glEvalCoord1dv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1f$MH() {
        return RuntimeHelper.requireNonNull(constants$652.glEvalCoord1f$MH,"glEvalCoord1f");
    }
    public static void glEvalCoord1f ( float u) {
        var mh$ = glEvalCoord1f$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$652.glEvalCoord1fv$MH,"glEvalCoord1fv");
    }
    public static void glEvalCoord1fv ( Addressable u) {
        var mh$ = glEvalCoord1fv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2d$MH() {
        return RuntimeHelper.requireNonNull(constants$652.glEvalCoord2d$MH,"glEvalCoord2d");
    }
    public static void glEvalCoord2d ( double u,  double v) {
        var mh$ = glEvalCoord2d$MH();
        try {
            mh$.invokeExact(u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$653.glEvalCoord2dv$MH,"glEvalCoord2dv");
    }
    public static void glEvalCoord2dv ( Addressable u) {
        var mh$ = glEvalCoord2dv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$653.glEvalCoord2f$MH,"glEvalCoord2f");
    }
    public static void glEvalCoord2f ( float u,  float v) {
        var mh$ = glEvalCoord2f$MH();
        try {
            mh$.invokeExact(u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$653.glEvalCoord2fv$MH,"glEvalCoord2fv");
    }
    public static void glEvalCoord2fv ( Addressable u) {
        var mh$ = glEvalCoord2fv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalMesh1$MH() {
        return RuntimeHelper.requireNonNull(constants$653.glEvalMesh1$MH,"glEvalMesh1");
    }
    public static void glEvalMesh1 ( int mode,  int i1,  int i2) {
        var mh$ = glEvalMesh1$MH();
        try {
            mh$.invokeExact(mode, i1, i2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalMesh2$MH() {
        return RuntimeHelper.requireNonNull(constants$653.glEvalMesh2$MH,"glEvalMesh2");
    }
    public static void glEvalMesh2 ( int mode,  int i1,  int i2,  int j1,  int j2) {
        var mh$ = glEvalMesh2$MH();
        try {
            mh$.invokeExact(mode, i1, i2, j1, j2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalPoint1$MH() {
        return RuntimeHelper.requireNonNull(constants$653.glEvalPoint1$MH,"glEvalPoint1");
    }
    public static void glEvalPoint1 ( int i) {
        var mh$ = glEvalPoint1$MH();
        try {
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalPoint2$MH() {
        return RuntimeHelper.requireNonNull(constants$654.glEvalPoint2$MH,"glEvalPoint2");
    }
    public static void glEvalPoint2 ( int i,  int j) {
        var mh$ = glEvalPoint2$MH();
        try {
            mh$.invokeExact(i, j);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFeedbackBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$654.glFeedbackBuffer$MH,"glFeedbackBuffer");
    }
    public static void glFeedbackBuffer ( int size,  int type,  Addressable buffer) {
        var mh$ = glFeedbackBuffer$MH();
        try {
            mh$.invokeExact(size, type, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinish$MH() {
        return RuntimeHelper.requireNonNull(constants$654.glFinish$MH,"glFinish");
    }
    public static void glFinish () {
        var mh$ = glFinish$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$654.glFlush$MH,"glFlush");
    }
    public static void glFlush () {
        var mh$ = glFlush$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogf$MH() {
        return RuntimeHelper.requireNonNull(constants$654.glFogf$MH,"glFogf");
    }
    public static void glFogf ( int pname,  float param) {
        var mh$ = glFogf$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogfv$MH() {
        return RuntimeHelper.requireNonNull(constants$654.glFogfv$MH,"glFogfv");
    }
    public static void glFogfv ( int pname,  Addressable params) {
        var mh$ = glFogfv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogi$MH() {
        return RuntimeHelper.requireNonNull(constants$655.glFogi$MH,"glFogi");
    }
    public static void glFogi ( int pname,  int param) {
        var mh$ = glFogi$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogiv$MH() {
        return RuntimeHelper.requireNonNull(constants$655.glFogiv$MH,"glFogiv");
    }
    public static void glFogiv ( int pname,  Addressable params) {
        var mh$ = glFogiv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrontFace$MH() {
        return RuntimeHelper.requireNonNull(constants$655.glFrontFace$MH,"glFrontFace");
    }
    public static void glFrontFace ( int mode) {
        var mh$ = glFrontFace$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrustum$MH() {
        return RuntimeHelper.requireNonNull(constants$655.glFrustum$MH,"glFrustum");
    }
    public static void glFrustum ( double left,  double right,  double bottom,  double top,  double zNear,  double zFar) {
        var mh$ = glFrustum$MH();
        try {
            mh$.invokeExact(left, right, bottom, top, zNear, zFar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenLists$MH() {
        return RuntimeHelper.requireNonNull(constants$655.glGenLists$MH,"glGenLists");
    }
    public static int glGenLists ( int range) {
        var mh$ = glGenLists$MH();
        try {
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$655.glGenTextures$MH,"glGenTextures");
    }
    public static void glGenTextures ( int n,  Addressable textures) {
        var mh$ = glGenTextures$MH();
        try {
            mh$.invokeExact(n, textures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBooleanv$MH() {
        return RuntimeHelper.requireNonNull(constants$656.glGetBooleanv$MH,"glGetBooleanv");
    }
    public static void glGetBooleanv ( int pname,  Addressable params) {
        var mh$ = glGetBooleanv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetClipPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$656.glGetClipPlane$MH,"glGetClipPlane");
    }
    public static void glGetClipPlane ( int plane,  Addressable equation) {
        var mh$ = glGetClipPlane$MH();
        try {
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetDoublev$MH() {
        return RuntimeHelper.requireNonNull(constants$656.glGetDoublev$MH,"glGetDoublev");
    }
    public static void glGetDoublev ( int pname,  Addressable params) {
        var mh$ = glGetDoublev$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetError$MH() {
        return RuntimeHelper.requireNonNull(constants$656.glGetError$MH,"glGetError");
    }
    public static int glGetError () {
        var mh$ = glGetError$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFloatv$MH() {
        return RuntimeHelper.requireNonNull(constants$656.glGetFloatv$MH,"glGetFloatv");
    }
    public static void glGetFloatv ( int pname,  Addressable params) {
        var mh$ = glGetFloatv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetIntegerv$MH() {
        return RuntimeHelper.requireNonNull(constants$656.glGetIntegerv$MH,"glGetIntegerv");
    }
    public static void glGetIntegerv ( int pname,  Addressable params) {
        var mh$ = glGetIntegerv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLightfv$MH() {
        return RuntimeHelper.requireNonNull(constants$657.glGetLightfv$MH,"glGetLightfv");
    }
    public static void glGetLightfv ( int light,  int pname,  Addressable params) {
        var mh$ = glGetLightfv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLightiv$MH() {
        return RuntimeHelper.requireNonNull(constants$657.glGetLightiv$MH,"glGetLightiv");
    }
    public static void glGetLightiv ( int light,  int pname,  Addressable params) {
        var mh$ = glGetLightiv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapdv$MH() {
        return RuntimeHelper.requireNonNull(constants$657.glGetMapdv$MH,"glGetMapdv");
    }
    public static void glGetMapdv ( int target,  int query,  Addressable v) {
        var mh$ = glGetMapdv$MH();
        try {
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$657.glGetMapfv$MH,"glGetMapfv");
    }
    public static void glGetMapfv ( int target,  int query,  Addressable v) {
        var mh$ = glGetMapfv$MH();
        try {
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapiv$MH() {
        return RuntimeHelper.requireNonNull(constants$657.glGetMapiv$MH,"glGetMapiv");
    }
    public static void glGetMapiv ( int target,  int query,  Addressable v) {
        var mh$ = glGetMapiv$MH();
        try {
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMaterialfv$MH() {
        return RuntimeHelper.requireNonNull(constants$657.glGetMaterialfv$MH,"glGetMaterialfv");
    }
    public static void glGetMaterialfv ( int face,  int pname,  Addressable params) {
        var mh$ = glGetMaterialfv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMaterialiv$MH() {
        return RuntimeHelper.requireNonNull(constants$658.glGetMaterialiv$MH,"glGetMaterialiv");
    }
    public static void glGetMaterialiv ( int face,  int pname,  Addressable params) {
        var mh$ = glGetMaterialiv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$658.glGetPixelMapfv$MH,"glGetPixelMapfv");
    }
    public static void glGetPixelMapfv ( int map,  Addressable values) {
        var mh$ = glGetPixelMapfv$MH();
        try {
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$658.glGetPixelMapuiv$MH,"glGetPixelMapuiv");
    }
    public static void glGetPixelMapuiv ( int map,  Addressable values) {
        var mh$ = glGetPixelMapuiv$MH();
        try {
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapusv$MH() {
        return RuntimeHelper.requireNonNull(constants$658.glGetPixelMapusv$MH,"glGetPixelMapusv");
    }
    public static void glGetPixelMapusv ( int map,  Addressable values) {
        var mh$ = glGetPixelMapusv$MH();
        try {
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPointerv$MH() {
        return RuntimeHelper.requireNonNull(constants$658.glGetPointerv$MH,"glGetPointerv");
    }
    public static void glGetPointerv ( int pname,  Addressable params) {
        var mh$ = glGetPointerv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPolygonStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$658.glGetPolygonStipple$MH,"glGetPolygonStipple");
    }
    public static void glGetPolygonStipple ( Addressable mask) {
        var mh$ = glGetPolygonStipple$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetString$MH() {
        return RuntimeHelper.requireNonNull(constants$659.glGetString$MH,"glGetString");
    }
    public static MemoryAddress glGetString ( int name) {
        var mh$ = glGetString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexEnvfv$MH() {
        return RuntimeHelper.requireNonNull(constants$659.glGetTexEnvfv$MH,"glGetTexEnvfv");
    }
    public static void glGetTexEnvfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexEnvfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexEnviv$MH() {
        return RuntimeHelper.requireNonNull(constants$659.glGetTexEnviv$MH,"glGetTexEnviv");
    }
    public static void glGetTexEnviv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexEnviv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGendv$MH() {
        return RuntimeHelper.requireNonNull(constants$659.glGetTexGendv$MH,"glGetTexGendv");
    }
    public static void glGetTexGendv ( int coord,  int pname,  Addressable params) {
        var mh$ = glGetTexGendv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGenfv$MH() {
        return RuntimeHelper.requireNonNull(constants$659.glGetTexGenfv$MH,"glGetTexGenfv");
    }
    public static void glGetTexGenfv ( int coord,  int pname,  Addressable params) {
        var mh$ = glGetTexGenfv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGeniv$MH() {
        return RuntimeHelper.requireNonNull(constants$659.glGetTexGeniv$MH,"glGetTexGeniv");
    }
    public static void glGetTexGeniv ( int coord,  int pname,  Addressable params) {
        var mh$ = glGetTexGeniv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexImage$MH() {
        return RuntimeHelper.requireNonNull(constants$660.glGetTexImage$MH,"glGetTexImage");
    }
    public static void glGetTexImage ( int target,  int level,  int format,  int type,  Addressable pixels) {
        var mh$ = glGetTexImage$MH();
        try {
            mh$.invokeExact(target, level, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexLevelParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$660.glGetTexLevelParameterfv$MH,"glGetTexLevelParameterfv");
    }
    public static void glGetTexLevelParameterfv ( int target,  int level,  int pname,  Addressable params) {
        var mh$ = glGetTexLevelParameterfv$MH();
        try {
            mh$.invokeExact(target, level, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexLevelParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$660.glGetTexLevelParameteriv$MH,"glGetTexLevelParameteriv");
    }
    public static void glGetTexLevelParameteriv ( int target,  int level,  int pname,  Addressable params) {
        var mh$ = glGetTexLevelParameteriv$MH();
        try {
            mh$.invokeExact(target, level, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$660.glGetTexParameterfv$MH,"glGetTexParameterfv");
    }
    public static void glGetTexParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$660.glGetTexParameteriv$MH,"glGetTexParameteriv");
    }
    public static void glGetTexParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glHint$MH() {
        return RuntimeHelper.requireNonNull(constants$660.glHint$MH,"glHint");
    }
    public static void glHint ( int target,  int mode) {
        var mh$ = glHint$MH();
        try {
            mh$.invokeExact(target, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexMask$MH() {
        return RuntimeHelper.requireNonNull(constants$661.glIndexMask$MH,"glIndexMask");
    }
    public static void glIndexMask ( int mask) {
        var mh$ = glIndexMask$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$661.glIndexPointer$MH,"glIndexPointer");
    }
    public static void glIndexPointer ( int type,  int stride,  Addressable pointer) {
        var mh$ = glIndexPointer$MH();
        try {
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexd$MH() {
        return RuntimeHelper.requireNonNull(constants$661.glIndexd$MH,"glIndexd");
    }
    public static void glIndexd ( double c) {
        var mh$ = glIndexd$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexdv$MH() {
        return RuntimeHelper.requireNonNull(constants$661.glIndexdv$MH,"glIndexdv");
    }
    public static void glIndexdv ( Addressable c) {
        var mh$ = glIndexdv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexf$MH() {
        return RuntimeHelper.requireNonNull(constants$661.glIndexf$MH,"glIndexf");
    }
    public static void glIndexf ( float c) {
        var mh$ = glIndexf$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexfv$MH() {
        return RuntimeHelper.requireNonNull(constants$661.glIndexfv$MH,"glIndexfv");
    }
    public static void glIndexfv ( Addressable c) {
        var mh$ = glIndexfv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexi$MH() {
        return RuntimeHelper.requireNonNull(constants$662.glIndexi$MH,"glIndexi");
    }
    public static void glIndexi ( int c) {
        var mh$ = glIndexi$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexiv$MH() {
        return RuntimeHelper.requireNonNull(constants$662.glIndexiv$MH,"glIndexiv");
    }
    public static void glIndexiv ( Addressable c) {
        var mh$ = glIndexiv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexs$MH() {
        return RuntimeHelper.requireNonNull(constants$662.glIndexs$MH,"glIndexs");
    }
    public static void glIndexs ( short c) {
        var mh$ = glIndexs$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexsv$MH() {
        return RuntimeHelper.requireNonNull(constants$662.glIndexsv$MH,"glIndexsv");
    }
    public static void glIndexsv ( Addressable c) {
        var mh$ = glIndexsv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexub$MH() {
        return RuntimeHelper.requireNonNull(constants$662.glIndexub$MH,"glIndexub");
    }
    public static void glIndexub ( byte c) {
        var mh$ = glIndexub$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexubv$MH() {
        return RuntimeHelper.requireNonNull(constants$662.glIndexubv$MH,"glIndexubv");
    }
    public static void glIndexubv ( Addressable c) {
        var mh$ = glIndexubv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInitNames$MH() {
        return RuntimeHelper.requireNonNull(constants$663.glInitNames$MH,"glInitNames");
    }
    public static void glInitNames () {
        var mh$ = glInitNames$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInterleavedArrays$MH() {
        return RuntimeHelper.requireNonNull(constants$663.glInterleavedArrays$MH,"glInterleavedArrays");
    }
    public static void glInterleavedArrays ( int format,  int stride,  Addressable pointer) {
        var mh$ = glInterleavedArrays$MH();
        try {
            mh$.invokeExact(format, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$663.glIsEnabled$MH,"glIsEnabled");
    }
    public static byte glIsEnabled ( int cap) {
        var mh$ = glIsEnabled$MH();
        try {
            return (byte)mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsList$MH() {
        return RuntimeHelper.requireNonNull(constants$663.glIsList$MH,"glIsList");
    }
    public static byte glIsList ( int list) {
        var mh$ = glIsList$MH();
        try {
            return (byte)mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$663.glIsTexture$MH,"glIsTexture");
    }
    public static byte glIsTexture ( int texture) {
        var mh$ = glIsTexture$MH();
        try {
            return (byte)mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModelf$MH() {
        return RuntimeHelper.requireNonNull(constants$663.glLightModelf$MH,"glLightModelf");
    }
    public static void glLightModelf ( int pname,  float param) {
        var mh$ = glLightModelf$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModelfv$MH() {
        return RuntimeHelper.requireNonNull(constants$664.glLightModelfv$MH,"glLightModelfv");
    }
    public static void glLightModelfv ( int pname,  Addressable params) {
        var mh$ = glLightModelfv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModeli$MH() {
        return RuntimeHelper.requireNonNull(constants$664.glLightModeli$MH,"glLightModeli");
    }
    public static void glLightModeli ( int pname,  int param) {
        var mh$ = glLightModeli$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModeliv$MH() {
        return RuntimeHelper.requireNonNull(constants$664.glLightModeliv$MH,"glLightModeliv");
    }
    public static void glLightModeliv ( int pname,  Addressable params) {
        var mh$ = glLightModeliv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightf$MH() {
        return RuntimeHelper.requireNonNull(constants$664.glLightf$MH,"glLightf");
    }
    public static void glLightf ( int light,  int pname,  float param) {
        var mh$ = glLightf$MH();
        try {
            mh$.invokeExact(light, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightfv$MH() {
        return RuntimeHelper.requireNonNull(constants$664.glLightfv$MH,"glLightfv");
    }
    public static void glLightfv ( int light,  int pname,  Addressable params) {
        var mh$ = glLightfv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLighti$MH() {
        return RuntimeHelper.requireNonNull(constants$664.glLighti$MH,"glLighti");
    }
    public static void glLighti ( int light,  int pname,  int param) {
        var mh$ = glLighti$MH();
        try {
            mh$.invokeExact(light, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightiv$MH() {
        return RuntimeHelper.requireNonNull(constants$665.glLightiv$MH,"glLightiv");
    }
    public static void glLightiv ( int light,  int pname,  Addressable params) {
        var mh$ = glLightiv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLineStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$665.glLineStipple$MH,"glLineStipple");
    }
    public static void glLineStipple ( int factor,  short pattern) {
        var mh$ = glLineStipple$MH();
        try {
            mh$.invokeExact(factor, pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLineWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$665.glLineWidth$MH,"glLineWidth");
    }
    public static void glLineWidth ( float width) {
        var mh$ = glLineWidth$MH();
        try {
            mh$.invokeExact(width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glListBase$MH() {
        return RuntimeHelper.requireNonNull(constants$665.glListBase$MH,"glListBase");
    }
    public static void glListBase ( int base) {
        var mh$ = glListBase$MH();
        try {
            mh$.invokeExact(base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadIdentity$MH() {
        return RuntimeHelper.requireNonNull(constants$665.glLoadIdentity$MH,"glLoadIdentity");
    }
    public static void glLoadIdentity () {
        var mh$ = glLoadIdentity$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$665.glLoadMatrixd$MH,"glLoadMatrixd");
    }
    public static void glLoadMatrixd ( Addressable m) {
        var mh$ = glLoadMatrixd$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$666.glLoadMatrixf$MH,"glLoadMatrixf");
    }
    public static void glLoadMatrixf ( Addressable m) {
        var mh$ = glLoadMatrixf$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadName$MH() {
        return RuntimeHelper.requireNonNull(constants$666.glLoadName$MH,"glLoadName");
    }
    public static void glLoadName ( int name) {
        var mh$ = glLoadName$MH();
        try {
            mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLogicOp$MH() {
        return RuntimeHelper.requireNonNull(constants$666.glLogicOp$MH,"glLogicOp");
    }
    public static void glLogicOp ( int opcode) {
        var mh$ = glLogicOp$MH();
        try {
            mh$.invokeExact(opcode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap1d$MH() {
        return RuntimeHelper.requireNonNull(constants$666.glMap1d$MH,"glMap1d");
    }
    public static void glMap1d ( int target,  double u1,  double u2,  int stride,  int order,  Addressable points) {
        var mh$ = glMap1d$MH();
        try {
            mh$.invokeExact(target, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap1f$MH() {
        return RuntimeHelper.requireNonNull(constants$666.glMap1f$MH,"glMap1f");
    }
    public static void glMap1f ( int target,  float u1,  float u2,  int stride,  int order,  Addressable points) {
        var mh$ = glMap1f$MH();
        try {
            mh$.invokeExact(target, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap2d$MH() {
        return RuntimeHelper.requireNonNull(constants$666.glMap2d$MH,"glMap2d");
    }
    public static void glMap2d ( int target,  double u1,  double u2,  int ustride,  int uorder,  double v1,  double v2,  int vstride,  int vorder,  Addressable points) {
        var mh$ = glMap2d$MH();
        try {
            mh$.invokeExact(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap2f$MH() {
        return RuntimeHelper.requireNonNull(constants$667.glMap2f$MH,"glMap2f");
    }
    public static void glMap2f ( int target,  float u1,  float u2,  int ustride,  int uorder,  float v1,  float v2,  int vstride,  int vorder,  Addressable points) {
        var mh$ = glMap2f$MH();
        try {
            mh$.invokeExact(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid1d$MH() {
        return RuntimeHelper.requireNonNull(constants$667.glMapGrid1d$MH,"glMapGrid1d");
    }
    public static void glMapGrid1d ( int un,  double u1,  double u2) {
        var mh$ = glMapGrid1d$MH();
        try {
            mh$.invokeExact(un, u1, u2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid1f$MH() {
        return RuntimeHelper.requireNonNull(constants$667.glMapGrid1f$MH,"glMapGrid1f");
    }
    public static void glMapGrid1f ( int un,  float u1,  float u2) {
        var mh$ = glMapGrid1f$MH();
        try {
            mh$.invokeExact(un, u1, u2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid2d$MH() {
        return RuntimeHelper.requireNonNull(constants$667.glMapGrid2d$MH,"glMapGrid2d");
    }
    public static void glMapGrid2d ( int un,  double u1,  double u2,  int vn,  double v1,  double v2) {
        var mh$ = glMapGrid2d$MH();
        try {
            mh$.invokeExact(un, u1, u2, vn, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid2f$MH() {
        return RuntimeHelper.requireNonNull(constants$667.glMapGrid2f$MH,"glMapGrid2f");
    }
    public static void glMapGrid2f ( int un,  float u1,  float u2,  int vn,  float v1,  float v2) {
        var mh$ = glMapGrid2f$MH();
        try {
            mh$.invokeExact(un, u1, u2, vn, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialf$MH() {
        return RuntimeHelper.requireNonNull(constants$667.glMaterialf$MH,"glMaterialf");
    }
    public static void glMaterialf ( int face,  int pname,  float param) {
        var mh$ = glMaterialf$MH();
        try {
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialfv$MH() {
        return RuntimeHelper.requireNonNull(constants$668.glMaterialfv$MH,"glMaterialfv");
    }
    public static void glMaterialfv ( int face,  int pname,  Addressable params) {
        var mh$ = glMaterialfv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMateriali$MH() {
        return RuntimeHelper.requireNonNull(constants$668.glMateriali$MH,"glMateriali");
    }
    public static void glMateriali ( int face,  int pname,  int param) {
        var mh$ = glMateriali$MH();
        try {
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialiv$MH() {
        return RuntimeHelper.requireNonNull(constants$668.glMaterialiv$MH,"glMaterialiv");
    }
    public static void glMaterialiv ( int face,  int pname,  Addressable params) {
        var mh$ = glMaterialiv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixMode$MH() {
        return RuntimeHelper.requireNonNull(constants$668.glMatrixMode$MH,"glMatrixMode");
    }
    public static void glMatrixMode ( int mode) {
        var mh$ = glMatrixMode$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$668.glMultMatrixd$MH,"glMultMatrixd");
    }
    public static void glMultMatrixd ( Addressable m) {
        var mh$ = glMultMatrixd$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$668.glMultMatrixf$MH,"glMultMatrixf");
    }
    public static void glMultMatrixf ( Addressable m) {
        var mh$ = glMultMatrixf$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNewList$MH() {
        return RuntimeHelper.requireNonNull(constants$669.glNewList$MH,"glNewList");
    }
    public static void glNewList ( int list,  int mode) {
        var mh$ = glNewList$MH();
        try {
            mh$.invokeExact(list, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3b$MH() {
        return RuntimeHelper.requireNonNull(constants$669.glNormal3b$MH,"glNormal3b");
    }
    public static void glNormal3b ( byte nx,  byte ny,  byte nz) {
        var mh$ = glNormal3b$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3bv$MH() {
        return RuntimeHelper.requireNonNull(constants$669.glNormal3bv$MH,"glNormal3bv");
    }
    public static void glNormal3bv ( Addressable v) {
        var mh$ = glNormal3bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3d$MH() {
        return RuntimeHelper.requireNonNull(constants$669.glNormal3d$MH,"glNormal3d");
    }
    public static void glNormal3d ( double nx,  double ny,  double nz) {
        var mh$ = glNormal3d$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$669.glNormal3dv$MH,"glNormal3dv");
    }
    public static void glNormal3dv ( Addressable v) {
        var mh$ = glNormal3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3f$MH() {
        return RuntimeHelper.requireNonNull(constants$669.glNormal3f$MH,"glNormal3f");
    }
    public static void glNormal3f ( float nx,  float ny,  float nz) {
        var mh$ = glNormal3f$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$670.glNormal3fv$MH,"glNormal3fv");
    }
    public static void glNormal3fv ( Addressable v) {
        var mh$ = glNormal3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3i$MH() {
        return RuntimeHelper.requireNonNull(constants$670.glNormal3i$MH,"glNormal3i");
    }
    public static void glNormal3i ( int nx,  int ny,  int nz) {
        var mh$ = glNormal3i$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$670.glNormal3iv$MH,"glNormal3iv");
    }
    public static void glNormal3iv ( Addressable v) {
        var mh$ = glNormal3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3s$MH() {
        return RuntimeHelper.requireNonNull(constants$670.glNormal3s$MH,"glNormal3s");
    }
    public static void glNormal3s ( short nx,  short ny,  short nz) {
        var mh$ = glNormal3s$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$670.glNormal3sv$MH,"glNormal3sv");
    }
    public static void glNormal3sv ( Addressable v) {
        var mh$ = glNormal3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$670.glNormalPointer$MH,"glNormalPointer");
    }
    public static void glNormalPointer ( int type,  int stride,  Addressable pointer) {
        var mh$ = glNormalPointer$MH();
        try {
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glOrtho$MH() {
        return RuntimeHelper.requireNonNull(constants$671.glOrtho$MH,"glOrtho");
    }
    public static void glOrtho ( double left,  double right,  double bottom,  double top,  double zNear,  double zFar) {
        var mh$ = glOrtho$MH();
        try {
            mh$.invokeExact(left, right, bottom, top, zNear, zFar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPassThrough$MH() {
        return RuntimeHelper.requireNonNull(constants$671.glPassThrough$MH,"glPassThrough");
    }
    public static void glPassThrough ( float token) {
        var mh$ = glPassThrough$MH();
        try {
            mh$.invokeExact(token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$671.glPixelMapfv$MH,"glPixelMapfv");
    }
    public static void glPixelMapfv ( int map,  int mapsize,  Addressable values) {
        var mh$ = glPixelMapfv$MH();
        try {
            mh$.invokeExact(map, mapsize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$671.glPixelMapuiv$MH,"glPixelMapuiv");
    }
    public static void glPixelMapuiv ( int map,  int mapsize,  Addressable values) {
        var mh$ = glPixelMapuiv$MH();
        try {
            mh$.invokeExact(map, mapsize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapusv$MH() {
        return RuntimeHelper.requireNonNull(constants$671.glPixelMapusv$MH,"glPixelMapusv");
    }
    public static void glPixelMapusv ( int map,  int mapsize,  Addressable values) {
        var mh$ = glPixelMapusv$MH();
        try {
            mh$.invokeExact(map, mapsize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelStoref$MH() {
        return RuntimeHelper.requireNonNull(constants$671.glPixelStoref$MH,"glPixelStoref");
    }
    public static void glPixelStoref ( int pname,  float param) {
        var mh$ = glPixelStoref$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelStorei$MH() {
        return RuntimeHelper.requireNonNull(constants$672.glPixelStorei$MH,"glPixelStorei");
    }
    public static void glPixelStorei ( int pname,  int param) {
        var mh$ = glPixelStorei$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTransferf$MH() {
        return RuntimeHelper.requireNonNull(constants$672.glPixelTransferf$MH,"glPixelTransferf");
    }
    public static void glPixelTransferf ( int pname,  float param) {
        var mh$ = glPixelTransferf$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTransferi$MH() {
        return RuntimeHelper.requireNonNull(constants$672.glPixelTransferi$MH,"glPixelTransferi");
    }
    public static void glPixelTransferi ( int pname,  int param) {
        var mh$ = glPixelTransferi$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelZoom$MH() {
        return RuntimeHelper.requireNonNull(constants$672.glPixelZoom$MH,"glPixelZoom");
    }
    public static void glPixelZoom ( float xfactor,  float yfactor) {
        var mh$ = glPixelZoom$MH();
        try {
            mh$.invokeExact(xfactor, yfactor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointSize$MH() {
        return RuntimeHelper.requireNonNull(constants$672.glPointSize$MH,"glPointSize");
    }
    public static void glPointSize ( float size) {
        var mh$ = glPointSize$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonMode$MH() {
        return RuntimeHelper.requireNonNull(constants$672.glPolygonMode$MH,"glPolygonMode");
    }
    public static void glPolygonMode ( int face,  int mode) {
        var mh$ = glPolygonMode$MH();
        try {
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonOffset$MH() {
        return RuntimeHelper.requireNonNull(constants$673.glPolygonOffset$MH,"glPolygonOffset");
    }
    public static void glPolygonOffset ( float factor,  float units) {
        var mh$ = glPolygonOffset$MH();
        try {
            mh$.invokeExact(factor, units);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$673.glPolygonStipple$MH,"glPolygonStipple");
    }
    public static void glPolygonStipple ( Addressable mask) {
        var mh$ = glPolygonStipple$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$673.glPopAttrib$MH,"glPopAttrib");
    }
    public static void glPopAttrib () {
        var mh$ = glPopAttrib$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopClientAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$673.glPopClientAttrib$MH,"glPopClientAttrib");
    }
    public static void glPopClientAttrib () {
        var mh$ = glPopClientAttrib$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$673.glPopMatrix$MH,"glPopMatrix");
    }
    public static void glPopMatrix () {
        var mh$ = glPopMatrix$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopName$MH() {
        return RuntimeHelper.requireNonNull(constants$673.glPopName$MH,"glPopName");
    }
    public static void glPopName () {
        var mh$ = glPopName$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPrioritizeTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$674.glPrioritizeTextures$MH,"glPrioritizeTextures");
    }
    public static void glPrioritizeTextures ( int n,  Addressable textures,  Addressable priorities) {
        var mh$ = glPrioritizeTextures$MH();
        try {
            mh$.invokeExact(n, textures, priorities);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$674.glPushAttrib$MH,"glPushAttrib");
    }
    public static void glPushAttrib ( int mask) {
        var mh$ = glPushAttrib$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushClientAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$674.glPushClientAttrib$MH,"glPushClientAttrib");
    }
    public static void glPushClientAttrib ( int mask) {
        var mh$ = glPushClientAttrib$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$674.glPushMatrix$MH,"glPushMatrix");
    }
    public static void glPushMatrix () {
        var mh$ = glPushMatrix$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushName$MH() {
        return RuntimeHelper.requireNonNull(constants$674.glPushName$MH,"glPushName");
    }
    public static void glPushName ( int name) {
        var mh$ = glPushName$MH();
        try {
            mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2d$MH() {
        return RuntimeHelper.requireNonNull(constants$674.glRasterPos2d$MH,"glRasterPos2d");
    }
    public static void glRasterPos2d ( double x,  double y) {
        var mh$ = glRasterPos2d$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$675.glRasterPos2dv$MH,"glRasterPos2dv");
    }
    public static void glRasterPos2dv ( Addressable v) {
        var mh$ = glRasterPos2dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2f$MH() {
        return RuntimeHelper.requireNonNull(constants$675.glRasterPos2f$MH,"glRasterPos2f");
    }
    public static void glRasterPos2f ( float x,  float y) {
        var mh$ = glRasterPos2f$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$675.glRasterPos2fv$MH,"glRasterPos2fv");
    }
    public static void glRasterPos2fv ( Addressable v) {
        var mh$ = glRasterPos2fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2i$MH() {
        return RuntimeHelper.requireNonNull(constants$675.glRasterPos2i$MH,"glRasterPos2i");
    }
    public static void glRasterPos2i ( int x,  int y) {
        var mh$ = glRasterPos2i$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$675.glRasterPos2iv$MH,"glRasterPos2iv");
    }
    public static void glRasterPos2iv ( Addressable v) {
        var mh$ = glRasterPos2iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2s$MH() {
        return RuntimeHelper.requireNonNull(constants$675.glRasterPos2s$MH,"glRasterPos2s");
    }
    public static void glRasterPos2s ( short x,  short y) {
        var mh$ = glRasterPos2s$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$676.glRasterPos2sv$MH,"glRasterPos2sv");
    }
    public static void glRasterPos2sv ( Addressable v) {
        var mh$ = glRasterPos2sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3d$MH() {
        return RuntimeHelper.requireNonNull(constants$676.glRasterPos3d$MH,"glRasterPos3d");
    }
    public static void glRasterPos3d ( double x,  double y,  double z) {
        var mh$ = glRasterPos3d$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$676.glRasterPos3dv$MH,"glRasterPos3dv");
    }
    public static void glRasterPos3dv ( Addressable v) {
        var mh$ = glRasterPos3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3f$MH() {
        return RuntimeHelper.requireNonNull(constants$676.glRasterPos3f$MH,"glRasterPos3f");
    }
    public static void glRasterPos3f ( float x,  float y,  float z) {
        var mh$ = glRasterPos3f$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$676.glRasterPos3fv$MH,"glRasterPos3fv");
    }
    public static void glRasterPos3fv ( Addressable v) {
        var mh$ = glRasterPos3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3i$MH() {
        return RuntimeHelper.requireNonNull(constants$676.glRasterPos3i$MH,"glRasterPos3i");
    }
    public static void glRasterPos3i ( int x,  int y,  int z) {
        var mh$ = glRasterPos3i$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$677.glRasterPos3iv$MH,"glRasterPos3iv");
    }
    public static void glRasterPos3iv ( Addressable v) {
        var mh$ = glRasterPos3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3s$MH() {
        return RuntimeHelper.requireNonNull(constants$677.glRasterPos3s$MH,"glRasterPos3s");
    }
    public static void glRasterPos3s ( short x,  short y,  short z) {
        var mh$ = glRasterPos3s$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$677.glRasterPos3sv$MH,"glRasterPos3sv");
    }
    public static void glRasterPos3sv ( Addressable v) {
        var mh$ = glRasterPos3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4d$MH() {
        return RuntimeHelper.requireNonNull(constants$677.glRasterPos4d$MH,"glRasterPos4d");
    }
    public static void glRasterPos4d ( double x,  double y,  double z,  double w) {
        var mh$ = glRasterPos4d$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$677.glRasterPos4dv$MH,"glRasterPos4dv");
    }
    public static void glRasterPos4dv ( Addressable v) {
        var mh$ = glRasterPos4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4f$MH() {
        return RuntimeHelper.requireNonNull(constants$677.glRasterPos4f$MH,"glRasterPos4f");
    }
    public static void glRasterPos4f ( float x,  float y,  float z,  float w) {
        var mh$ = glRasterPos4f$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$678.glRasterPos4fv$MH,"glRasterPos4fv");
    }
    public static void glRasterPos4fv ( Addressable v) {
        var mh$ = glRasterPos4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4i$MH() {
        return RuntimeHelper.requireNonNull(constants$678.glRasterPos4i$MH,"glRasterPos4i");
    }
    public static void glRasterPos4i ( int x,  int y,  int z,  int w) {
        var mh$ = glRasterPos4i$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$678.glRasterPos4iv$MH,"glRasterPos4iv");
    }
    public static void glRasterPos4iv ( Addressable v) {
        var mh$ = glRasterPos4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4s$MH() {
        return RuntimeHelper.requireNonNull(constants$678.glRasterPos4s$MH,"glRasterPos4s");
    }
    public static void glRasterPos4s ( short x,  short y,  short z,  short w) {
        var mh$ = glRasterPos4s$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$678.glRasterPos4sv$MH,"glRasterPos4sv");
    }
    public static void glRasterPos4sv ( Addressable v) {
        var mh$ = glRasterPos4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReadBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$678.glReadBuffer$MH,"glReadBuffer");
    }
    public static void glReadBuffer ( int mode) {
        var mh$ = glReadBuffer$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReadPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$679.glReadPixels$MH,"glReadPixels");
    }
    public static void glReadPixels ( int x,  int y,  int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = glReadPixels$MH();
        try {
            mh$.invokeExact(x, y, width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectd$MH() {
        return RuntimeHelper.requireNonNull(constants$679.glRectd$MH,"glRectd");
    }
    public static void glRectd ( double x1,  double y1,  double x2,  double y2) {
        var mh$ = glRectd$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectdv$MH() {
        return RuntimeHelper.requireNonNull(constants$679.glRectdv$MH,"glRectdv");
    }
    public static void glRectdv ( Addressable v1,  Addressable v2) {
        var mh$ = glRectdv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectf$MH() {
        return RuntimeHelper.requireNonNull(constants$679.glRectf$MH,"glRectf");
    }
    public static void glRectf ( float x1,  float y1,  float x2,  float y2) {
        var mh$ = glRectf$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectfv$MH() {
        return RuntimeHelper.requireNonNull(constants$679.glRectfv$MH,"glRectfv");
    }
    public static void glRectfv ( Addressable v1,  Addressable v2) {
        var mh$ = glRectfv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRecti$MH() {
        return RuntimeHelper.requireNonNull(constants$679.glRecti$MH,"glRecti");
    }
    public static void glRecti ( int x1,  int y1,  int x2,  int y2) {
        var mh$ = glRecti$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectiv$MH() {
        return RuntimeHelper.requireNonNull(constants$680.glRectiv$MH,"glRectiv");
    }
    public static void glRectiv ( Addressable v1,  Addressable v2) {
        var mh$ = glRectiv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRects$MH() {
        return RuntimeHelper.requireNonNull(constants$680.glRects$MH,"glRects");
    }
    public static void glRects ( short x1,  short y1,  short x2,  short y2) {
        var mh$ = glRects$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectsv$MH() {
        return RuntimeHelper.requireNonNull(constants$680.glRectsv$MH,"glRectsv");
    }
    public static void glRectsv ( Addressable v1,  Addressable v2) {
        var mh$ = glRectsv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderMode$MH() {
        return RuntimeHelper.requireNonNull(constants$680.glRenderMode$MH,"glRenderMode");
    }
    public static int glRenderMode ( int mode) {
        var mh$ = glRenderMode$MH();
        try {
            return (int)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRotated$MH() {
        return RuntimeHelper.requireNonNull(constants$680.glRotated$MH,"glRotated");
    }
    public static void glRotated ( double angle,  double x,  double y,  double z) {
        var mh$ = glRotated$MH();
        try {
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRotatef$MH() {
        return RuntimeHelper.requireNonNull(constants$680.glRotatef$MH,"glRotatef");
    }
    public static void glRotatef ( float angle,  float x,  float y,  float z) {
        var mh$ = glRotatef$MH();
        try {
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScaled$MH() {
        return RuntimeHelper.requireNonNull(constants$681.glScaled$MH,"glScaled");
    }
    public static void glScaled ( double x,  double y,  double z) {
        var mh$ = glScaled$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScalef$MH() {
        return RuntimeHelper.requireNonNull(constants$681.glScalef$MH,"glScalef");
    }
    public static void glScalef ( float x,  float y,  float z) {
        var mh$ = glScalef$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScissor$MH() {
        return RuntimeHelper.requireNonNull(constants$681.glScissor$MH,"glScissor");
    }
    public static void glScissor ( int x,  int y,  int width,  int height) {
        var mh$ = glScissor$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSelectBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$681.glSelectBuffer$MH,"glSelectBuffer");
    }
    public static void glSelectBuffer ( int size,  Addressable buffer) {
        var mh$ = glSelectBuffer$MH();
        try {
            mh$.invokeExact(size, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShadeModel$MH() {
        return RuntimeHelper.requireNonNull(constants$681.glShadeModel$MH,"glShadeModel");
    }
    public static void glShadeModel ( int mode) {
        var mh$ = glShadeModel$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$681.glStencilFunc$MH,"glStencilFunc");
    }
    public static void glStencilFunc ( int func,  int ref,  int mask) {
        var mh$ = glStencilFunc$MH();
        try {
            mh$.invokeExact(func, ref, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilMask$MH() {
        return RuntimeHelper.requireNonNull(constants$682.glStencilMask$MH,"glStencilMask");
    }
    public static void glStencilMask ( int mask) {
        var mh$ = glStencilMask$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilOp$MH() {
        return RuntimeHelper.requireNonNull(constants$682.glStencilOp$MH,"glStencilOp");
    }
    public static void glStencilOp ( int fail,  int zfail,  int zpass) {
        var mh$ = glStencilOp$MH();
        try {
            mh$.invokeExact(fail, zfail, zpass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1d$MH() {
        return RuntimeHelper.requireNonNull(constants$682.glTexCoord1d$MH,"glTexCoord1d");
    }
    public static void glTexCoord1d ( double s) {
        var mh$ = glTexCoord1d$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$682.glTexCoord1dv$MH,"glTexCoord1dv");
    }
    public static void glTexCoord1dv ( Addressable v) {
        var mh$ = glTexCoord1dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1f$MH() {
        return RuntimeHelper.requireNonNull(constants$682.glTexCoord1f$MH,"glTexCoord1f");
    }
    public static void glTexCoord1f ( float s) {
        var mh$ = glTexCoord1f$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$682.glTexCoord1fv$MH,"glTexCoord1fv");
    }
    public static void glTexCoord1fv ( Addressable v) {
        var mh$ = glTexCoord1fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1i$MH() {
        return RuntimeHelper.requireNonNull(constants$683.glTexCoord1i$MH,"glTexCoord1i");
    }
    public static void glTexCoord1i ( int s) {
        var mh$ = glTexCoord1i$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1iv$MH() {
        return RuntimeHelper.requireNonNull(constants$683.glTexCoord1iv$MH,"glTexCoord1iv");
    }
    public static void glTexCoord1iv ( Addressable v) {
        var mh$ = glTexCoord1iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1s$MH() {
        return RuntimeHelper.requireNonNull(constants$683.glTexCoord1s$MH,"glTexCoord1s");
    }
    public static void glTexCoord1s ( short s) {
        var mh$ = glTexCoord1s$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1sv$MH() {
        return RuntimeHelper.requireNonNull(constants$683.glTexCoord1sv$MH,"glTexCoord1sv");
    }
    public static void glTexCoord1sv ( Addressable v) {
        var mh$ = glTexCoord1sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2d$MH() {
        return RuntimeHelper.requireNonNull(constants$683.glTexCoord2d$MH,"glTexCoord2d");
    }
    public static void glTexCoord2d ( double s,  double t) {
        var mh$ = glTexCoord2d$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$683.glTexCoord2dv$MH,"glTexCoord2dv");
    }
    public static void glTexCoord2dv ( Addressable v) {
        var mh$ = glTexCoord2dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$684.glTexCoord2f$MH,"glTexCoord2f");
    }
    public static void glTexCoord2f ( float s,  float t) {
        var mh$ = glTexCoord2f$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$684.glTexCoord2fv$MH,"glTexCoord2fv");
    }
    public static void glTexCoord2fv ( Addressable v) {
        var mh$ = glTexCoord2fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2i$MH() {
        return RuntimeHelper.requireNonNull(constants$684.glTexCoord2i$MH,"glTexCoord2i");
    }
    public static void glTexCoord2i ( int s,  int t) {
        var mh$ = glTexCoord2i$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$684.glTexCoord2iv$MH,"glTexCoord2iv");
    }
    public static void glTexCoord2iv ( Addressable v) {
        var mh$ = glTexCoord2iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2s$MH() {
        return RuntimeHelper.requireNonNull(constants$684.glTexCoord2s$MH,"glTexCoord2s");
    }
    public static void glTexCoord2s ( short s,  short t) {
        var mh$ = glTexCoord2s$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$684.glTexCoord2sv$MH,"glTexCoord2sv");
    }
    public static void glTexCoord2sv ( Addressable v) {
        var mh$ = glTexCoord2sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3d$MH() {
        return RuntimeHelper.requireNonNull(constants$685.glTexCoord3d$MH,"glTexCoord3d");
    }
    public static void glTexCoord3d ( double s,  double t,  double r) {
        var mh$ = glTexCoord3d$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$685.glTexCoord3dv$MH,"glTexCoord3dv");
    }
    public static void glTexCoord3dv ( Addressable v) {
        var mh$ = glTexCoord3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3f$MH() {
        return RuntimeHelper.requireNonNull(constants$685.glTexCoord3f$MH,"glTexCoord3f");
    }
    public static void glTexCoord3f ( float s,  float t,  float r) {
        var mh$ = glTexCoord3f$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$685.glTexCoord3fv$MH,"glTexCoord3fv");
    }
    public static void glTexCoord3fv ( Addressable v) {
        var mh$ = glTexCoord3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3i$MH() {
        return RuntimeHelper.requireNonNull(constants$685.glTexCoord3i$MH,"glTexCoord3i");
    }
    public static void glTexCoord3i ( int s,  int t,  int r) {
        var mh$ = glTexCoord3i$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$685.glTexCoord3iv$MH,"glTexCoord3iv");
    }
    public static void glTexCoord3iv ( Addressable v) {
        var mh$ = glTexCoord3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3s$MH() {
        return RuntimeHelper.requireNonNull(constants$686.glTexCoord3s$MH,"glTexCoord3s");
    }
    public static void glTexCoord3s ( short s,  short t,  short r) {
        var mh$ = glTexCoord3s$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$686.glTexCoord3sv$MH,"glTexCoord3sv");
    }
    public static void glTexCoord3sv ( Addressable v) {
        var mh$ = glTexCoord3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4d$MH() {
        return RuntimeHelper.requireNonNull(constants$686.glTexCoord4d$MH,"glTexCoord4d");
    }
    public static void glTexCoord4d ( double s,  double t,  double r,  double q) {
        var mh$ = glTexCoord4d$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$686.glTexCoord4dv$MH,"glTexCoord4dv");
    }
    public static void glTexCoord4dv ( Addressable v) {
        var mh$ = glTexCoord4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4f$MH() {
        return RuntimeHelper.requireNonNull(constants$686.glTexCoord4f$MH,"glTexCoord4f");
    }
    public static void glTexCoord4f ( float s,  float t,  float r,  float q) {
        var mh$ = glTexCoord4f$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$686.glTexCoord4fv$MH,"glTexCoord4fv");
    }
    public static void glTexCoord4fv ( Addressable v) {
        var mh$ = glTexCoord4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4i$MH() {
        return RuntimeHelper.requireNonNull(constants$687.glTexCoord4i$MH,"glTexCoord4i");
    }
    public static void glTexCoord4i ( int s,  int t,  int r,  int q) {
        var mh$ = glTexCoord4i$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$687.glTexCoord4iv$MH,"glTexCoord4iv");
    }
    public static void glTexCoord4iv ( Addressable v) {
        var mh$ = glTexCoord4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4s$MH() {
        return RuntimeHelper.requireNonNull(constants$687.glTexCoord4s$MH,"glTexCoord4s");
    }
    public static void glTexCoord4s ( short s,  short t,  short r,  short q) {
        var mh$ = glTexCoord4s$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$687.glTexCoord4sv$MH,"glTexCoord4sv");
    }
    public static void glTexCoord4sv ( Addressable v) {
        var mh$ = glTexCoord4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoordPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$687.glTexCoordPointer$MH,"glTexCoordPointer");
    }
    public static void glTexCoordPointer ( int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glTexCoordPointer$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvf$MH() {
        return RuntimeHelper.requireNonNull(constants$687.glTexEnvf$MH,"glTexEnvf");
    }
    public static void glTexEnvf ( int target,  int pname,  float param) {
        var mh$ = glTexEnvf$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvfv$MH() {
        return RuntimeHelper.requireNonNull(constants$688.glTexEnvfv$MH,"glTexEnvfv");
    }
    public static void glTexEnvfv ( int target,  int pname,  Addressable params) {
        var mh$ = glTexEnvfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvi$MH() {
        return RuntimeHelper.requireNonNull(constants$688.glTexEnvi$MH,"glTexEnvi");
    }
    public static void glTexEnvi ( int target,  int pname,  int param) {
        var mh$ = glTexEnvi$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnviv$MH() {
        return RuntimeHelper.requireNonNull(constants$688.glTexEnviv$MH,"glTexEnviv");
    }
    public static void glTexEnviv ( int target,  int pname,  Addressable params) {
        var mh$ = glTexEnviv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGend$MH() {
        return RuntimeHelper.requireNonNull(constants$688.glTexGend$MH,"glTexGend");
    }
    public static void glTexGend ( int coord,  int pname,  double param) {
        var mh$ = glTexGend$MH();
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGendv$MH() {
        return RuntimeHelper.requireNonNull(constants$688.glTexGendv$MH,"glTexGendv");
    }
    public static void glTexGendv ( int coord,  int pname,  Addressable params) {
        var mh$ = glTexGendv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGenf$MH() {
        return RuntimeHelper.requireNonNull(constants$688.glTexGenf$MH,"glTexGenf");
    }
    public static void glTexGenf ( int coord,  int pname,  float param) {
        var mh$ = glTexGenf$MH();
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGenfv$MH() {
        return RuntimeHelper.requireNonNull(constants$689.glTexGenfv$MH,"glTexGenfv");
    }
    public static void glTexGenfv ( int coord,  int pname,  Addressable params) {
        var mh$ = glTexGenfv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGeni$MH() {
        return RuntimeHelper.requireNonNull(constants$689.glTexGeni$MH,"glTexGeni");
    }
    public static void glTexGeni ( int coord,  int pname,  int param) {
        var mh$ = glTexGeni$MH();
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGeniv$MH() {
        return RuntimeHelper.requireNonNull(constants$689.glTexGeniv$MH,"glTexGeniv");
    }
    public static void glTexGeniv ( int coord,  int pname,  Addressable params) {
        var mh$ = glTexGeniv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$689.glTexImage1D$MH,"glTexImage1D");
    }
    public static void glTexImage1D ( int target,  int level,  int internalformat,  int width,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexImage1D$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$689.glTexImage2D$MH,"glTexImage2D");
    }
    public static void glTexImage2D ( int target,  int level,  int internalformat,  int width,  int height,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexImage2D$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, height, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterf$MH() {
        return RuntimeHelper.requireNonNull(constants$689.glTexParameterf$MH,"glTexParameterf");
    }
    public static void glTexParameterf ( int target,  int pname,  float param) {
        var mh$ = glTexParameterf$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$690.glTexParameterfv$MH,"glTexParameterfv");
    }
    public static void glTexParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glTexParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameteri$MH() {
        return RuntimeHelper.requireNonNull(constants$690.glTexParameteri$MH,"glTexParameteri");
    }
    public static void glTexParameteri ( int target,  int pname,  int param) {
        var mh$ = glTexParameteri$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$690.glTexParameteriv$MH,"glTexParameteriv");
    }
    public static void glTexParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glTexParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$690.glTexSubImage1D$MH,"glTexSubImage1D");
    }
    public static void glTexSubImage1D ( int target,  int level,  int xoffset,  int width,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexSubImage1D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, width, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$690.glTexSubImage2D$MH,"glTexSubImage2D");
    }
    public static void glTexSubImage2D ( int target,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexSubImage2D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTranslated$MH() {
        return RuntimeHelper.requireNonNull(constants$690.glTranslated$MH,"glTranslated");
    }
    public static void glTranslated ( double x,  double y,  double z) {
        var mh$ = glTranslated$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTranslatef$MH() {
        return RuntimeHelper.requireNonNull(constants$691.glTranslatef$MH,"glTranslatef");
    }
    public static void glTranslatef ( float x,  float y,  float z) {
        var mh$ = glTranslatef$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2d$MH() {
        return RuntimeHelper.requireNonNull(constants$691.glVertex2d$MH,"glVertex2d");
    }
    public static void glVertex2d ( double x,  double y) {
        var mh$ = glVertex2d$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$691.glVertex2dv$MH,"glVertex2dv");
    }
    public static void glVertex2dv ( Addressable v) {
        var mh$ = glVertex2dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2f$MH() {
        return RuntimeHelper.requireNonNull(constants$691.glVertex2f$MH,"glVertex2f");
    }
    public static void glVertex2f ( float x,  float y) {
        var mh$ = glVertex2f$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$691.glVertex2fv$MH,"glVertex2fv");
    }
    public static void glVertex2fv ( Addressable v) {
        var mh$ = glVertex2fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2i$MH() {
        return RuntimeHelper.requireNonNull(constants$691.glVertex2i$MH,"glVertex2i");
    }
    public static void glVertex2i ( int x,  int y) {
        var mh$ = glVertex2i$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$692.glVertex2iv$MH,"glVertex2iv");
    }
    public static void glVertex2iv ( Addressable v) {
        var mh$ = glVertex2iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2s$MH() {
        return RuntimeHelper.requireNonNull(constants$692.glVertex2s$MH,"glVertex2s");
    }
    public static void glVertex2s ( short x,  short y) {
        var mh$ = glVertex2s$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$692.glVertex2sv$MH,"glVertex2sv");
    }
    public static void glVertex2sv ( Addressable v) {
        var mh$ = glVertex2sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3d$MH() {
        return RuntimeHelper.requireNonNull(constants$692.glVertex3d$MH,"glVertex3d");
    }
    public static void glVertex3d ( double x,  double y,  double z) {
        var mh$ = glVertex3d$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$692.glVertex3dv$MH,"glVertex3dv");
    }
    public static void glVertex3dv ( Addressable v) {
        var mh$ = glVertex3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3f$MH() {
        return RuntimeHelper.requireNonNull(constants$692.glVertex3f$MH,"glVertex3f");
    }
    public static void glVertex3f ( float x,  float y,  float z) {
        var mh$ = glVertex3f$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$693.glVertex3fv$MH,"glVertex3fv");
    }
    public static void glVertex3fv ( Addressable v) {
        var mh$ = glVertex3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3i$MH() {
        return RuntimeHelper.requireNonNull(constants$693.glVertex3i$MH,"glVertex3i");
    }
    public static void glVertex3i ( int x,  int y,  int z) {
        var mh$ = glVertex3i$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$693.glVertex3iv$MH,"glVertex3iv");
    }
    public static void glVertex3iv ( Addressable v) {
        var mh$ = glVertex3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3s$MH() {
        return RuntimeHelper.requireNonNull(constants$693.glVertex3s$MH,"glVertex3s");
    }
    public static void glVertex3s ( short x,  short y,  short z) {
        var mh$ = glVertex3s$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$693.glVertex3sv$MH,"glVertex3sv");
    }
    public static void glVertex3sv ( Addressable v) {
        var mh$ = glVertex3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4d$MH() {
        return RuntimeHelper.requireNonNull(constants$693.glVertex4d$MH,"glVertex4d");
    }
    public static void glVertex4d ( double x,  double y,  double z,  double w) {
        var mh$ = glVertex4d$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$694.glVertex4dv$MH,"glVertex4dv");
    }
    public static void glVertex4dv ( Addressable v) {
        var mh$ = glVertex4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4f$MH() {
        return RuntimeHelper.requireNonNull(constants$694.glVertex4f$MH,"glVertex4f");
    }
    public static void glVertex4f ( float x,  float y,  float z,  float w) {
        var mh$ = glVertex4f$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$694.glVertex4fv$MH,"glVertex4fv");
    }
    public static void glVertex4fv ( Addressable v) {
        var mh$ = glVertex4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4i$MH() {
        return RuntimeHelper.requireNonNull(constants$694.glVertex4i$MH,"glVertex4i");
    }
    public static void glVertex4i ( int x,  int y,  int z,  int w) {
        var mh$ = glVertex4i$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$694.glVertex4iv$MH,"glVertex4iv");
    }
    public static void glVertex4iv ( Addressable v) {
        var mh$ = glVertex4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4s$MH() {
        return RuntimeHelper.requireNonNull(constants$694.glVertex4s$MH,"glVertex4s");
    }
    public static void glVertex4s ( short x,  short y,  short z,  short w) {
        var mh$ = glVertex4s$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$695.glVertex4sv$MH,"glVertex4sv");
    }
    public static void glVertex4sv ( Addressable v) {
        var mh$ = glVertex4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$695.glVertexPointer$MH,"glVertexPointer");
    }
    public static void glVertexPointer ( int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glVertexPointer$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glViewport$MH() {
        return RuntimeHelper.requireNonNull(constants$695.glViewport$MH,"glViewport");
    }
    public static void glViewport ( int x,  int y,  int width,  int height) {
        var mh$ = glViewport$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluErrorString$MH() {
        return RuntimeHelper.requireNonNull(constants$701.gluErrorString$MH,"gluErrorString");
    }
    public static MemoryAddress gluErrorString ( int errCode) {
        var mh$ = gluErrorString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(errCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluErrorUnicodeStringEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$701.gluErrorUnicodeStringEXT$MH,"gluErrorUnicodeStringEXT");
    }
    public static MemoryAddress gluErrorUnicodeStringEXT ( int errCode) {
        var mh$ = gluErrorUnicodeStringEXT$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(errCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluGetString$MH() {
        return RuntimeHelper.requireNonNull(constants$701.gluGetString$MH,"gluGetString");
    }
    public static MemoryAddress gluGetString ( int name) {
        var mh$ = gluGetString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluOrtho2D$MH() {
        return RuntimeHelper.requireNonNull(constants$701.gluOrtho2D$MH,"gluOrtho2D");
    }
    public static void gluOrtho2D ( double left,  double right,  double bottom,  double top) {
        var mh$ = gluOrtho2D$MH();
        try {
            mh$.invokeExact(left, right, bottom, top);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPerspective$MH() {
        return RuntimeHelper.requireNonNull(constants$701.gluPerspective$MH,"gluPerspective");
    }
    public static void gluPerspective ( double fovy,  double aspect,  double zNear,  double zFar) {
        var mh$ = gluPerspective$MH();
        try {
            mh$.invokeExact(fovy, aspect, zNear, zFar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPickMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$702.gluPickMatrix$MH,"gluPickMatrix");
    }
    public static void gluPickMatrix ( double x,  double y,  double width,  double height,  Addressable viewport) {
        var mh$ = gluPickMatrix$MH();
        try {
            mh$.invokeExact(x, y, width, height, viewport);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluLookAt$MH() {
        return RuntimeHelper.requireNonNull(constants$702.gluLookAt$MH,"gluLookAt");
    }
    public static void gluLookAt ( double eyex,  double eyey,  double eyez,  double centerx,  double centery,  double centerz,  double upx,  double upy,  double upz) {
        var mh$ = gluLookAt$MH();
        try {
            mh$.invokeExact(eyex, eyey, eyez, centerx, centery, centerz, upx, upy, upz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluProject$MH() {
        return RuntimeHelper.requireNonNull(constants$702.gluProject$MH,"gluProject");
    }
    public static int gluProject ( double objx,  double objy,  double objz,  Addressable modelMatrix,  Addressable projMatrix,  Addressable viewport,  Addressable winx,  Addressable winy,  Addressable winz) {
        var mh$ = gluProject$MH();
        try {
            return (int)mh$.invokeExact(objx, objy, objz, modelMatrix, projMatrix, viewport, winx, winy, winz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluUnProject$MH() {
        return RuntimeHelper.requireNonNull(constants$702.gluUnProject$MH,"gluUnProject");
    }
    public static int gluUnProject ( double winx,  double winy,  double winz,  Addressable modelMatrix,  Addressable projMatrix,  Addressable viewport,  Addressable objx,  Addressable objy,  Addressable objz) {
        var mh$ = gluUnProject$MH();
        try {
            return (int)mh$.invokeExact(winx, winy, winz, modelMatrix, projMatrix, viewport, objx, objy, objz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluScaleImage$MH() {
        return RuntimeHelper.requireNonNull(constants$702.gluScaleImage$MH,"gluScaleImage");
    }
    public static int gluScaleImage ( int format,  int widthin,  int heightin,  int typein,  Addressable datain,  int widthout,  int heightout,  int typeout,  Addressable dataout) {
        var mh$ = gluScaleImage$MH();
        try {
            return (int)mh$.invokeExact(format, widthin, heightin, typein, datain, widthout, heightout, typeout, dataout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild1DMipmaps$MH() {
        return RuntimeHelper.requireNonNull(constants$702.gluBuild1DMipmaps$MH,"gluBuild1DMipmaps");
    }
    public static int gluBuild1DMipmaps ( int target,  int components,  int width,  int format,  int type,  Addressable data) {
        var mh$ = gluBuild1DMipmaps$MH();
        try {
            return (int)mh$.invokeExact(target, components, width, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild2DMipmaps$MH() {
        return RuntimeHelper.requireNonNull(constants$703.gluBuild2DMipmaps$MH,"gluBuild2DMipmaps");
    }
    public static int gluBuild2DMipmaps ( int target,  int components,  int width,  int height,  int format,  int type,  Addressable data) {
        var mh$ = gluBuild2DMipmaps$MH();
        try {
            return (int)mh$.invokeExact(target, components, width, height, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNewQuadric$MH() {
        return RuntimeHelper.requireNonNull(constants$703.gluNewQuadric$MH,"gluNewQuadric");
    }
    public static MemoryAddress gluNewQuadric () {
        var mh$ = gluNewQuadric$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDeleteQuadric$MH() {
        return RuntimeHelper.requireNonNull(constants$703.gluDeleteQuadric$MH,"gluDeleteQuadric");
    }
    public static void gluDeleteQuadric ( Addressable state) {
        var mh$ = gluDeleteQuadric$MH();
        try {
            mh$.invokeExact(state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricNormals$MH() {
        return RuntimeHelper.requireNonNull(constants$703.gluQuadricNormals$MH,"gluQuadricNormals");
    }
    public static void gluQuadricNormals ( Addressable quadObject,  int normals) {
        var mh$ = gluQuadricNormals$MH();
        try {
            mh$.invokeExact(quadObject, normals);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$703.gluQuadricTexture$MH,"gluQuadricTexture");
    }
    public static void gluQuadricTexture ( Addressable quadObject,  byte textureCoords) {
        var mh$ = gluQuadricTexture$MH();
        try {
            mh$.invokeExact(quadObject, textureCoords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricOrientation$MH() {
        return RuntimeHelper.requireNonNull(constants$703.gluQuadricOrientation$MH,"gluQuadricOrientation");
    }
    public static void gluQuadricOrientation ( Addressable quadObject,  int orientation) {
        var mh$ = gluQuadricOrientation$MH();
        try {
            mh$.invokeExact(quadObject, orientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricDrawStyle$MH() {
        return RuntimeHelper.requireNonNull(constants$704.gluQuadricDrawStyle$MH,"gluQuadricDrawStyle");
    }
    public static void gluQuadricDrawStyle ( Addressable quadObject,  int drawStyle) {
        var mh$ = gluQuadricDrawStyle$MH();
        try {
            mh$.invokeExact(quadObject, drawStyle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluCylinder$MH() {
        return RuntimeHelper.requireNonNull(constants$704.gluCylinder$MH,"gluCylinder");
    }
    public static void gluCylinder ( Addressable qobj,  double baseRadius,  double topRadius,  double height,  int slices,  int stacks) {
        var mh$ = gluCylinder$MH();
        try {
            mh$.invokeExact(qobj, baseRadius, topRadius, height, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDisk$MH() {
        return RuntimeHelper.requireNonNull(constants$704.gluDisk$MH,"gluDisk");
    }
    public static void gluDisk ( Addressable qobj,  double innerRadius,  double outerRadius,  int slices,  int loops) {
        var mh$ = gluDisk$MH();
        try {
            mh$.invokeExact(qobj, innerRadius, outerRadius, slices, loops);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPartialDisk$MH() {
        return RuntimeHelper.requireNonNull(constants$704.gluPartialDisk$MH,"gluPartialDisk");
    }
    public static void gluPartialDisk ( Addressable qobj,  double innerRadius,  double outerRadius,  int slices,  int loops,  double startAngle,  double sweepAngle) {
        var mh$ = gluPartialDisk$MH();
        try {
            mh$.invokeExact(qobj, innerRadius, outerRadius, slices, loops, startAngle, sweepAngle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$704.gluSphere$MH,"gluSphere");
    }
    public static void gluSphere ( Addressable qobj,  double radius,  int slices,  int stacks) {
        var mh$ = gluSphere$MH();
        try {
            mh$.invokeExact(qobj, radius, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$705.gluQuadricCallback$MH,"gluQuadricCallback");
    }
    public static void gluQuadricCallback ( Addressable qobj,  int which,  Addressable fn) {
        var mh$ = gluQuadricCallback$MH();
        try {
            mh$.invokeExact(qobj, which, fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNewTess$MH() {
        return RuntimeHelper.requireNonNull(constants$705.gluNewTess$MH,"gluNewTess");
    }
    public static MemoryAddress gluNewTess () {
        var mh$ = gluNewTess$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDeleteTess$MH() {
        return RuntimeHelper.requireNonNull(constants$705.gluDeleteTess$MH,"gluDeleteTess");
    }
    public static void gluDeleteTess ( Addressable tess) {
        var mh$ = gluDeleteTess$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessBeginPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$705.gluTessBeginPolygon$MH,"gluTessBeginPolygon");
    }
    public static void gluTessBeginPolygon ( Addressable tess,  Addressable polygon_data) {
        var mh$ = gluTessBeginPolygon$MH();
        try {
            mh$.invokeExact(tess, polygon_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessBeginContour$MH() {
        return RuntimeHelper.requireNonNull(constants$705.gluTessBeginContour$MH,"gluTessBeginContour");
    }
    public static void gluTessBeginContour ( Addressable tess) {
        var mh$ = gluTessBeginContour$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$706.gluTessVertex$MH,"gluTessVertex");
    }
    public static void gluTessVertex ( Addressable tess,  Addressable coords,  Addressable data) {
        var mh$ = gluTessVertex$MH();
        try {
            mh$.invokeExact(tess, coords, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessEndContour$MH() {
        return RuntimeHelper.requireNonNull(constants$706.gluTessEndContour$MH,"gluTessEndContour");
    }
    public static void gluTessEndContour ( Addressable tess) {
        var mh$ = gluTessEndContour$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessEndPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$706.gluTessEndPolygon$MH,"gluTessEndPolygon");
    }
    public static void gluTessEndPolygon ( Addressable tess) {
        var mh$ = gluTessEndPolygon$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$706.gluTessProperty$MH,"gluTessProperty");
    }
    public static void gluTessProperty ( Addressable tess,  int which,  double value) {
        var mh$ = gluTessProperty$MH();
        try {
            mh$.invokeExact(tess, which, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessNormal$MH() {
        return RuntimeHelper.requireNonNull(constants$706.gluTessNormal$MH,"gluTessNormal");
    }
    public static void gluTessNormal ( Addressable tess,  double x,  double y,  double z) {
        var mh$ = gluTessNormal$MH();
        try {
            mh$.invokeExact(tess, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$707.gluTessCallback$MH,"gluTessCallback");
    }
    public static void gluTessCallback ( Addressable tess,  int which,  Addressable fn) {
        var mh$ = gluTessCallback$MH();
        try {
            mh$.invokeExact(tess, which, fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluGetTessProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$707.gluGetTessProperty$MH,"gluGetTessProperty");
    }
    public static void gluGetTessProperty ( Addressable tess,  int which,  Addressable value) {
        var mh$ = gluGetTessProperty$MH();
        try {
            mh$.invokeExact(tess, which, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNewNurbsRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$707.gluNewNurbsRenderer$MH,"gluNewNurbsRenderer");
    }
    public static MemoryAddress gluNewNurbsRenderer () {
        var mh$ = gluNewNurbsRenderer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDeleteNurbsRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$707.gluDeleteNurbsRenderer$MH,"gluDeleteNurbsRenderer");
    }
    public static void gluDeleteNurbsRenderer ( Addressable nobj) {
        var mh$ = gluDeleteNurbsRenderer$MH();
        try {
            mh$.invokeExact(nobj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$707.gluBeginSurface$MH,"gluBeginSurface");
    }
    public static void gluBeginSurface ( Addressable nobj) {
        var mh$ = gluBeginSurface$MH();
        try {
            mh$.invokeExact(nobj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$708.gluBeginCurve$MH,"gluBeginCurve");
    }
    public static void gluBeginCurve ( Addressable nobj) {
        var mh$ = gluBeginCurve$MH();
        try {
            mh$.invokeExact(nobj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$708.gluEndCurve$MH,"gluEndCurve");
    }
    public static void gluEndCurve ( Addressable nobj) {
        var mh$ = gluEndCurve$MH();
        try {
            mh$.invokeExact(nobj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$708.gluEndSurface$MH,"gluEndSurface");
    }
    public static void gluEndSurface ( Addressable nobj) {
        var mh$ = gluEndSurface$MH();
        try {
            mh$.invokeExact(nobj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginTrim$MH() {
        return RuntimeHelper.requireNonNull(constants$708.gluBeginTrim$MH,"gluBeginTrim");
    }
    public static void gluBeginTrim ( Addressable nobj) {
        var mh$ = gluBeginTrim$MH();
        try {
            mh$.invokeExact(nobj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndTrim$MH() {
        return RuntimeHelper.requireNonNull(constants$708.gluEndTrim$MH,"gluEndTrim");
    }
    public static void gluEndTrim ( Addressable nobj) {
        var mh$ = gluEndTrim$MH();
        try {
            mh$.invokeExact(nobj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPwlCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$708.gluPwlCurve$MH,"gluPwlCurve");
    }
    public static void gluPwlCurve ( Addressable nobj,  int count,  Addressable array,  int stride,  int type) {
        var mh$ = gluPwlCurve$MH();
        try {
            mh$.invokeExact(nobj, count, array, stride, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$709.gluNurbsCurve$MH,"gluNurbsCurve");
    }
    public static void gluNurbsCurve ( Addressable nobj,  int nknots,  Addressable knot,  int stride,  Addressable ctlarray,  int order,  int type) {
        var mh$ = gluNurbsCurve$MH();
        try {
            mh$.invokeExact(nobj, nknots, knot, stride, ctlarray, order, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$709.gluNurbsSurface$MH,"gluNurbsSurface");
    }
    public static void gluNurbsSurface ( Addressable nobj,  int sknot_count,  Addressable sknot,  int tknot_count,  Addressable tknot,  int s_stride,  int t_stride,  Addressable ctlarray,  int sorder,  int torder,  int type) {
        var mh$ = gluNurbsSurface$MH();
        try {
            mh$.invokeExact(nobj, sknot_count, sknot, tknot_count, tknot, s_stride, t_stride, ctlarray, sorder, torder, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluLoadSamplingMatrices$MH() {
        return RuntimeHelper.requireNonNull(constants$709.gluLoadSamplingMatrices$MH,"gluLoadSamplingMatrices");
    }
    public static void gluLoadSamplingMatrices ( Addressable nobj,  Addressable modelMatrix,  Addressable projMatrix,  Addressable viewport) {
        var mh$ = gluLoadSamplingMatrices$MH();
        try {
            mh$.invokeExact(nobj, modelMatrix, projMatrix, viewport);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$709.gluNurbsProperty$MH,"gluNurbsProperty");
    }
    public static void gluNurbsProperty ( Addressable nobj,  int property,  float value) {
        var mh$ = gluNurbsProperty$MH();
        try {
            mh$.invokeExact(nobj, property, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluGetNurbsProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$709.gluGetNurbsProperty$MH,"gluGetNurbsProperty");
    }
    public static void gluGetNurbsProperty ( Addressable nobj,  int property,  Addressable value) {
        var mh$ = gluGetNurbsProperty$MH();
        try {
            mh$.invokeExact(nobj, property, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$710.gluNurbsCallback$MH,"gluNurbsCallback");
    }
    public static void gluNurbsCallback ( Addressable nobj,  int which,  Addressable fn) {
        var mh$ = gluNurbsCallback$MH();
        try {
            mh$.invokeExact(nobj, which, fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$715.gluBeginPolygon$MH,"gluBeginPolygon");
    }
    public static void gluBeginPolygon ( Addressable tess) {
        var mh$ = gluBeginPolygon$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNextContour$MH() {
        return RuntimeHelper.requireNonNull(constants$715.gluNextContour$MH,"gluNextContour");
    }
    public static void gluNextContour ( Addressable tess,  int type) {
        var mh$ = gluNextContour$MH();
        try {
            mh$.invokeExact(tess, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$715.gluEndPolygon$MH,"gluEndPolygon");
    }
    public static void gluEndPolygon ( Addressable tess) {
        var mh$ = gluEndPolygon$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutInit$MH() {
        return RuntimeHelper.requireNonNull(constants$715.glutInit$MH,"glutInit");
    }
    public static void glutInit ( Addressable pargc,  Addressable argv) {
        var mh$ = glutInit$MH();
        try {
            mh$.invokeExact(pargc, argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutInitWindowPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$715.glutInitWindowPosition$MH,"glutInitWindowPosition");
    }
    public static void glutInitWindowPosition ( int x,  int y) {
        var mh$ = glutInitWindowPosition$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutInitWindowSize$MH() {
        return RuntimeHelper.requireNonNull(constants$715.glutInitWindowSize$MH,"glutInitWindowSize");
    }
    public static void glutInitWindowSize ( int width,  int height) {
        var mh$ = glutInitWindowSize$MH();
        try {
            mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutInitDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$716.glutInitDisplayMode$MH,"glutInitDisplayMode");
    }
    public static void glutInitDisplayMode ( int displayMode) {
        var mh$ = glutInitDisplayMode$MH();
        try {
            mh$.invokeExact(displayMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutInitDisplayString$MH() {
        return RuntimeHelper.requireNonNull(constants$716.glutInitDisplayString$MH,"glutInitDisplayString");
    }
    public static void glutInitDisplayString ( Addressable displayMode) {
        var mh$ = glutInitDisplayString$MH();
        try {
            mh$.invokeExact(displayMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMainLoop$MH() {
        return RuntimeHelper.requireNonNull(constants$716.glutMainLoop$MH,"glutMainLoop");
    }
    public static void glutMainLoop () {
        var mh$ = glutMainLoop$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutCreateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$716.glutCreateWindow$MH,"glutCreateWindow");
    }
    public static int glutCreateWindow ( Addressable title) {
        var mh$ = glutCreateWindow$MH();
        try {
            return (int)mh$.invokeExact(title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutCreateSubWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$716.glutCreateSubWindow$MH,"glutCreateSubWindow");
    }
    public static int glutCreateSubWindow ( int window,  int x,  int y,  int width,  int height) {
        var mh$ = glutCreateSubWindow$MH();
        try {
            return (int)mh$.invokeExact(window, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDestroyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$716.glutDestroyWindow$MH,"glutDestroyWindow");
    }
    public static void glutDestroyWindow ( int window) {
        var mh$ = glutDestroyWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$717.glutSetWindow$MH,"glutSetWindow");
    }
    public static void glutSetWindow ( int window) {
        var mh$ = glutSetWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGetWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$717.glutGetWindow$MH,"glutGetWindow");
    }
    public static int glutGetWindow () {
        var mh$ = glutGetWindow$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetWindowTitle$MH() {
        return RuntimeHelper.requireNonNull(constants$717.glutSetWindowTitle$MH,"glutSetWindowTitle");
    }
    public static void glutSetWindowTitle ( Addressable title) {
        var mh$ = glutSetWindowTitle$MH();
        try {
            mh$.invokeExact(title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetIconTitle$MH() {
        return RuntimeHelper.requireNonNull(constants$717.glutSetIconTitle$MH,"glutSetIconTitle");
    }
    public static void glutSetIconTitle ( Addressable title) {
        var mh$ = glutSetIconTitle$MH();
        try {
            mh$.invokeExact(title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutReshapeWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$717.glutReshapeWindow$MH,"glutReshapeWindow");
    }
    public static void glutReshapeWindow ( int width,  int height) {
        var mh$ = glutReshapeWindow$MH();
        try {
            mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPositionWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$717.glutPositionWindow$MH,"glutPositionWindow");
    }
    public static void glutPositionWindow ( int x,  int y) {
        var mh$ = glutPositionWindow$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutShowWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$718.glutShowWindow$MH,"glutShowWindow");
    }
    public static void glutShowWindow () {
        var mh$ = glutShowWindow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutHideWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$718.glutHideWindow$MH,"glutHideWindow");
    }
    public static void glutHideWindow () {
        var mh$ = glutHideWindow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutIconifyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$718.glutIconifyWindow$MH,"glutIconifyWindow");
    }
    public static void glutIconifyWindow () {
        var mh$ = glutIconifyWindow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPushWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$718.glutPushWindow$MH,"glutPushWindow");
    }
    public static void glutPushWindow () {
        var mh$ = glutPushWindow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPopWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$718.glutPopWindow$MH,"glutPopWindow");
    }
    public static void glutPopWindow () {
        var mh$ = glutPopWindow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutFullScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$718.glutFullScreen$MH,"glutFullScreen");
    }
    public static void glutFullScreen () {
        var mh$ = glutFullScreen$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPostWindowRedisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$719.glutPostWindowRedisplay$MH,"glutPostWindowRedisplay");
    }
    public static void glutPostWindowRedisplay ( int window) {
        var mh$ = glutPostWindowRedisplay$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPostRedisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$719.glutPostRedisplay$MH,"glutPostRedisplay");
    }
    public static void glutPostRedisplay () {
        var mh$ = glutPostRedisplay$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSwapBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$719.glutSwapBuffers$MH,"glutSwapBuffers");
    }
    public static void glutSwapBuffers () {
        var mh$ = glutSwapBuffers$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWarpPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$719.glutWarpPointer$MH,"glutWarpPointer");
    }
    public static void glutWarpPointer ( int x,  int y) {
        var mh$ = glutWarpPointer$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$719.glutSetCursor$MH,"glutSetCursor");
    }
    public static void glutSetCursor ( int cursor) {
        var mh$ = glutSetCursor$MH();
        try {
            mh$.invokeExact(cursor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutEstablishOverlay$MH() {
        return RuntimeHelper.requireNonNull(constants$719.glutEstablishOverlay$MH,"glutEstablishOverlay");
    }
    public static void glutEstablishOverlay () {
        var mh$ = glutEstablishOverlay$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutRemoveOverlay$MH() {
        return RuntimeHelper.requireNonNull(constants$720.glutRemoveOverlay$MH,"glutRemoveOverlay");
    }
    public static void glutRemoveOverlay () {
        var mh$ = glutRemoveOverlay$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutUseLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$720.glutUseLayer$MH,"glutUseLayer");
    }
    public static void glutUseLayer ( int layer) {
        var mh$ = glutUseLayer$MH();
        try {
            mh$.invokeExact(layer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPostOverlayRedisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$720.glutPostOverlayRedisplay$MH,"glutPostOverlayRedisplay");
    }
    public static void glutPostOverlayRedisplay () {
        var mh$ = glutPostOverlayRedisplay$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPostWindowOverlayRedisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$720.glutPostWindowOverlayRedisplay$MH,"glutPostWindowOverlayRedisplay");
    }
    public static void glutPostWindowOverlayRedisplay ( int window) {
        var mh$ = glutPostWindowOverlayRedisplay$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutShowOverlay$MH() {
        return RuntimeHelper.requireNonNull(constants$720.glutShowOverlay$MH,"glutShowOverlay");
    }
    public static void glutShowOverlay () {
        var mh$ = glutShowOverlay$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutHideOverlay$MH() {
        return RuntimeHelper.requireNonNull(constants$720.glutHideOverlay$MH,"glutHideOverlay");
    }
    public static void glutHideOverlay () {
        var mh$ = glutHideOverlay$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutCreateMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$721.glutCreateMenu$MH,"glutCreateMenu");
    }
    public static int glutCreateMenu ( Addressable callback) {
        var mh$ = glutCreateMenu$MH();
        try {
            return (int)mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDestroyMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$721.glutDestroyMenu$MH,"glutDestroyMenu");
    }
    public static void glutDestroyMenu ( int menu) {
        var mh$ = glutDestroyMenu$MH();
        try {
            mh$.invokeExact(menu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGetMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$721.glutGetMenu$MH,"glutGetMenu");
    }
    public static int glutGetMenu () {
        var mh$ = glutGetMenu$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$721.glutSetMenu$MH,"glutSetMenu");
    }
    public static void glutSetMenu ( int menu) {
        var mh$ = glutSetMenu$MH();
        try {
            mh$.invokeExact(menu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutAddMenuEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$722.glutAddMenuEntry$MH,"glutAddMenuEntry");
    }
    public static void glutAddMenuEntry ( Addressable label,  int value) {
        var mh$ = glutAddMenuEntry$MH();
        try {
            mh$.invokeExact(label, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutAddSubMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$722.glutAddSubMenu$MH,"glutAddSubMenu");
    }
    public static void glutAddSubMenu ( Addressable label,  int subMenu) {
        var mh$ = glutAddSubMenu$MH();
        try {
            mh$.invokeExact(label, subMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutChangeToMenuEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$722.glutChangeToMenuEntry$MH,"glutChangeToMenuEntry");
    }
    public static void glutChangeToMenuEntry ( int item,  Addressable label,  int value) {
        var mh$ = glutChangeToMenuEntry$MH();
        try {
            mh$.invokeExact(item, label, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutChangeToSubMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$722.glutChangeToSubMenu$MH,"glutChangeToSubMenu");
    }
    public static void glutChangeToSubMenu ( int item,  Addressable label,  int value) {
        var mh$ = glutChangeToSubMenu$MH();
        try {
            mh$.invokeExact(item, label, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutRemoveMenuItem$MH() {
        return RuntimeHelper.requireNonNull(constants$722.glutRemoveMenuItem$MH,"glutRemoveMenuItem");
    }
    public static void glutRemoveMenuItem ( int item) {
        var mh$ = glutRemoveMenuItem$MH();
        try {
            mh$.invokeExact(item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutAttachMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$722.glutAttachMenu$MH,"glutAttachMenu");
    }
    public static void glutAttachMenu ( int button) {
        var mh$ = glutAttachMenu$MH();
        try {
            mh$.invokeExact(button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDetachMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$723.glutDetachMenu$MH,"glutDetachMenu");
    }
    public static void glutDetachMenu ( int button) {
        var mh$ = glutDetachMenu$MH();
        try {
            mh$.invokeExact(button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutTimerFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$723.glutTimerFunc$MH,"glutTimerFunc");
    }
    public static void glutTimerFunc ( int time,  Addressable callback,  int value) {
        var mh$ = glutTimerFunc$MH();
        try {
            mh$.invokeExact(time, callback, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutIdleFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$724.glutIdleFunc$MH,"glutIdleFunc");
    }
    public static void glutIdleFunc ( Addressable callback) {
        var mh$ = glutIdleFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutKeyboardFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$724.glutKeyboardFunc$MH,"glutKeyboardFunc");
    }
    public static void glutKeyboardFunc ( Addressable callback) {
        var mh$ = glutKeyboardFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpecialFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$725.glutSpecialFunc$MH,"glutSpecialFunc");
    }
    public static void glutSpecialFunc ( Addressable callback) {
        var mh$ = glutSpecialFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutReshapeFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$725.glutReshapeFunc$MH,"glutReshapeFunc");
    }
    public static void glutReshapeFunc ( Addressable callback) {
        var mh$ = glutReshapeFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutVisibilityFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$726.glutVisibilityFunc$MH,"glutVisibilityFunc");
    }
    public static void glutVisibilityFunc ( Addressable callback) {
        var mh$ = glutVisibilityFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDisplayFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$726.glutDisplayFunc$MH,"glutDisplayFunc");
    }
    public static void glutDisplayFunc ( Addressable callback) {
        var mh$ = glutDisplayFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMouseFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$727.glutMouseFunc$MH,"glutMouseFunc");
    }
    public static void glutMouseFunc ( Addressable callback) {
        var mh$ = glutMouseFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMotionFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$727.glutMotionFunc$MH,"glutMotionFunc");
    }
    public static void glutMotionFunc ( Addressable callback) {
        var mh$ = glutMotionFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPassiveMotionFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$728.glutPassiveMotionFunc$MH,"glutPassiveMotionFunc");
    }
    public static void glutPassiveMotionFunc ( Addressable callback) {
        var mh$ = glutPassiveMotionFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutEntryFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$728.glutEntryFunc$MH,"glutEntryFunc");
    }
    public static void glutEntryFunc ( Addressable callback) {
        var mh$ = glutEntryFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutKeyboardUpFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$729.glutKeyboardUpFunc$MH,"glutKeyboardUpFunc");
    }
    public static void glutKeyboardUpFunc ( Addressable callback) {
        var mh$ = glutKeyboardUpFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpecialUpFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$729.glutSpecialUpFunc$MH,"glutSpecialUpFunc");
    }
    public static void glutSpecialUpFunc ( Addressable callback) {
        var mh$ = glutSpecialUpFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutJoystickFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$730.glutJoystickFunc$MH,"glutJoystickFunc");
    }
    public static void glutJoystickFunc ( Addressable callback,  int pollInterval) {
        var mh$ = glutJoystickFunc$MH();
        try {
            mh$.invokeExact(callback, pollInterval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMenuStateFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$730.glutMenuStateFunc$MH,"glutMenuStateFunc");
    }
    public static void glutMenuStateFunc ( Addressable callback) {
        var mh$ = glutMenuStateFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMenuStatusFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$731.glutMenuStatusFunc$MH,"glutMenuStatusFunc");
    }
    public static void glutMenuStatusFunc ( Addressable callback) {
        var mh$ = glutMenuStatusFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutOverlayDisplayFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$731.glutOverlayDisplayFunc$MH,"glutOverlayDisplayFunc");
    }
    public static void glutOverlayDisplayFunc ( Addressable callback) {
        var mh$ = glutOverlayDisplayFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWindowStatusFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$732.glutWindowStatusFunc$MH,"glutWindowStatusFunc");
    }
    public static void glutWindowStatusFunc ( Addressable callback) {
        var mh$ = glutWindowStatusFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpaceballMotionFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$732.glutSpaceballMotionFunc$MH,"glutSpaceballMotionFunc");
    }
    public static void glutSpaceballMotionFunc ( Addressable callback) {
        var mh$ = glutSpaceballMotionFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpaceballRotateFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$733.glutSpaceballRotateFunc$MH,"glutSpaceballRotateFunc");
    }
    public static void glutSpaceballRotateFunc ( Addressable callback) {
        var mh$ = glutSpaceballRotateFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpaceballButtonFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$733.glutSpaceballButtonFunc$MH,"glutSpaceballButtonFunc");
    }
    public static void glutSpaceballButtonFunc ( Addressable callback) {
        var mh$ = glutSpaceballButtonFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutButtonBoxFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$734.glutButtonBoxFunc$MH,"glutButtonBoxFunc");
    }
    public static void glutButtonBoxFunc ( Addressable callback) {
        var mh$ = glutButtonBoxFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDialsFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$734.glutDialsFunc$MH,"glutDialsFunc");
    }
    public static void glutDialsFunc ( Addressable callback) {
        var mh$ = glutDialsFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutTabletMotionFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$735.glutTabletMotionFunc$MH,"glutTabletMotionFunc");
    }
    public static void glutTabletMotionFunc ( Addressable callback) {
        var mh$ = glutTabletMotionFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutTabletButtonFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$735.glutTabletButtonFunc$MH,"glutTabletButtonFunc");
    }
    public static void glutTabletButtonFunc ( Addressable callback) {
        var mh$ = glutTabletButtonFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGet$MH() {
        return RuntimeHelper.requireNonNull(constants$735.glutGet$MH,"glutGet");
    }
    public static int glutGet ( int query) {
        var mh$ = glutGet$MH();
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDeviceGet$MH() {
        return RuntimeHelper.requireNonNull(constants$735.glutDeviceGet$MH,"glutDeviceGet");
    }
    public static int glutDeviceGet ( int query) {
        var mh$ = glutDeviceGet$MH();
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGetModifiers$MH() {
        return RuntimeHelper.requireNonNull(constants$736.glutGetModifiers$MH,"glutGetModifiers");
    }
    public static int glutGetModifiers () {
        var mh$ = glutGetModifiers$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutLayerGet$MH() {
        return RuntimeHelper.requireNonNull(constants$736.glutLayerGet$MH,"glutLayerGet");
    }
    public static int glutLayerGet ( int query) {
        var mh$ = glutLayerGet$MH();
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutBitmapCharacter$MH() {
        return RuntimeHelper.requireNonNull(constants$736.glutBitmapCharacter$MH,"glutBitmapCharacter");
    }
    public static void glutBitmapCharacter ( Addressable font,  int character) {
        var mh$ = glutBitmapCharacter$MH();
        try {
            mh$.invokeExact(font, character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutBitmapWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$736.glutBitmapWidth$MH,"glutBitmapWidth");
    }
    public static int glutBitmapWidth ( Addressable font,  int character) {
        var mh$ = glutBitmapWidth$MH();
        try {
            return (int)mh$.invokeExact(font, character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutStrokeCharacter$MH() {
        return RuntimeHelper.requireNonNull(constants$736.glutStrokeCharacter$MH,"glutStrokeCharacter");
    }
    public static void glutStrokeCharacter ( Addressable font,  int character) {
        var mh$ = glutStrokeCharacter$MH();
        try {
            mh$.invokeExact(font, character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutStrokeWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$736.glutStrokeWidth$MH,"glutStrokeWidth");
    }
    public static int glutStrokeWidth ( Addressable font,  int character) {
        var mh$ = glutStrokeWidth$MH();
        try {
            return (int)mh$.invokeExact(font, character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutStrokeWidthf$MH() {
        return RuntimeHelper.requireNonNull(constants$737.glutStrokeWidthf$MH,"glutStrokeWidthf");
    }
    public static float glutStrokeWidthf ( Addressable font,  int character) {
        var mh$ = glutStrokeWidthf$MH();
        try {
            return (float)mh$.invokeExact(font, character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutBitmapLength$MH() {
        return RuntimeHelper.requireNonNull(constants$737.glutBitmapLength$MH,"glutBitmapLength");
    }
    public static int glutBitmapLength ( Addressable font,  Addressable string) {
        var mh$ = glutBitmapLength$MH();
        try {
            return (int)mh$.invokeExact(font, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutStrokeLength$MH() {
        return RuntimeHelper.requireNonNull(constants$737.glutStrokeLength$MH,"glutStrokeLength");
    }
    public static int glutStrokeLength ( Addressable font,  Addressable string) {
        var mh$ = glutStrokeLength$MH();
        try {
            return (int)mh$.invokeExact(font, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutStrokeLengthf$MH() {
        return RuntimeHelper.requireNonNull(constants$737.glutStrokeLengthf$MH,"glutStrokeLengthf");
    }
    public static float glutStrokeLengthf ( Addressable font,  Addressable string) {
        var mh$ = glutStrokeLengthf$MH();
        try {
            return (float)mh$.invokeExact(font, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireCube$MH() {
        return RuntimeHelper.requireNonNull(constants$737.glutWireCube$MH,"glutWireCube");
    }
    public static void glutWireCube ( double size) {
        var mh$ = glutWireCube$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidCube$MH() {
        return RuntimeHelper.requireNonNull(constants$737.glutSolidCube$MH,"glutSolidCube");
    }
    public static void glutSolidCube ( double size) {
        var mh$ = glutSolidCube$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$738.glutWireSphere$MH,"glutWireSphere");
    }
    public static void glutWireSphere ( double radius,  int slices,  int stacks) {
        var mh$ = glutWireSphere$MH();
        try {
            mh$.invokeExact(radius, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$738.glutSolidSphere$MH,"glutSolidSphere");
    }
    public static void glutSolidSphere ( double radius,  int slices,  int stacks) {
        var mh$ = glutSolidSphere$MH();
        try {
            mh$.invokeExact(radius, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireCone$MH() {
        return RuntimeHelper.requireNonNull(constants$738.glutWireCone$MH,"glutWireCone");
    }
    public static void glutWireCone ( double base,  double height,  int slices,  int stacks) {
        var mh$ = glutWireCone$MH();
        try {
            mh$.invokeExact(base, height, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidCone$MH() {
        return RuntimeHelper.requireNonNull(constants$738.glutSolidCone$MH,"glutSolidCone");
    }
    public static void glutSolidCone ( double base,  double height,  int slices,  int stacks) {
        var mh$ = glutSolidCone$MH();
        try {
            mh$.invokeExact(base, height, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireTorus$MH() {
        return RuntimeHelper.requireNonNull(constants$738.glutWireTorus$MH,"glutWireTorus");
    }
    public static void glutWireTorus ( double innerRadius,  double outerRadius,  int sides,  int rings) {
        var mh$ = glutWireTorus$MH();
        try {
            mh$.invokeExact(innerRadius, outerRadius, sides, rings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidTorus$MH() {
        return RuntimeHelper.requireNonNull(constants$738.glutSolidTorus$MH,"glutSolidTorus");
    }
    public static void glutSolidTorus ( double innerRadius,  double outerRadius,  int sides,  int rings) {
        var mh$ = glutSolidTorus$MH();
        try {
            mh$.invokeExact(innerRadius, outerRadius, sides, rings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireDodecahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$739.glutWireDodecahedron$MH,"glutWireDodecahedron");
    }
    public static void glutWireDodecahedron () {
        var mh$ = glutWireDodecahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidDodecahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$739.glutSolidDodecahedron$MH,"glutSolidDodecahedron");
    }
    public static void glutSolidDodecahedron () {
        var mh$ = glutSolidDodecahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireOctahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$739.glutWireOctahedron$MH,"glutWireOctahedron");
    }
    public static void glutWireOctahedron () {
        var mh$ = glutWireOctahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidOctahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$739.glutSolidOctahedron$MH,"glutSolidOctahedron");
    }
    public static void glutSolidOctahedron () {
        var mh$ = glutSolidOctahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireTetrahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$739.glutWireTetrahedron$MH,"glutWireTetrahedron");
    }
    public static void glutWireTetrahedron () {
        var mh$ = glutWireTetrahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidTetrahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$739.glutSolidTetrahedron$MH,"glutSolidTetrahedron");
    }
    public static void glutSolidTetrahedron () {
        var mh$ = glutSolidTetrahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireIcosahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$740.glutWireIcosahedron$MH,"glutWireIcosahedron");
    }
    public static void glutWireIcosahedron () {
        var mh$ = glutWireIcosahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidIcosahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$740.glutSolidIcosahedron$MH,"glutSolidIcosahedron");
    }
    public static void glutSolidIcosahedron () {
        var mh$ = glutSolidIcosahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireTeapot$MH() {
        return RuntimeHelper.requireNonNull(constants$740.glutWireTeapot$MH,"glutWireTeapot");
    }
    public static void glutWireTeapot ( double size) {
        var mh$ = glutWireTeapot$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidTeapot$MH() {
        return RuntimeHelper.requireNonNull(constants$740.glutSolidTeapot$MH,"glutSolidTeapot");
    }
    public static void glutSolidTeapot ( double size) {
        var mh$ = glutSolidTeapot$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGameModeString$MH() {
        return RuntimeHelper.requireNonNull(constants$740.glutGameModeString$MH,"glutGameModeString");
    }
    public static void glutGameModeString ( Addressable string) {
        var mh$ = glutGameModeString$MH();
        try {
            mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutEnterGameMode$MH() {
        return RuntimeHelper.requireNonNull(constants$740.glutEnterGameMode$MH,"glutEnterGameMode");
    }
    public static int glutEnterGameMode () {
        var mh$ = glutEnterGameMode$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutLeaveGameMode$MH() {
        return RuntimeHelper.requireNonNull(constants$741.glutLeaveGameMode$MH,"glutLeaveGameMode");
    }
    public static void glutLeaveGameMode () {
        var mh$ = glutLeaveGameMode$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGameModeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$741.glutGameModeGet$MH,"glutGameModeGet");
    }
    public static int glutGameModeGet ( int query) {
        var mh$ = glutGameModeGet$MH();
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutVideoResizeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$741.glutVideoResizeGet$MH,"glutVideoResizeGet");
    }
    public static int glutVideoResizeGet ( int query) {
        var mh$ = glutVideoResizeGet$MH();
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetupVideoResizing$MH() {
        return RuntimeHelper.requireNonNull(constants$741.glutSetupVideoResizing$MH,"glutSetupVideoResizing");
    }
    public static void glutSetupVideoResizing () {
        var mh$ = glutSetupVideoResizing$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutStopVideoResizing$MH() {
        return RuntimeHelper.requireNonNull(constants$741.glutStopVideoResizing$MH,"glutStopVideoResizing");
    }
    public static void glutStopVideoResizing () {
        var mh$ = glutStopVideoResizing$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutVideoResize$MH() {
        return RuntimeHelper.requireNonNull(constants$741.glutVideoResize$MH,"glutVideoResize");
    }
    public static void glutVideoResize ( int x,  int y,  int width,  int height) {
        var mh$ = glutVideoResize$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutVideoPan$MH() {
        return RuntimeHelper.requireNonNull(constants$742.glutVideoPan$MH,"glutVideoPan");
    }
    public static void glutVideoPan ( int x,  int y,  int width,  int height) {
        var mh$ = glutVideoPan$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetColor$MH() {
        return RuntimeHelper.requireNonNull(constants$742.glutSetColor$MH,"glutSetColor");
    }
    public static void glutSetColor ( int color,  float red,  float green,  float blue) {
        var mh$ = glutSetColor$MH();
        try {
            mh$.invokeExact(color, red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGetColor$MH() {
        return RuntimeHelper.requireNonNull(constants$742.glutGetColor$MH,"glutGetColor");
    }
    public static float glutGetColor ( int color,  int component) {
        var mh$ = glutGetColor$MH();
        try {
            return (float)mh$.invokeExact(color, component);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutCopyColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$742.glutCopyColormap$MH,"glutCopyColormap");
    }
    public static void glutCopyColormap ( int window) {
        var mh$ = glutCopyColormap$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutIgnoreKeyRepeat$MH() {
        return RuntimeHelper.requireNonNull(constants$742.glutIgnoreKeyRepeat$MH,"glutIgnoreKeyRepeat");
    }
    public static void glutIgnoreKeyRepeat ( int ignore) {
        var mh$ = glutIgnoreKeyRepeat$MH();
        try {
            mh$.invokeExact(ignore);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetKeyRepeat$MH() {
        return RuntimeHelper.requireNonNull(constants$742.glutSetKeyRepeat$MH,"glutSetKeyRepeat");
    }
    public static void glutSetKeyRepeat ( int repeatMode) {
        var mh$ = glutSetKeyRepeat$MH();
        try {
            mh$.invokeExact(repeatMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutForceJoystickFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$743.glutForceJoystickFunc$MH,"glutForceJoystickFunc");
    }
    public static void glutForceJoystickFunc () {
        var mh$ = glutForceJoystickFunc$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutExtensionSupported$MH() {
        return RuntimeHelper.requireNonNull(constants$743.glutExtensionSupported$MH,"glutExtensionSupported");
    }
    public static int glutExtensionSupported ( Addressable extension) {
        var mh$ = glutExtensionSupported$MH();
        try {
            return (int)mh$.invokeExact(extension);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutReportErrors$MH() {
        return RuntimeHelper.requireNonNull(constants$743.glutReportErrors$MH,"glutReportErrors");
    }
    public static void glutReportErrors () {
        var mh$ = glutReportErrors$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _calloc_base$MH() {
        return RuntimeHelper.requireNonNull(constants$743._calloc_base$MH,"_calloc_base");
    }
    public static MemoryAddress _calloc_base ( long _Count,  long _Size) {
        var mh$ = _calloc_base$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Count, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$743.calloc$MH,"calloc");
    }
    public static MemoryAddress calloc ( long _Count,  long _Size) {
        var mh$ = calloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Count, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _callnewh$MH() {
        return RuntimeHelper.requireNonNull(constants$743._callnewh$MH,"_callnewh");
    }
    public static int _callnewh ( long _Size) {
        var mh$ = _callnewh$MH();
        try {
            return (int)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _expand$MH() {
        return RuntimeHelper.requireNonNull(constants$744._expand$MH,"_expand");
    }
    public static MemoryAddress _expand ( Addressable _Block,  long _Size) {
        var mh$ = _expand$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _free_base$MH() {
        return RuntimeHelper.requireNonNull(constants$744._free_base$MH,"_free_base");
    }
    public static void _free_base ( Addressable _Block) {
        var mh$ = _free_base$MH();
        try {
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$744.free$MH,"free");
    }
    public static void free ( Addressable _Block) {
        var mh$ = free$MH();
        try {
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _malloc_base$MH() {
        return RuntimeHelper.requireNonNull(constants$744._malloc_base$MH,"_malloc_base");
    }
    public static MemoryAddress _malloc_base ( long _Size) {
        var mh$ = _malloc_base$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$744.malloc$MH,"malloc");
    }
    public static MemoryAddress malloc ( long _Size) {
        var mh$ = malloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _msize_base$MH() {
        return RuntimeHelper.requireNonNull(constants$744._msize_base$MH,"_msize_base");
    }
    public static long _msize_base ( Addressable _Block) {
        var mh$ = _msize_base$MH();
        try {
            return (long)mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _msize$MH() {
        return RuntimeHelper.requireNonNull(constants$745._msize$MH,"_msize");
    }
    public static long _msize ( Addressable _Block) {
        var mh$ = _msize$MH();
        try {
            return (long)mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _realloc_base$MH() {
        return RuntimeHelper.requireNonNull(constants$745._realloc_base$MH,"_realloc_base");
    }
    public static MemoryAddress _realloc_base ( Addressable _Block,  long _Size) {
        var mh$ = _realloc_base$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$745.realloc$MH,"realloc");
    }
    public static MemoryAddress realloc ( Addressable _Block,  long _Size) {
        var mh$ = realloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _recalloc_base$MH() {
        return RuntimeHelper.requireNonNull(constants$745._recalloc_base$MH,"_recalloc_base");
    }
    public static MemoryAddress _recalloc_base ( Addressable _Block,  long _Count,  long _Size) {
        var mh$ = _recalloc_base$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Block, _Count, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _recalloc$MH() {
        return RuntimeHelper.requireNonNull(constants$745._recalloc$MH,"_recalloc");
    }
    public static MemoryAddress _recalloc ( Addressable _Block,  long _Count,  long _Size) {
        var mh$ = _recalloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Block, _Count, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_free$MH() {
        return RuntimeHelper.requireNonNull(constants$745._aligned_free$MH,"_aligned_free");
    }
    public static void _aligned_free ( Addressable _Block) {
        var mh$ = _aligned_free$MH();
        try {
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$746._aligned_malloc$MH,"_aligned_malloc");
    }
    public static MemoryAddress _aligned_malloc ( long _Size,  long _Alignment) {
        var mh$ = _aligned_malloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Size, _Alignment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_offset_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$746._aligned_offset_malloc$MH,"_aligned_offset_malloc");
    }
    public static MemoryAddress _aligned_offset_malloc ( long _Size,  long _Alignment,  long _Offset) {
        var mh$ = _aligned_offset_malloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_msize$MH() {
        return RuntimeHelper.requireNonNull(constants$746._aligned_msize$MH,"_aligned_msize");
    }
    public static long _aligned_msize ( Addressable _Block,  long _Alignment,  long _Offset) {
        var mh$ = _aligned_msize$MH();
        try {
            return (long)mh$.invokeExact(_Block, _Alignment, _Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_offset_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$746._aligned_offset_realloc$MH,"_aligned_offset_realloc");
    }
    public static MemoryAddress _aligned_offset_realloc ( Addressable _Block,  long _Size,  long _Alignment,  long _Offset) {
        var mh$ = _aligned_offset_realloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Block, _Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_offset_recalloc$MH() {
        return RuntimeHelper.requireNonNull(constants$746._aligned_offset_recalloc$MH,"_aligned_offset_recalloc");
    }
    public static MemoryAddress _aligned_offset_recalloc ( Addressable _Block,  long _Count,  long _Size,  long _Alignment,  long _Offset) {
        var mh$ = _aligned_offset_recalloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Block, _Count, _Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$746._aligned_realloc$MH,"_aligned_realloc");
    }
    public static MemoryAddress _aligned_realloc ( Addressable _Block,  long _Size,  long _Alignment) {
        var mh$ = _aligned_realloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Block, _Size, _Alignment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _aligned_recalloc$MH() {
        return RuntimeHelper.requireNonNull(constants$747._aligned_recalloc$MH,"_aligned_recalloc");
    }
    public static MemoryAddress _aligned_recalloc ( Addressable _Block,  long _Count,  long _Size,  long _Alignment) {
        var mh$ = _aligned_recalloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Block, _Count, _Size, _Alignment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfDouble max_align_t = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle bsearch_s$MH() {
        return RuntimeHelper.requireNonNull(constants$747.bsearch_s$MH,"bsearch_s");
    }
    public static MemoryAddress bsearch_s ( Addressable _Key,  Addressable _Base,  long _NumOfElements,  long _SizeOfElements,  Addressable _CompareFunction,  Addressable _Context) {
        var mh$ = bsearch_s$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort_s$MH() {
        return RuntimeHelper.requireNonNull(constants$748.qsort_s$MH,"qsort_s");
    }
    public static void qsort_s ( Addressable _Base,  long _NumOfElements,  long _SizeOfElements,  Addressable _CompareFunction,  Addressable _Context) {
        var mh$ = qsort_s$MH();
        try {
            mh$.invokeExact(_Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$748.bsearch$MH,"bsearch");
    }
    public static MemoryAddress bsearch ( Addressable _Key,  Addressable _Base,  long _NumOfElements,  long _SizeOfElements,  Addressable _CompareFunction) {
        var mh$ = bsearch$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$748.qsort$MH,"qsort");
    }
    public static void qsort ( Addressable _Base,  long _NumOfElements,  long _SizeOfElements,  Addressable _CompareFunction) {
        var mh$ = qsort$MH();
        try {
            mh$.invokeExact(_Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lfind_s$MH() {
        return RuntimeHelper.requireNonNull(constants$748._lfind_s$MH,"_lfind_s");
    }
    public static MemoryAddress _lfind_s ( Addressable _Key,  Addressable _Base,  Addressable _NumOfElements,  long _SizeOfElements,  Addressable _CompareFunction,  Addressable _Context) {
        var mh$ = _lfind_s$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lfind$MH() {
        return RuntimeHelper.requireNonNull(constants$748._lfind$MH,"_lfind");
    }
    public static MemoryAddress _lfind ( Addressable _Key,  Addressable _Base,  Addressable _NumOfElements,  int _SizeOfElements,  Addressable _CompareFunction) {
        var mh$ = _lfind$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lsearch_s$MH() {
        return RuntimeHelper.requireNonNull(constants$748._lsearch_s$MH,"_lsearch_s");
    }
    public static MemoryAddress _lsearch_s ( Addressable _Key,  Addressable _Base,  Addressable _NumOfElements,  long _SizeOfElements,  Addressable _CompareFunction,  Addressable _Context) {
        var mh$ = _lsearch_s$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$749._lsearch$MH,"_lsearch");
    }
    public static MemoryAddress _lsearch ( Addressable _Key,  Addressable _Base,  Addressable _NumOfElements,  int _SizeOfElements,  Addressable _CompareFunction) {
        var mh$ = _lsearch$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lfind$MH() {
        return RuntimeHelper.requireNonNull(constants$749.lfind$MH,"lfind");
    }
    public static MemoryAddress lfind ( Addressable _Key,  Addressable _Base,  Addressable _NumOfElements,  int _SizeOfElements,  Addressable _CompareFunction) {
        var mh$ = lfind$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$749.lsearch$MH,"lsearch");
    }
    public static MemoryAddress lsearch ( Addressable _Key,  Addressable _Base,  Addressable _NumOfElements,  int _SizeOfElements,  Addressable _CompareFunction) {
        var mh$ = lsearch$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _itow_s$MH() {
        return RuntimeHelper.requireNonNull(constants$749._itow_s$MH,"_itow_s");
    }
    public static int _itow_s ( int _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _itow_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _itow$MH() {
        return RuntimeHelper.requireNonNull(constants$749._itow$MH,"_itow");
    }
    public static MemoryAddress _itow ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _itow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ltow_s$MH() {
        return RuntimeHelper.requireNonNull(constants$749._ltow_s$MH,"_ltow_s");
    }
    public static int _ltow_s ( int _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _ltow_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ltow$MH() {
        return RuntimeHelper.requireNonNull(constants$750._ltow$MH,"_ltow");
    }
    public static MemoryAddress _ltow ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _ltow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ultow_s$MH() {
        return RuntimeHelper.requireNonNull(constants$750._ultow_s$MH,"_ultow_s");
    }
    public static int _ultow_s ( int _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _ultow_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ultow$MH() {
        return RuntimeHelper.requireNonNull(constants$750._ultow$MH,"_ultow");
    }
    public static MemoryAddress _ultow ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _ultow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstod$MH() {
        return RuntimeHelper.requireNonNull(constants$750.wcstod$MH,"wcstod");
    }
    public static double wcstod ( Addressable _String,  Addressable _EndPtr) {
        var mh$ = wcstod$MH();
        try {
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstod_l$MH() {
        return RuntimeHelper.requireNonNull(constants$750._wcstod_l$MH,"_wcstod_l");
    }
    public static double _wcstod_l ( Addressable _String,  Addressable _EndPtr,  Addressable _Locale) {
        var mh$ = _wcstod_l$MH();
        try {
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstol$MH() {
        return RuntimeHelper.requireNonNull(constants$750.wcstol$MH,"wcstol");
    }
    public static int wcstol ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = wcstol$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstol_l$MH() {
        return RuntimeHelper.requireNonNull(constants$751._wcstol_l$MH,"_wcstol_l");
    }
    public static int _wcstol_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _wcstol_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoll$MH() {
        return RuntimeHelper.requireNonNull(constants$751.wcstoll$MH,"wcstoll");
    }
    public static long wcstoll ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = wcstoll$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$751._wcstoll_l$MH,"_wcstoll_l");
    }
    public static long _wcstoll_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _wcstoll_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoul$MH() {
        return RuntimeHelper.requireNonNull(constants$751.wcstoul$MH,"wcstoul");
    }
    public static int wcstoul ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = wcstoul$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoul_l$MH() {
        return RuntimeHelper.requireNonNull(constants$751._wcstoul_l$MH,"_wcstoul_l");
    }
    public static int _wcstoul_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _wcstoul_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoull$MH() {
        return RuntimeHelper.requireNonNull(constants$751.wcstoull$MH,"wcstoull");
    }
    public static long wcstoull ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = wcstoull$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoull_l$MH() {
        return RuntimeHelper.requireNonNull(constants$752._wcstoull_l$MH,"_wcstoull_l");
    }
    public static long _wcstoull_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _wcstoull_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstof$MH() {
        return RuntimeHelper.requireNonNull(constants$752.wcstof$MH,"wcstof");
    }
    public static float wcstof ( Addressable _String,  Addressable _EndPtr) {
        var mh$ = wcstof$MH();
        try {
            return (float)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstof_l$MH() {
        return RuntimeHelper.requireNonNull(constants$752._wcstof_l$MH,"_wcstof_l");
    }
    public static float _wcstof_l ( Addressable _String,  Addressable _EndPtr,  Addressable _Locale) {
        var mh$ = _wcstof_l$MH();
        try {
            return (float)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtof$MH() {
        return RuntimeHelper.requireNonNull(constants$752._wtof$MH,"_wtof");
    }
    public static double _wtof ( Addressable _String) {
        var mh$ = _wtof$MH();
        try {
            return (double)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtof_l$MH() {
        return RuntimeHelper.requireNonNull(constants$752._wtof_l$MH,"_wtof_l");
    }
    public static double _wtof_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _wtof_l$MH();
        try {
            return (double)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtoi$MH() {
        return RuntimeHelper.requireNonNull(constants$752._wtoi$MH,"_wtoi");
    }
    public static int _wtoi ( Addressable _String) {
        var mh$ = _wtoi$MH();
        try {
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtoi_l$MH() {
        return RuntimeHelper.requireNonNull(constants$753._wtoi_l$MH,"_wtoi_l");
    }
    public static int _wtoi_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _wtoi_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtol$MH() {
        return RuntimeHelper.requireNonNull(constants$753._wtol$MH,"_wtol");
    }
    public static int _wtol ( Addressable _String) {
        var mh$ = _wtol$MH();
        try {
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtol_l$MH() {
        return RuntimeHelper.requireNonNull(constants$753._wtol_l$MH,"_wtol_l");
    }
    public static int _wtol_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _wtol_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$753._wtoll$MH,"_wtoll");
    }
    public static long _wtoll ( Addressable _String) {
        var mh$ = _wtoll$MH();
        try {
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$753._wtoll_l$MH,"_wtoll_l");
    }
    public static long _wtoll_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _wtoll_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _i64tow_s$MH() {
        return RuntimeHelper.requireNonNull(constants$753._i64tow_s$MH,"_i64tow_s");
    }
    public static int _i64tow_s ( long _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _i64tow_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _i64tow$MH() {
        return RuntimeHelper.requireNonNull(constants$754._i64tow$MH,"_i64tow");
    }
    public static MemoryAddress _i64tow ( long _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _i64tow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ui64tow_s$MH() {
        return RuntimeHelper.requireNonNull(constants$754._ui64tow_s$MH,"_ui64tow_s");
    }
    public static int _ui64tow_s ( long _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _ui64tow_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ui64tow$MH() {
        return RuntimeHelper.requireNonNull(constants$754._ui64tow$MH,"_ui64tow");
    }
    public static MemoryAddress _ui64tow ( long _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _ui64tow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtoi64$MH() {
        return RuntimeHelper.requireNonNull(constants$754._wtoi64$MH,"_wtoi64");
    }
    public static long _wtoi64 ( Addressable _String) {
        var mh$ = _wtoi64$MH();
        try {
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wtoi64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$754._wtoi64_l$MH,"_wtoi64_l");
    }
    public static long _wtoi64_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _wtoi64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoi64$MH() {
        return RuntimeHelper.requireNonNull(constants$754._wcstoi64$MH,"_wcstoi64");
    }
    public static long _wcstoi64 ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = _wcstoi64$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoi64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$755._wcstoi64_l$MH,"_wcstoi64_l");
    }
    public static long _wcstoi64_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _wcstoi64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoui64$MH() {
        return RuntimeHelper.requireNonNull(constants$755._wcstoui64$MH,"_wcstoui64");
    }
    public static long _wcstoui64 ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = _wcstoui64$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstoui64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$755._wcstoui64_l$MH,"_wcstoui64_l");
    }
    public static long _wcstoui64_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _wcstoui64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wfullpath$MH() {
        return RuntimeHelper.requireNonNull(constants$755._wfullpath$MH,"_wfullpath");
    }
    public static MemoryAddress _wfullpath ( Addressable _Buffer,  Addressable _Path,  long _BufferCount) {
        var mh$ = _wfullpath$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Buffer, _Path, _BufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wmakepath_s$MH() {
        return RuntimeHelper.requireNonNull(constants$755._wmakepath_s$MH,"_wmakepath_s");
    }
    public static int _wmakepath_s ( Addressable _Buffer,  long _BufferCount,  Addressable _Drive,  Addressable _Dir,  Addressable _Filename,  Addressable _Ext) {
        var mh$ = _wmakepath_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wmakepath$MH() {
        return RuntimeHelper.requireNonNull(constants$755._wmakepath$MH,"_wmakepath");
    }
    public static void _wmakepath ( Addressable _Buffer,  Addressable _Drive,  Addressable _Dir,  Addressable _Filename,  Addressable _Ext) {
        var mh$ = _wmakepath$MH();
        try {
            mh$.invokeExact(_Buffer, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wperror$MH() {
        return RuntimeHelper.requireNonNull(constants$756._wperror$MH,"_wperror");
    }
    public static void _wperror ( Addressable _ErrorMessage) {
        var mh$ = _wperror$MH();
        try {
            mh$.invokeExact(_ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wsplitpath$MH() {
        return RuntimeHelper.requireNonNull(constants$756._wsplitpath$MH,"_wsplitpath");
    }
    public static void _wsplitpath ( Addressable _FullPath,  Addressable _Drive,  Addressable _Dir,  Addressable _Filename,  Addressable _Ext) {
        var mh$ = _wsplitpath$MH();
        try {
            mh$.invokeExact(_FullPath, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wsplitpath_s$MH() {
        return RuntimeHelper.requireNonNull(constants$756._wsplitpath_s$MH,"_wsplitpath_s");
    }
    public static int _wsplitpath_s ( Addressable _FullPath,  Addressable _Drive,  long _DriveCount,  Addressable _Dir,  long _DirCount,  Addressable _Filename,  long _FilenameCount,  Addressable _Ext,  long _ExtCount) {
        var mh$ = _wsplitpath_s$MH();
        try {
            return (int)mh$.invokeExact(_FullPath, _Drive, _DriveCount, _Dir, _DirCount, _Filename, _FilenameCount, _Ext, _ExtCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wdupenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$756._wdupenv_s$MH,"_wdupenv_s");
    }
    public static int _wdupenv_s ( Addressable _Buffer,  Addressable _BufferCount,  Addressable _VarName) {
        var mh$ = _wdupenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wgetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$756._wgetenv$MH,"_wgetenv");
    }
    public static MemoryAddress _wgetenv ( Addressable _VarName) {
        var mh$ = _wgetenv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wgetenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$756._wgetenv_s$MH,"_wgetenv_s");
    }
    public static int _wgetenv_s ( Addressable _RequiredCount,  Addressable _Buffer,  long _BufferCount,  Addressable _VarName) {
        var mh$ = _wgetenv_s$MH();
        try {
            return (int)mh$.invokeExact(_RequiredCount, _Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wputenv$MH() {
        return RuntimeHelper.requireNonNull(constants$757._wputenv$MH,"_wputenv");
    }
    public static int _wputenv ( Addressable _EnvString) {
        var mh$ = _wputenv$MH();
        try {
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wputenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$757._wputenv_s$MH,"_wputenv_s");
    }
    public static int _wputenv_s ( Addressable _Name,  Addressable _Value) {
        var mh$ = _wputenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Name, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wsearchenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$757._wsearchenv_s$MH,"_wsearchenv_s");
    }
    public static int _wsearchenv_s ( Addressable _Filename,  Addressable _VarName,  Addressable _Buffer,  long _BufferCount) {
        var mh$ = _wsearchenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Filename, _VarName, _Buffer, _BufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wsearchenv$MH() {
        return RuntimeHelper.requireNonNull(constants$757._wsearchenv$MH,"_wsearchenv");
    }
    public static void _wsearchenv ( Addressable _Filename,  Addressable _VarName,  Addressable _ResultPath) {
        var mh$ = _wsearchenv$MH();
        try {
            mh$.invokeExact(_Filename, _VarName, _ResultPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wsystem$MH() {
        return RuntimeHelper.requireNonNull(constants$757._wsystem$MH,"_wsystem");
    }
    public static int _wsystem ( Addressable _Command) {
        var mh$ = _wsystem$MH();
        try {
            return (int)mh$.invokeExact(_Command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _swab$MH() {
        return RuntimeHelper.requireNonNull(constants$757._swab$MH,"_swab");
    }
    public static void _swab ( Addressable _Buf1,  Addressable _Buf2,  int _SizeInBytes) {
        var mh$ = _swab$MH();
        try {
            mh$.invokeExact(_Buf1, _Buf2, _SizeInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$758.exit$MH,"exit");
    }
    public static void exit ( int _Code) {
        var mh$ = exit$MH();
        try {
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _exit$MH() {
        return RuntimeHelper.requireNonNull(constants$758._exit$MH,"_exit");
    }
    public static void _exit ( int _Code) {
        var mh$ = _exit$MH();
        try {
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$758._Exit$MH,"_Exit");
    }
    public static void _Exit ( int _Code) {
        var mh$ = _Exit$MH();
        try {
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$758.quick_exit$MH,"quick_exit");
    }
    public static void quick_exit ( int _Code) {
        var mh$ = quick_exit$MH();
        try {
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$758.abort$MH,"abort");
    }
    public static void abort () {
        var mh$ = abort$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_abort_behavior$MH() {
        return RuntimeHelper.requireNonNull(constants$758._set_abort_behavior$MH,"_set_abort_behavior");
    }
    public static int _set_abort_behavior ( int _Flags,  int _Mask) {
        var mh$ = _set_abort_behavior$MH();
        try {
            return (int)mh$.invokeExact(_Flags, _Mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$759.atexit$MH,"atexit");
    }
    public static int atexit ( Addressable x0) {
        var mh$ = atexit$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _onexit$MH() {
        return RuntimeHelper.requireNonNull(constants$759._onexit$MH,"_onexit");
    }
    public static MemoryAddress _onexit ( Addressable _Func) {
        var mh$ = _onexit$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$760.at_quick_exit$MH,"at_quick_exit");
    }
    public static int at_quick_exit ( Addressable x0) {
        var mh$ = at_quick_exit$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_purecall_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$761._set_purecall_handler$MH,"_set_purecall_handler");
    }
    public static MemoryAddress _set_purecall_handler ( Addressable _Handler) {
        var mh$ = _set_purecall_handler$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_purecall_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$761._get_purecall_handler$MH,"_get_purecall_handler");
    }
    public static MemoryAddress _get_purecall_handler () {
        var mh$ = _get_purecall_handler$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_invalid_parameter_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$761._set_invalid_parameter_handler$MH,"_set_invalid_parameter_handler");
    }
    public static MemoryAddress _set_invalid_parameter_handler ( Addressable _Handler) {
        var mh$ = _set_invalid_parameter_handler$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_invalid_parameter_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$761._get_invalid_parameter_handler$MH,"_get_invalid_parameter_handler");
    }
    public static MemoryAddress _get_invalid_parameter_handler () {
        var mh$ = _get_invalid_parameter_handler$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_thread_local_invalid_parameter_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$761._set_thread_local_invalid_parameter_handler$MH,"_set_thread_local_invalid_parameter_handler");
    }
    public static MemoryAddress _set_thread_local_invalid_parameter_handler ( Addressable _Handler) {
        var mh$ = _set_thread_local_invalid_parameter_handler$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_thread_local_invalid_parameter_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$762._get_thread_local_invalid_parameter_handler$MH,"_get_thread_local_invalid_parameter_handler");
    }
    public static MemoryAddress _get_thread_local_invalid_parameter_handler () {
        var mh$ = _get_thread_local_invalid_parameter_handler$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_error_mode$MH() {
        return RuntimeHelper.requireNonNull(constants$762._set_error_mode$MH,"_set_error_mode");
    }
    public static int _set_error_mode ( int _Mode) {
        var mh$ = _set_error_mode$MH();
        try {
            return (int)mh$.invokeExact(_Mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sys_errlist$MH() {
        return RuntimeHelper.requireNonNull(constants$762.__sys_errlist$MH,"__sys_errlist");
    }
    public static MemoryAddress __sys_errlist () {
        var mh$ = __sys_errlist$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sys_nerr$MH() {
        return RuntimeHelper.requireNonNull(constants$762.__sys_nerr$MH,"__sys_nerr");
    }
    public static MemoryAddress __sys_nerr () {
        var mh$ = __sys_nerr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$762.perror$MH,"perror");
    }
    public static void perror ( Addressable _ErrMsg) {
        var mh$ = perror$MH();
        try {
            mh$.invokeExact(_ErrMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p__pgmptr$MH() {
        return RuntimeHelper.requireNonNull(constants$762.__p__pgmptr$MH,"__p__pgmptr");
    }
    public static MemoryAddress __p__pgmptr () {
        var mh$ = __p__pgmptr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p__wpgmptr$MH() {
        return RuntimeHelper.requireNonNull(constants$763.__p__wpgmptr$MH,"__p__wpgmptr");
    }
    public static MemoryAddress __p__wpgmptr () {
        var mh$ = __p__wpgmptr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p__fmode$MH() {
        return RuntimeHelper.requireNonNull(constants$763.__p__fmode$MH,"__p__fmode");
    }
    public static MemoryAddress __p__fmode () {
        var mh$ = __p__fmode$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_pgmptr$MH() {
        return RuntimeHelper.requireNonNull(constants$763._get_pgmptr$MH,"_get_pgmptr");
    }
    public static int _get_pgmptr ( Addressable _Value) {
        var mh$ = _get_pgmptr$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_wpgmptr$MH() {
        return RuntimeHelper.requireNonNull(constants$763._get_wpgmptr$MH,"_get_wpgmptr");
    }
    public static int _get_wpgmptr ( Addressable _Value) {
        var mh$ = _get_wpgmptr$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_fmode$MH() {
        return RuntimeHelper.requireNonNull(constants$763._set_fmode$MH,"_set_fmode");
    }
    public static int _set_fmode ( int _Mode) {
        var mh$ = _set_fmode$MH();
        try {
            return (int)mh$.invokeExact(_Mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_fmode$MH() {
        return RuntimeHelper.requireNonNull(constants$763._get_fmode$MH,"_get_fmode");
    }
    public static int _get_fmode ( Addressable _PMode) {
        var mh$ = _get_fmode$MH();
        try {
            return (int)mh$.invokeExact(_PMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$764.abs$MH,"abs");
    }
    public static int abs ( int _Number) {
        var mh$ = abs$MH();
        try {
            return (int)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$764.labs$MH,"labs");
    }
    public static int labs ( int _Number) {
        var mh$ = labs$MH();
        try {
            return (int)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$764.llabs$MH,"llabs");
    }
    public static long llabs ( long _Number) {
        var mh$ = llabs$MH();
        try {
            return (long)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _abs64$MH() {
        return RuntimeHelper.requireNonNull(constants$764._abs64$MH,"_abs64");
    }
    public static long _abs64 ( long _Number) {
        var mh$ = _abs64$MH();
        try {
            return (long)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _byteswap_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$764._byteswap_ushort$MH,"_byteswap_ushort");
    }
    public static short _byteswap_ushort ( short _Number) {
        var mh$ = _byteswap_ushort$MH();
        try {
            return (short)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _byteswap_ulong$MH() {
        return RuntimeHelper.requireNonNull(constants$764._byteswap_ulong$MH,"_byteswap_ulong");
    }
    public static int _byteswap_ulong ( int _Number) {
        var mh$ = _byteswap_ulong$MH();
        try {
            return (int)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _byteswap_uint64$MH() {
        return RuntimeHelper.requireNonNull(constants$765._byteswap_uint64$MH,"_byteswap_uint64");
    }
    public static long _byteswap_uint64 ( long _Number) {
        var mh$ = _byteswap_uint64$MH();
        try {
            return (long)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$765.div$MH,"div");
    }
    public static MemorySegment div ( SegmentAllocator allocator,  int _Numerator,  int _Denominator) {
        var mh$ = div$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, _Numerator, _Denominator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$765.ldiv$MH,"ldiv");
    }
    public static MemorySegment ldiv ( SegmentAllocator allocator,  int _Numerator,  int _Denominator) {
        var mh$ = ldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, _Numerator, _Denominator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$765.lldiv$MH,"lldiv");
    }
    public static MemorySegment lldiv ( SegmentAllocator allocator,  long _Numerator,  long _Denominator) {
        var mh$ = lldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, _Numerator, _Denominator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lrotl$MH() {
        return RuntimeHelper.requireNonNull(constants$765._lrotl$MH,"_lrotl");
    }
    public static int _lrotl ( int _Value,  int _Shift) {
        var mh$ = _lrotl$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _lrotr$MH() {
        return RuntimeHelper.requireNonNull(constants$765._lrotr$MH,"_lrotr");
    }
    public static int _lrotr ( int _Value,  int _Shift) {
        var mh$ = _lrotr$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$766.srand$MH,"srand");
    }
    public static void srand ( int _Seed) {
        var mh$ = srand$MH();
        try {
            mh$.invokeExact(_Seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$766.rand$MH,"rand");
    }
    public static int rand () {
        var mh$ = rand$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$766.atof$MH,"atof");
    }
    public static double atof ( Addressable _String) {
        var mh$ = atof$MH();
        try {
            return (double)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$766.atoi$MH,"atoi");
    }
    public static int atoi ( Addressable _String) {
        var mh$ = atoi$MH();
        try {
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$766.atol$MH,"atol");
    }
    public static int atol ( Addressable _String) {
        var mh$ = atol$MH();
        try {
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$766.atoll$MH,"atoll");
    }
    public static long atoll ( Addressable _String) {
        var mh$ = atoll$MH();
        try {
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoi64$MH() {
        return RuntimeHelper.requireNonNull(constants$767._atoi64$MH,"_atoi64");
    }
    public static long _atoi64 ( Addressable _String) {
        var mh$ = _atoi64$MH();
        try {
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atof_l$MH() {
        return RuntimeHelper.requireNonNull(constants$767._atof_l$MH,"_atof_l");
    }
    public static double _atof_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _atof_l$MH();
        try {
            return (double)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoi_l$MH() {
        return RuntimeHelper.requireNonNull(constants$767._atoi_l$MH,"_atoi_l");
    }
    public static int _atoi_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _atoi_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atol_l$MH() {
        return RuntimeHelper.requireNonNull(constants$767._atol_l$MH,"_atol_l");
    }
    public static int _atol_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _atol_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$767._atoll_l$MH,"_atoll_l");
    }
    public static long _atoll_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _atoll_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoi64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$767._atoi64_l$MH,"_atoi64_l");
    }
    public static long _atoi64_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _atoi64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoflt$MH() {
        return RuntimeHelper.requireNonNull(constants$768._atoflt$MH,"_atoflt");
    }
    public static int _atoflt ( Addressable _Result,  Addressable _String) {
        var mh$ = _atoflt$MH();
        try {
            return (int)mh$.invokeExact(_Result, _String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atodbl$MH() {
        return RuntimeHelper.requireNonNull(constants$768._atodbl$MH,"_atodbl");
    }
    public static int _atodbl ( Addressable _Result,  Addressable _String) {
        var mh$ = _atodbl$MH();
        try {
            return (int)mh$.invokeExact(_Result, _String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoldbl$MH() {
        return RuntimeHelper.requireNonNull(constants$768._atoldbl$MH,"_atoldbl");
    }
    public static int _atoldbl ( Addressable _Result,  Addressable _String) {
        var mh$ = _atoldbl$MH();
        try {
            return (int)mh$.invokeExact(_Result, _String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoflt_l$MH() {
        return RuntimeHelper.requireNonNull(constants$768._atoflt_l$MH,"_atoflt_l");
    }
    public static int _atoflt_l ( Addressable _Result,  Addressable _String,  Addressable _Locale) {
        var mh$ = _atoflt_l$MH();
        try {
            return (int)mh$.invokeExact(_Result, _String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atodbl_l$MH() {
        return RuntimeHelper.requireNonNull(constants$768._atodbl_l$MH,"_atodbl_l");
    }
    public static int _atodbl_l ( Addressable _Result,  Addressable _String,  Addressable _Locale) {
        var mh$ = _atodbl_l$MH();
        try {
            return (int)mh$.invokeExact(_Result, _String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _atoldbl_l$MH() {
        return RuntimeHelper.requireNonNull(constants$768._atoldbl_l$MH,"_atoldbl_l");
    }
    public static int _atoldbl_l ( Addressable _Result,  Addressable _String,  Addressable _Locale) {
        var mh$ = _atoldbl_l$MH();
        try {
            return (int)mh$.invokeExact(_Result, _String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$769.strtof$MH,"strtof");
    }
    public static float strtof ( Addressable _String,  Addressable _EndPtr) {
        var mh$ = strtof$MH();
        try {
            return (float)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtof_l$MH() {
        return RuntimeHelper.requireNonNull(constants$769._strtof_l$MH,"_strtof_l");
    }
    public static float _strtof_l ( Addressable _String,  Addressable _EndPtr,  Addressable _Locale) {
        var mh$ = _strtof_l$MH();
        try {
            return (float)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$769.strtod$MH,"strtod");
    }
    public static double strtod ( Addressable _String,  Addressable _EndPtr) {
        var mh$ = strtod$MH();
        try {
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtod_l$MH() {
        return RuntimeHelper.requireNonNull(constants$769._strtod_l$MH,"_strtod_l");
    }
    public static double _strtod_l ( Addressable _String,  Addressable _EndPtr,  Addressable _Locale) {
        var mh$ = _strtod_l$MH();
        try {
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$769.strtol$MH,"strtol");
    }
    public static int strtol ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = strtol$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtol_l$MH() {
        return RuntimeHelper.requireNonNull(constants$769._strtol_l$MH,"_strtol_l");
    }
    public static int _strtol_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _strtol_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$770.strtoll$MH,"strtoll");
    }
    public static long strtoll ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = strtoll$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$770._strtoll_l$MH,"_strtoll_l");
    }
    public static long _strtoll_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _strtoll_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$770.strtoul$MH,"strtoul");
    }
    public static int strtoul ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = strtoul$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoul_l$MH() {
        return RuntimeHelper.requireNonNull(constants$770._strtoul_l$MH,"_strtoul_l");
    }
    public static int _strtoul_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _strtoul_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$770.strtoull$MH,"strtoull");
    }
    public static long strtoull ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = strtoull$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoull_l$MH() {
        return RuntimeHelper.requireNonNull(constants$770._strtoull_l$MH,"_strtoull_l");
    }
    public static long _strtoull_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _strtoull_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoi64$MH() {
        return RuntimeHelper.requireNonNull(constants$771._strtoi64$MH,"_strtoi64");
    }
    public static long _strtoi64 ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = _strtoi64$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoi64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$771._strtoi64_l$MH,"_strtoi64_l");
    }
    public static long _strtoi64_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _strtoi64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoui64$MH() {
        return RuntimeHelper.requireNonNull(constants$771._strtoui64$MH,"_strtoui64");
    }
    public static long _strtoui64 ( Addressable _String,  Addressable _EndPtr,  int _Radix) {
        var mh$ = _strtoui64$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strtoui64_l$MH() {
        return RuntimeHelper.requireNonNull(constants$771._strtoui64_l$MH,"_strtoui64_l");
    }
    public static long _strtoui64_l ( Addressable _String,  Addressable _EndPtr,  int _Radix,  Addressable _Locale) {
        var mh$ = _strtoui64_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _itoa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$771._itoa_s$MH,"_itoa_s");
    }
    public static int _itoa_s ( int _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _itoa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _itoa$MH() {
        return RuntimeHelper.requireNonNull(constants$771._itoa$MH,"_itoa");
    }
    public static MemoryAddress _itoa ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _itoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ltoa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$772._ltoa_s$MH,"_ltoa_s");
    }
    public static int _ltoa_s ( int _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _ltoa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ltoa$MH() {
        return RuntimeHelper.requireNonNull(constants$772._ltoa$MH,"_ltoa");
    }
    public static MemoryAddress _ltoa ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _ltoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ultoa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$772._ultoa_s$MH,"_ultoa_s");
    }
    public static int _ultoa_s ( int _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _ultoa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ultoa$MH() {
        return RuntimeHelper.requireNonNull(constants$772._ultoa$MH,"_ultoa");
    }
    public static MemoryAddress _ultoa ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _ultoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _i64toa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$772._i64toa_s$MH,"_i64toa_s");
    }
    public static int _i64toa_s ( long _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _i64toa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _i64toa$MH() {
        return RuntimeHelper.requireNonNull(constants$772._i64toa$MH,"_i64toa");
    }
    public static MemoryAddress _i64toa ( long _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _i64toa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ui64toa_s$MH() {
        return RuntimeHelper.requireNonNull(constants$773._ui64toa_s$MH,"_ui64toa_s");
    }
    public static int _ui64toa_s ( long _Value,  Addressable _Buffer,  long _BufferCount,  int _Radix) {
        var mh$ = _ui64toa_s$MH();
        try {
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ui64toa$MH() {
        return RuntimeHelper.requireNonNull(constants$773._ui64toa$MH,"_ui64toa");
    }
    public static MemoryAddress _ui64toa ( long _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = _ui64toa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ecvt_s$MH() {
        return RuntimeHelper.requireNonNull(constants$773._ecvt_s$MH,"_ecvt_s");
    }
    public static int _ecvt_s ( Addressable _Buffer,  long _BufferCount,  double _Value,  int _DigitCount,  Addressable _PtDec,  Addressable _PtSign) {
        var mh$ = _ecvt_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$773._ecvt$MH,"_ecvt");
    }
    public static MemoryAddress _ecvt ( double _Value,  int _DigitCount,  Addressable _PtDec,  Addressable _PtSign) {
        var mh$ = _ecvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fcvt_s$MH() {
        return RuntimeHelper.requireNonNull(constants$773._fcvt_s$MH,"_fcvt_s");
    }
    public static int _fcvt_s ( Addressable _Buffer,  long _BufferCount,  double _Value,  int _FractionalDigitCount,  Addressable _PtDec,  Addressable _PtSign) {
        var mh$ = _fcvt_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$773._fcvt$MH,"_fcvt");
    }
    public static MemoryAddress _fcvt ( double _Value,  int _FractionalDigitCount,  Addressable _PtDec,  Addressable _PtSign) {
        var mh$ = _fcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gcvt_s$MH() {
        return RuntimeHelper.requireNonNull(constants$774._gcvt_s$MH,"_gcvt_s");
    }
    public static int _gcvt_s ( Addressable _Buffer,  long _BufferCount,  double _Value,  int _DigitCount) {
        var mh$ = _gcvt_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _DigitCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$774._gcvt$MH,"_gcvt");
    }
    public static MemoryAddress _gcvt ( double _Value,  int _DigitCount,  Addressable _Buffer) {
        var mh$ = _gcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _DigitCount, _Buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$774.mblen$MH,"mblen");
    }
    public static int mblen ( Addressable _Ch,  long _MaxCount) {
        var mh$ = mblen$MH();
        try {
            return (int)mh$.invokeExact(_Ch, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mblen_l$MH() {
        return RuntimeHelper.requireNonNull(constants$774._mblen_l$MH,"_mblen_l");
    }
    public static int _mblen_l ( Addressable _Ch,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _mblen_l$MH();
        try {
            return (int)mh$.invokeExact(_Ch, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstrlen$MH() {
        return RuntimeHelper.requireNonNull(constants$774._mbstrlen$MH,"_mbstrlen");
    }
    public static long _mbstrlen ( Addressable _String) {
        var mh$ = _mbstrlen$MH();
        try {
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstrlen_l$MH() {
        return RuntimeHelper.requireNonNull(constants$774._mbstrlen_l$MH,"_mbstrlen_l");
    }
    public static long _mbstrlen_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = _mbstrlen_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstrnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$775._mbstrnlen$MH,"_mbstrnlen");
    }
    public static long _mbstrnlen ( Addressable _String,  long _MaxCount) {
        var mh$ = _mbstrnlen$MH();
        try {
            return (long)mh$.invokeExact(_String, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstrnlen_l$MH() {
        return RuntimeHelper.requireNonNull(constants$775._mbstrnlen_l$MH,"_mbstrnlen_l");
    }
    public static long _mbstrnlen_l ( Addressable _String,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _mbstrnlen_l$MH();
        try {
            return (long)mh$.invokeExact(_String, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$775.mbtowc$MH,"mbtowc");
    }
    public static int mbtowc ( Addressable _DstCh,  Addressable _SrcCh,  long _SrcSizeInBytes) {
        var mh$ = mbtowc$MH();
        try {
            return (int)mh$.invokeExact(_DstCh, _SrcCh, _SrcSizeInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbtowc_l$MH() {
        return RuntimeHelper.requireNonNull(constants$775._mbtowc_l$MH,"_mbtowc_l");
    }
    public static int _mbtowc_l ( Addressable _DstCh,  Addressable _SrcCh,  long _SrcSizeInBytes,  Addressable _Locale) {
        var mh$ = _mbtowc_l$MH();
        try {
            return (int)mh$.invokeExact(_DstCh, _SrcCh, _SrcSizeInBytes, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs_s$MH() {
        return RuntimeHelper.requireNonNull(constants$775.mbstowcs_s$MH,"mbstowcs_s");
    }
    public static int mbstowcs_s ( Addressable _PtNumOfCharConverted,  Addressable _DstBuf,  long _SizeInWords,  Addressable _SrcBuf,  long _MaxCount) {
        var mh$ = mbstowcs_s$MH();
        try {
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$775.mbstowcs$MH,"mbstowcs");
    }
    public static long mbstowcs ( Addressable _Dest,  Addressable _Source,  long _MaxCount) {
        var mh$ = mbstowcs$MH();
        try {
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstowcs_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$776._mbstowcs_s_l$MH,"_mbstowcs_s_l");
    }
    public static int _mbstowcs_s_l ( Addressable _PtNumOfCharConverted,  Addressable _DstBuf,  long _SizeInWords,  Addressable _SrcBuf,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _mbstowcs_s_l$MH();
        try {
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mbstowcs_l$MH() {
        return RuntimeHelper.requireNonNull(constants$776._mbstowcs_l$MH,"_mbstowcs_l");
    }
    public static long _mbstowcs_l ( Addressable _Dest,  Addressable _Source,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _mbstowcs_l$MH();
        try {
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$776.wctomb$MH,"wctomb");
    }
    public static int wctomb ( Addressable _MbCh,  short _WCh) {
        var mh$ = wctomb$MH();
        try {
            return (int)mh$.invokeExact(_MbCh, _WCh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wctomb_l$MH() {
        return RuntimeHelper.requireNonNull(constants$776._wctomb_l$MH,"_wctomb_l");
    }
    public static int _wctomb_l ( Addressable _MbCh,  short _WCh,  Addressable _Locale) {
        var mh$ = _wctomb_l$MH();
        try {
            return (int)mh$.invokeExact(_MbCh, _WCh, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb_s$MH() {
        return RuntimeHelper.requireNonNull(constants$776.wctomb_s$MH,"wctomb_s");
    }
    public static int wctomb_s ( Addressable _SizeConverted,  Addressable _MbCh,  long _SizeInBytes,  short _WCh) {
        var mh$ = wctomb_s$MH();
        try {
            return (int)mh$.invokeExact(_SizeConverted, _MbCh, _SizeInBytes, _WCh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wctomb_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$776._wctomb_s_l$MH,"_wctomb_s_l");
    }
    public static int _wctomb_s_l ( Addressable _SizeConverted,  Addressable _MbCh,  long _SizeInBytes,  short _WCh,  Addressable _Locale) {
        var mh$ = _wctomb_s_l$MH();
        try {
            return (int)mh$.invokeExact(_SizeConverted, _MbCh, _SizeInBytes, _WCh, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs_s$MH() {
        return RuntimeHelper.requireNonNull(constants$777.wcstombs_s$MH,"wcstombs_s");
    }
    public static int wcstombs_s ( Addressable _PtNumOfCharConverted,  Addressable _Dst,  long _DstSizeInBytes,  Addressable _Src,  long _MaxCountInBytes) {
        var mh$ = wcstombs_s$MH();
        try {
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$777.wcstombs$MH,"wcstombs");
    }
    public static long wcstombs ( Addressable _Dest,  Addressable _Source,  long _MaxCount) {
        var mh$ = wcstombs$MH();
        try {
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstombs_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$777._wcstombs_s_l$MH,"_wcstombs_s_l");
    }
    public static int _wcstombs_s_l ( Addressable _PtNumOfCharConverted,  Addressable _Dst,  long _DstSizeInBytes,  Addressable _Src,  long _MaxCountInBytes,  Addressable _Locale) {
        var mh$ = _wcstombs_s_l$MH();
        try {
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstombs_l$MH() {
        return RuntimeHelper.requireNonNull(constants$777._wcstombs_l$MH,"_wcstombs_l");
    }
    public static long _wcstombs_l ( Addressable _Dest,  Addressable _Source,  long _MaxCount,  Addressable _Locale) {
        var mh$ = _wcstombs_l$MH();
        try {
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fullpath$MH() {
        return RuntimeHelper.requireNonNull(constants$777._fullpath$MH,"_fullpath");
    }
    public static MemoryAddress _fullpath ( Addressable _Buffer,  Addressable _Path,  long _BufferCount) {
        var mh$ = _fullpath$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Buffer, _Path, _BufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _makepath_s$MH() {
        return RuntimeHelper.requireNonNull(constants$777._makepath_s$MH,"_makepath_s");
    }
    public static int _makepath_s ( Addressable _Buffer,  long _BufferCount,  Addressable _Drive,  Addressable _Dir,  Addressable _Filename,  Addressable _Ext) {
        var mh$ = _makepath_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _makepath$MH() {
        return RuntimeHelper.requireNonNull(constants$778._makepath$MH,"_makepath");
    }
    public static void _makepath ( Addressable _Buffer,  Addressable _Drive,  Addressable _Dir,  Addressable _Filename,  Addressable _Ext) {
        var mh$ = _makepath$MH();
        try {
            mh$.invokeExact(_Buffer, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _splitpath$MH() {
        return RuntimeHelper.requireNonNull(constants$778._splitpath$MH,"_splitpath");
    }
    public static void _splitpath ( Addressable _FullPath,  Addressable _Drive,  Addressable _Dir,  Addressable _Filename,  Addressable _Ext) {
        var mh$ = _splitpath$MH();
        try {
            mh$.invokeExact(_FullPath, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _splitpath_s$MH() {
        return RuntimeHelper.requireNonNull(constants$778._splitpath_s$MH,"_splitpath_s");
    }
    public static int _splitpath_s ( Addressable _FullPath,  Addressable _Drive,  long _DriveCount,  Addressable _Dir,  long _DirCount,  Addressable _Filename,  long _FilenameCount,  Addressable _Ext,  long _ExtCount) {
        var mh$ = _splitpath_s$MH();
        try {
            return (int)mh$.invokeExact(_FullPath, _Drive, _DriveCount, _Dir, _DirCount, _Filename, _FilenameCount, _Ext, _ExtCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$778.getenv_s$MH,"getenv_s");
    }
    public static int getenv_s ( Addressable _RequiredCount,  Addressable _Buffer,  long _BufferCount,  Addressable _VarName) {
        var mh$ = getenv_s$MH();
        try {
            return (int)mh$.invokeExact(_RequiredCount, _Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p___argc$MH() {
        return RuntimeHelper.requireNonNull(constants$778.__p___argc$MH,"__p___argc");
    }
    public static MemoryAddress __p___argc () {
        var mh$ = __p___argc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p___argv$MH() {
        return RuntimeHelper.requireNonNull(constants$778.__p___argv$MH,"__p___argv");
    }
    public static MemoryAddress __p___argv () {
        var mh$ = __p___argv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p___wargv$MH() {
        return RuntimeHelper.requireNonNull(constants$779.__p___wargv$MH,"__p___wargv");
    }
    public static MemoryAddress __p___wargv () {
        var mh$ = __p___wargv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p__environ$MH() {
        return RuntimeHelper.requireNonNull(constants$779.__p__environ$MH,"__p__environ");
    }
    public static MemoryAddress __p__environ () {
        var mh$ = __p__environ$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __p__wenviron$MH() {
        return RuntimeHelper.requireNonNull(constants$779.__p__wenviron$MH,"__p__wenviron");
    }
    public static MemoryAddress __p__wenviron () {
        var mh$ = __p__wenviron$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$779.getenv$MH,"getenv");
    }
    public static MemoryAddress getenv ( Addressable _VarName) {
        var mh$ = getenv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _dupenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$779._dupenv_s$MH,"_dupenv_s");
    }
    public static int _dupenv_s ( Addressable _Buffer,  Addressable _BufferCount,  Addressable _VarName) {
        var mh$ = _dupenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$779.system$MH,"system");
    }
    public static int system ( Addressable _Command) {
        var mh$ = system$MH();
        try {
            return (int)mh$.invokeExact(_Command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$780._putenv$MH,"_putenv");
    }
    public static int _putenv ( Addressable _EnvString) {
        var mh$ = _putenv$MH();
        try {
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _putenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$780._putenv_s$MH,"_putenv_s");
    }
    public static int _putenv_s ( Addressable _Name,  Addressable _Value) {
        var mh$ = _putenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Name, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _searchenv_s$MH() {
        return RuntimeHelper.requireNonNull(constants$780._searchenv_s$MH,"_searchenv_s");
    }
    public static int _searchenv_s ( Addressable _Filename,  Addressable _VarName,  Addressable _Buffer,  long _BufferCount) {
        var mh$ = _searchenv_s$MH();
        try {
            return (int)mh$.invokeExact(_Filename, _VarName, _Buffer, _BufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _searchenv$MH() {
        return RuntimeHelper.requireNonNull(constants$780._searchenv$MH,"_searchenv");
    }
    public static void _searchenv ( Addressable _Filename,  Addressable _VarName,  Addressable _Buffer) {
        var mh$ = _searchenv$MH();
        try {
            mh$.invokeExact(_Filename, _VarName, _Buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _seterrormode$MH() {
        return RuntimeHelper.requireNonNull(constants$780._seterrormode$MH,"_seterrormode");
    }
    public static void _seterrormode ( int _Mode) {
        var mh$ = _seterrormode$MH();
        try {
            mh$.invokeExact(_Mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _beep$MH() {
        return RuntimeHelper.requireNonNull(constants$780._beep$MH,"_beep");
    }
    public static void _beep ( int _Frequency,  int _Duration) {
        var mh$ = _beep$MH();
        try {
            mh$.invokeExact(_Frequency, _Duration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$781._sleep$MH,"_sleep");
    }
    public static void _sleep ( int _Duration) {
        var mh$ = _sleep$MH();
        try {
            mh$.invokeExact(_Duration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$781.ecvt$MH,"ecvt");
    }
    public static MemoryAddress ecvt ( double _Value,  int _DigitCount,  Addressable _PtDec,  Addressable _PtSign) {
        var mh$ = ecvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$781.fcvt$MH,"fcvt");
    }
    public static MemoryAddress fcvt ( double _Value,  int _FractionalDigitCount,  Addressable _PtDec,  Addressable _PtSign) {
        var mh$ = fcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$781.gcvt$MH,"gcvt");
    }
    public static MemoryAddress gcvt ( double _Value,  int _DigitCount,  Addressable _DstBuf) {
        var mh$ = gcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _DigitCount, _DstBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle itoa$MH() {
        return RuntimeHelper.requireNonNull(constants$781.itoa$MH,"itoa");
    }
    public static MemoryAddress itoa ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = itoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ltoa$MH() {
        return RuntimeHelper.requireNonNull(constants$781.ltoa$MH,"ltoa");
    }
    public static MemoryAddress ltoa ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = ltoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle swab$MH() {
        return RuntimeHelper.requireNonNull(constants$782.swab$MH,"swab");
    }
    public static void swab ( Addressable _Buf1,  Addressable _Buf2,  int _SizeInBytes) {
        var mh$ = swab$MH();
        try {
            mh$.invokeExact(_Buf1, _Buf2, _SizeInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ultoa$MH() {
        return RuntimeHelper.requireNonNull(constants$782.ultoa$MH,"ultoa");
    }
    public static MemoryAddress ultoa ( int _Value,  Addressable _Buffer,  int _Radix) {
        var mh$ = ultoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$782.putenv$MH,"putenv");
    }
    public static int putenv ( Addressable _EnvString) {
        var mh$ = putenv$MH();
        try {
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle onexit$MH() {
        return RuntimeHelper.requireNonNull(constants$782.onexit$MH,"onexit");
    }
    public static MemoryAddress onexit ( Addressable _Func) {
        var mh$ = onexit$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(_Func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __glutInitWithExit$MH() {
        return RuntimeHelper.requireNonNull(constants$783.__glutInitWithExit$MH,"__glutInitWithExit");
    }
    public static void __glutInitWithExit ( Addressable argcp,  Addressable argv,  Addressable exitfunc) {
        var mh$ = __glutInitWithExit$MH();
        try {
            mh$.invokeExact(argcp, argv, exitfunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __glutCreateWindowWithExit$MH() {
        return RuntimeHelper.requireNonNull(constants$783.__glutCreateWindowWithExit$MH,"__glutCreateWindowWithExit");
    }
    public static int __glutCreateWindowWithExit ( Addressable title,  Addressable exitfunc) {
        var mh$ = __glutCreateWindowWithExit$MH();
        try {
            return (int)mh$.invokeExact(title, exitfunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __glutCreateMenuWithExit$MH() {
        return RuntimeHelper.requireNonNull(constants$784.__glutCreateMenuWithExit$MH,"__glutCreateMenuWithExit");
    }
    public static int __glutCreateMenuWithExit ( Addressable func,  Addressable exitfunc) {
        var mh$ = __glutCreateMenuWithExit$MH();
        try {
            return (int)mh$.invokeExact(func, exitfunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutInit_ATEXIT_HACK$MH() {
        return RuntimeHelper.requireNonNull(constants$784.glutInit_ATEXIT_HACK$MH,"glutInit_ATEXIT_HACK");
    }
    public static void glutInit_ATEXIT_HACK ( Addressable argcp,  Addressable argv) {
        var mh$ = glutInit_ATEXIT_HACK$MH();
        try {
            mh$.invokeExact(argcp, argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutCreateWindow_ATEXIT_HACK$MH() {
        return RuntimeHelper.requireNonNull(constants$784.glutCreateWindow_ATEXIT_HACK$MH,"glutCreateWindow_ATEXIT_HACK");
    }
    public static int glutCreateWindow_ATEXIT_HACK ( Addressable title) {
        var mh$ = glutCreateWindow_ATEXIT_HACK$MH();
        try {
            return (int)mh$.invokeExact(title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutCreateMenu_ATEXIT_HACK$MH() {
        return RuntimeHelper.requireNonNull(constants$785.glutCreateMenu_ATEXIT_HACK$MH,"glutCreateMenu_ATEXIT_HACK");
    }
    public static int glutCreateMenu_ATEXIT_HACK ( Addressable func) {
        var mh$ = glutCreateMenu_ATEXIT_HACK$MH();
        try {
            return (int)mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int WINAPI_PARTITION_SERVER() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_WINTRUST() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_WEBSERVICES() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_EVENTLOGSERVICE() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_VHD() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_PERFCOUNTER() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_SECURESTARTUP() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_REMOTEFS() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_BOOTABLESKU() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_CMDTOOLS() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_DISM() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_CORESETUP() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_APPRUNTIME() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_ESENT() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_WINMGMT() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_WNV() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_CLUSTER() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_VSS() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_TRAFFIC() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_ISCSI() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_STORAGE() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_MPSSVC() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_APPXDEPLOYMENT() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_WER() {
        return (int)0L;
    }
    public static int WINAPI_FAMILY_APP() {
        return (int)2L;
    }
    public static int WINAPI_FAMILY() {
        return (int)100L;
    }
    public static int WINAPI_PARTITION_DESKTOP() {
        return (int)1L;
    }
    public static int WINAPI_PARTITION_APP() {
        return (int)1L;
    }
    public static int WINAPI_PARTITION_PC_APP() {
        return (int)1L;
    }
    public static int WINAPI_PARTITION_PHONE_APP() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_GAMES() {
        return (int)1L;
    }
    public static int WINAPI_PARTITION_SYSTEM() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PHONE() {
        return (int)0L;
    }
    public static int _WIN32_IE_NT4() {
        return (int)512L;
    }
    public static int _WIN32_IE_NT4SP1() {
        return (int)512L;
    }
    public static int _WIN32_IE_NT4SP2() {
        return (int)512L;
    }
    public static int _WIN32_IE_NT4SP3() {
        return (int)770L;
    }
    public static int _WIN32_IE_NT4SP4() {
        return (int)1025L;
    }
    public static int _WIN32_IE_NT4SP5() {
        return (int)1025L;
    }
    public static int _WIN32_IE_NT4SP6() {
        return (int)1280L;
    }
    public static int _WIN32_IE_WIN98() {
        return (int)1025L;
    }
    public static int _WIN32_IE_WIN98SE() {
        return (int)1280L;
    }
    public static int _WIN32_IE_WINME() {
        return (int)1360L;
    }
    public static int _WIN32_IE_WIN2K() {
        return (int)1281L;
    }
    public static int _WIN32_IE_WIN2KSP1() {
        return (int)1281L;
    }
    public static int _WIN32_IE_WIN2KSP2() {
        return (int)1281L;
    }
    public static int _WIN32_IE_WIN2KSP3() {
        return (int)1281L;
    }
    public static int _WIN32_IE_WIN2KSP4() {
        return (int)1281L;
    }
    public static int _WIN32_IE_XP() {
        return (int)1536L;
    }
    public static int _WIN32_IE_XPSP1() {
        return (int)1537L;
    }
    public static int _WIN32_IE_XPSP2() {
        return (int)1539L;
    }
    public static int _WIN32_IE_WS03SP1() {
        return (int)1539L;
    }
    public static int _WIN32_IE_WIN6() {
        return (int)1792L;
    }
    public static int _WIN32_IE_LONGHORN() {
        return (int)1792L;
    }
    public static int _WIN32_IE_WIN7() {
        return (int)2048L;
    }
    public static int _WIN32_IE_WIN8() {
        return (int)2560L;
    }
    public static int _WIN32_IE_WINBLUE() {
        return (int)2560L;
    }
    public static int _WIN32_IE_WINTHRESHOLD() {
        return (int)2560L;
    }
    public static int _WIN32_IE_WIN10() {
        return (int)2560L;
    }
    public static int NTDDI_VISTA() {
        return (int)100663296L;
    }
    public static int NTDDI_VISTASP1() {
        return (int)100663552L;
    }
    public static int NTDDI_VISTASP2() {
        return (int)100663808L;
    }
    public static int NTDDI_VISTASP3() {
        return (int)100664064L;
    }
    public static int NTDDI_VISTASP4() {
        return (int)100664320L;
    }
    public static int NTDDI_LONGHORN() {
        return (int)100663296L;
    }
    public static int NTDDI_WS08() {
        return (int)100663552L;
    }
    public static int NTDDI_WS08SP2() {
        return (int)100663808L;
    }
    public static int NTDDI_WS08SP3() {
        return (int)100664064L;
    }
    public static int NTDDI_WS08SP4() {
        return (int)100664320L;
    }
    public static int WDK_NTDDI_VERSION() {
        return (int)167772171L;
    }
    public static int OSVERSION_MASK() {
        return (int)4294901760L;
    }
    public static int NTDDI_VERSION() {
        return (int)167772171L;
    }
    public static int WINVER() {
        return (int)2560L;
    }
    public static int _VCRUNTIME_DISABLED_WARNINGS() {
        return (int)4514L;
    }
    public static MemoryAddress NULL() {
        return constants$785.NULL$ADDR;
    }
    public static int EXCEPTION_CONTINUE_EXECUTION() {
        return (int)-1L;
    }
    public static int _UCRT_DISABLED_WARNINGS() {
        return (int)4324L;
    }
    public static long _TRUNCATE() {
        return -1L;
    }
    public static long _CRT_SIZE_MAX() {
        return -1L;
    }
    public static MemorySegment __FILEW__() {
        return constants$785.__FILEW__$SEGMENT;
    }
    public static int __STDC_SECURE_LIB__() {
        return (int)200411L;
    }
    public static int __GOT_SECURE_LIB__() {
        return (int)200411L;
    }
    public static short WEOF() {
        return (short)65535L;
    }
    public static int _ALPHA() {
        return (int)259L;
    }
    public static long MAX_NATURAL_ALIGNMENT() {
        return 8L;
    }
    public static long ADDRESS_TAG_BIT() {
        return 4398046511104L;
    }
    public static long MAXUINT_PTR() {
        return -1L;
    }
    public static long MAXINT_PTR() {
        return 9223372036854775807L;
    }
    public static long MININT_PTR() {
        return -9223372036854775808L;
    }
    public static long MAXULONG_PTR() {
        return -1L;
    }
    public static long MAXLONG_PTR() {
        return 9223372036854775807L;
    }
    public static long MINLONG_PTR() {
        return -9223372036854775808L;
    }
    public static int MAXUHALF_PTR() {
        return (int)4294967295L;
    }
    public static int MAXHALF_PTR() {
        return (int)2147483647L;
    }
    public static int MINHALF_PTR() {
        return (int)-2147483648L;
    }
    public static byte MAXUINT8() {
        return (byte)255L;
    }
    public static byte MAXINT8() {
        return (byte)127L;
    }
    public static byte MININT8() {
        return (byte)-128L;
    }
    public static short MAXUINT16() {
        return (short)65535L;
    }
    public static short MAXINT16() {
        return (short)32767L;
    }
    public static short MININT16() {
        return (short)-32768L;
    }
    public static int MAXUINT32() {
        return (int)4294967295L;
    }
    public static int MAXINT32() {
        return (int)2147483647L;
    }
    public static int MININT32() {
        return (int)-2147483648L;
    }
    public static long MAXUINT64() {
        return -1L;
    }
    public static long MAXINT64() {
        return 9223372036854775807L;
    }
    public static long MININT64() {
        return -9223372036854775808L;
    }
    public static int MAXULONG32() {
        return (int)4294967295L;
    }
    public static int MAXLONG32() {
        return (int)2147483647L;
    }
    public static int MINLONG32() {
        return (int)-2147483648L;
    }
    public static long MAXULONG64() {
        return -1L;
    }
    public static long MAXLONG64() {
        return 9223372036854775807L;
    }
    public static long MINLONG64() {
        return -9223372036854775808L;
    }
    public static long MAXULONGLONG() {
        return -1L;
    }
    public static long MINLONGLONG() {
        return -9223372036854775808L;
    }
    public static long MAXSIZE_T() {
        return -1L;
    }
    public static long MAXSSIZE_T() {
        return 9223372036854775807L;
    }
    public static long MINSSIZE_T() {
        return -9223372036854775808L;
    }
    public static int MAXUINT() {
        return (int)4294967295L;
    }
    public static int MAXINT() {
        return (int)2147483647L;
    }
    public static int MININT() {
        return (int)-2147483648L;
    }
    public static int MAXDWORD32() {
        return (int)4294967295L;
    }
    public static long MAXDWORD64() {
        return -1L;
    }
    public static int SYSTEM_CACHE_ALIGNMENT_SIZE() {
        return (int)64L;
    }
    public static int UCSCHAR_INVALID_CHARACTER() {
        return (int)4294967295L;
    }
    public static int MIN_UCSCHAR() {
        return (int)0L;
    }
    public static int MAX_UCSCHAR() {
        return (int)1114111L;
    }
    public static int MAXIMUM_PROCESSORS() {
        return (int)64L;
    }
    public static int ERROR_SEVERITY_WARNING() {
        return (int)2147483648L;
    }
    public static int ERROR_SEVERITY_ERROR() {
        return (int)3221225472L;
    }
    public static long MAXLONGLONG() {
        return 9223372036854775807L;
    }
    public static byte ANSI_NULL() {
        return (byte)0L;
    }
    public static short UNICODE_NULL() {
        return (short)0L;
    }
    public static short UNICODE_STRING_MAX_BYTES() {
        return (short)65534L;
    }
    public static int UNICODE_STRING_MAX_CHARS() {
        return (int)32767L;
    }
    public static int EDEADLOCK() {
        return (int)36L;
    }
    public static int _NLSCMPERROR() {
        return (int)2147483647L;
    }
    public static int MINLONG() {
        return (int)2147483648L;
    }
    public static int MAXDWORD() {
        return (int)4294967295L;
    }
    public static int VER_SERVER_NT() {
        return (int)2147483648L;
    }
    public static int PRODUCT_UNLICENSED() {
        return (int)2882382797L;
    }
    public static int LANG_SYSTEM_DEFAULT() {
        return (int)2048L;
    }
    public static int LANG_USER_DEFAULT() {
        return (int)1024L;
    }
    public static int LOCALE_SYSTEM_DEFAULT() {
        return (int)2048L;
    }
    public static int LOCALE_USER_DEFAULT() {
        return (int)1024L;
    }
    public static int LOCALE_CUSTOM_DEFAULT() {
        return (int)3072L;
    }
    public static int LOCALE_CUSTOM_UNSPECIFIED() {
        return (int)4096L;
    }
    public static int LOCALE_CUSTOM_UI_DEFAULT() {
        return (int)5120L;
    }
    public static int LOCALE_NEUTRAL() {
        return (int)0L;
    }
    public static int LOCALE_INVARIANT() {
        return (int)127L;
    }
    public static int LOCALE_UNASSIGNED_LCID() {
        return (int)4096L;
    }
    public static int STATUS_WAIT_0() {
        return (int)0L;
    }
    public static int STATUS_ABANDONED_WAIT_0() {
        return (int)128L;
    }
    public static int STATUS_USER_APC() {
        return (int)192L;
    }
    public static int STATUS_TIMEOUT() {
        return (int)258L;
    }
    public static int STATUS_PENDING() {
        return (int)259L;
    }
    public static int DBG_EXCEPTION_HANDLED() {
        return (int)65537L;
    }
    public static int DBG_CONTINUE() {
        return (int)65538L;
    }
    public static int STATUS_SEGMENT_NOTIFICATION() {
        return (int)1073741829L;
    }
    public static int STATUS_FATAL_APP_EXIT() {
        return (int)1073741845L;
    }
    public static int DBG_REPLY_LATER() {
        return (int)1073807361L;
    }
    public static int DBG_TERMINATE_THREAD() {
        return (int)1073807363L;
    }
    public static int DBG_TERMINATE_PROCESS() {
        return (int)1073807364L;
    }
    public static int DBG_CONTROL_C() {
        return (int)1073807365L;
    }
    public static int DBG_PRINTEXCEPTION_C() {
        return (int)1073807366L;
    }
    public static int DBG_RIPEXCEPTION() {
        return (int)1073807367L;
    }
    public static int DBG_CONTROL_BREAK() {
        return (int)1073807368L;
    }
    public static int DBG_COMMAND_EXCEPTION() {
        return (int)1073807369L;
    }
    public static int DBG_PRINTEXCEPTION_WIDE_C() {
        return (int)1073807370L;
    }
    public static int STATUS_GUARD_PAGE_VIOLATION() {
        return (int)2147483649L;
    }
    public static int STATUS_DATATYPE_MISALIGNMENT() {
        return (int)2147483650L;
    }
    public static int STATUS_BREAKPOINT() {
        return (int)2147483651L;
    }
    public static int STATUS_SINGLE_STEP() {
        return (int)2147483652L;
    }
}


