// Generated by jextract

package opengl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _DISPATCHER_CONTEXT_ARM64 {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("ControlPc"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("ImageBase"),
        Constants$root.C_POINTER$LAYOUT.withName("FunctionEntry"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("EstablisherFrame"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("TargetPc"),
        Constants$root.C_POINTER$LAYOUT.withName("ContextRecord"),
        Constants$root.C_POINTER$LAYOUT.withName("LanguageHandler"),
        Constants$root.C_POINTER$LAYOUT.withName("HandlerData"),
        Constants$root.C_POINTER$LAYOUT.withName("HistoryTable"),
        Constants$root.C_LONG$LAYOUT.withName("ScopeIndex"),
        Constants$root.C_CHAR$LAYOUT.withName("ControlPcIsUnwound"),
        MemoryLayout.paddingLayout(24),
        Constants$root.C_POINTER$LAYOUT.withName("NonVolatileRegisters")
    ).withName("_DISPATCHER_CONTEXT_ARM64");
    public static MemoryLayout $LAYOUT() {
        return _DISPATCHER_CONTEXT_ARM64.$struct$LAYOUT;
    }
    static final VarHandle ControlPc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ControlPc"));
    public static VarHandle ControlPc$VH() {
        return _DISPATCHER_CONTEXT_ARM64.ControlPc$VH;
    }
    public static long ControlPc$get(MemorySegment seg) {
        return (long)_DISPATCHER_CONTEXT_ARM64.ControlPc$VH.get(seg);
    }
    public static void ControlPc$set( MemorySegment seg, long x) {
        _DISPATCHER_CONTEXT_ARM64.ControlPc$VH.set(seg, x);
    }
    public static long ControlPc$get(MemorySegment seg, long index) {
        return (long)_DISPATCHER_CONTEXT_ARM64.ControlPc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ControlPc$set(MemorySegment seg, long index, long x) {
        _DISPATCHER_CONTEXT_ARM64.ControlPc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ImageBase$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ImageBase"));
    public static VarHandle ImageBase$VH() {
        return _DISPATCHER_CONTEXT_ARM64.ImageBase$VH;
    }
    public static long ImageBase$get(MemorySegment seg) {
        return (long)_DISPATCHER_CONTEXT_ARM64.ImageBase$VH.get(seg);
    }
    public static void ImageBase$set( MemorySegment seg, long x) {
        _DISPATCHER_CONTEXT_ARM64.ImageBase$VH.set(seg, x);
    }
    public static long ImageBase$get(MemorySegment seg, long index) {
        return (long)_DISPATCHER_CONTEXT_ARM64.ImageBase$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ImageBase$set(MemorySegment seg, long index, long x) {
        _DISPATCHER_CONTEXT_ARM64.ImageBase$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FunctionEntry$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FunctionEntry"));
    public static VarHandle FunctionEntry$VH() {
        return _DISPATCHER_CONTEXT_ARM64.FunctionEntry$VH;
    }
    public static MemoryAddress FunctionEntry$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_DISPATCHER_CONTEXT_ARM64.FunctionEntry$VH.get(seg);
    }
    public static void FunctionEntry$set( MemorySegment seg, MemoryAddress x) {
        _DISPATCHER_CONTEXT_ARM64.FunctionEntry$VH.set(seg, x);
    }
    public static MemoryAddress FunctionEntry$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_DISPATCHER_CONTEXT_ARM64.FunctionEntry$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FunctionEntry$set(MemorySegment seg, long index, MemoryAddress x) {
        _DISPATCHER_CONTEXT_ARM64.FunctionEntry$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle EstablisherFrame$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EstablisherFrame"));
    public static VarHandle EstablisherFrame$VH() {
        return _DISPATCHER_CONTEXT_ARM64.EstablisherFrame$VH;
    }
    public static long EstablisherFrame$get(MemorySegment seg) {
        return (long)_DISPATCHER_CONTEXT_ARM64.EstablisherFrame$VH.get(seg);
    }
    public static void EstablisherFrame$set( MemorySegment seg, long x) {
        _DISPATCHER_CONTEXT_ARM64.EstablisherFrame$VH.set(seg, x);
    }
    public static long EstablisherFrame$get(MemorySegment seg, long index) {
        return (long)_DISPATCHER_CONTEXT_ARM64.EstablisherFrame$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EstablisherFrame$set(MemorySegment seg, long index, long x) {
        _DISPATCHER_CONTEXT_ARM64.EstablisherFrame$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TargetPc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TargetPc"));
    public static VarHandle TargetPc$VH() {
        return _DISPATCHER_CONTEXT_ARM64.TargetPc$VH;
    }
    public static long TargetPc$get(MemorySegment seg) {
        return (long)_DISPATCHER_CONTEXT_ARM64.TargetPc$VH.get(seg);
    }
    public static void TargetPc$set( MemorySegment seg, long x) {
        _DISPATCHER_CONTEXT_ARM64.TargetPc$VH.set(seg, x);
    }
    public static long TargetPc$get(MemorySegment seg, long index) {
        return (long)_DISPATCHER_CONTEXT_ARM64.TargetPc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TargetPc$set(MemorySegment seg, long index, long x) {
        _DISPATCHER_CONTEXT_ARM64.TargetPc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ContextRecord$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ContextRecord"));
    public static VarHandle ContextRecord$VH() {
        return _DISPATCHER_CONTEXT_ARM64.ContextRecord$VH;
    }
    public static MemoryAddress ContextRecord$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_DISPATCHER_CONTEXT_ARM64.ContextRecord$VH.get(seg);
    }
    public static void ContextRecord$set( MemorySegment seg, MemoryAddress x) {
        _DISPATCHER_CONTEXT_ARM64.ContextRecord$VH.set(seg, x);
    }
    public static MemoryAddress ContextRecord$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_DISPATCHER_CONTEXT_ARM64.ContextRecord$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ContextRecord$set(MemorySegment seg, long index, MemoryAddress x) {
        _DISPATCHER_CONTEXT_ARM64.ContextRecord$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LanguageHandler$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LanguageHandler"));
    public static VarHandle LanguageHandler$VH() {
        return _DISPATCHER_CONTEXT_ARM64.LanguageHandler$VH;
    }
    public static MemoryAddress LanguageHandler$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_DISPATCHER_CONTEXT_ARM64.LanguageHandler$VH.get(seg);
    }
    public static void LanguageHandler$set( MemorySegment seg, MemoryAddress x) {
        _DISPATCHER_CONTEXT_ARM64.LanguageHandler$VH.set(seg, x);
    }
    public static MemoryAddress LanguageHandler$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_DISPATCHER_CONTEXT_ARM64.LanguageHandler$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LanguageHandler$set(MemorySegment seg, long index, MemoryAddress x) {
        _DISPATCHER_CONTEXT_ARM64.LanguageHandler$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PEXCEPTION_ROUTINE LanguageHandler (MemorySegment segment, MemorySession session) {
        return PEXCEPTION_ROUTINE.ofAddress(LanguageHandler$get(segment), session);
    }
    static final VarHandle HandlerData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("HandlerData"));
    public static VarHandle HandlerData$VH() {
        return _DISPATCHER_CONTEXT_ARM64.HandlerData$VH;
    }
    public static MemoryAddress HandlerData$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_DISPATCHER_CONTEXT_ARM64.HandlerData$VH.get(seg);
    }
    public static void HandlerData$set( MemorySegment seg, MemoryAddress x) {
        _DISPATCHER_CONTEXT_ARM64.HandlerData$VH.set(seg, x);
    }
    public static MemoryAddress HandlerData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_DISPATCHER_CONTEXT_ARM64.HandlerData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HandlerData$set(MemorySegment seg, long index, MemoryAddress x) {
        _DISPATCHER_CONTEXT_ARM64.HandlerData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle HistoryTable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("HistoryTable"));
    public static VarHandle HistoryTable$VH() {
        return _DISPATCHER_CONTEXT_ARM64.HistoryTable$VH;
    }
    public static MemoryAddress HistoryTable$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_DISPATCHER_CONTEXT_ARM64.HistoryTable$VH.get(seg);
    }
    public static void HistoryTable$set( MemorySegment seg, MemoryAddress x) {
        _DISPATCHER_CONTEXT_ARM64.HistoryTable$VH.set(seg, x);
    }
    public static MemoryAddress HistoryTable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_DISPATCHER_CONTEXT_ARM64.HistoryTable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HistoryTable$set(MemorySegment seg, long index, MemoryAddress x) {
        _DISPATCHER_CONTEXT_ARM64.HistoryTable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ScopeIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ScopeIndex"));
    public static VarHandle ScopeIndex$VH() {
        return _DISPATCHER_CONTEXT_ARM64.ScopeIndex$VH;
    }
    public static int ScopeIndex$get(MemorySegment seg) {
        return (int)_DISPATCHER_CONTEXT_ARM64.ScopeIndex$VH.get(seg);
    }
    public static void ScopeIndex$set( MemorySegment seg, int x) {
        _DISPATCHER_CONTEXT_ARM64.ScopeIndex$VH.set(seg, x);
    }
    public static int ScopeIndex$get(MemorySegment seg, long index) {
        return (int)_DISPATCHER_CONTEXT_ARM64.ScopeIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ScopeIndex$set(MemorySegment seg, long index, int x) {
        _DISPATCHER_CONTEXT_ARM64.ScopeIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ControlPcIsUnwound$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ControlPcIsUnwound"));
    public static VarHandle ControlPcIsUnwound$VH() {
        return _DISPATCHER_CONTEXT_ARM64.ControlPcIsUnwound$VH;
    }
    public static byte ControlPcIsUnwound$get(MemorySegment seg) {
        return (byte)_DISPATCHER_CONTEXT_ARM64.ControlPcIsUnwound$VH.get(seg);
    }
    public static void ControlPcIsUnwound$set( MemorySegment seg, byte x) {
        _DISPATCHER_CONTEXT_ARM64.ControlPcIsUnwound$VH.set(seg, x);
    }
    public static byte ControlPcIsUnwound$get(MemorySegment seg, long index) {
        return (byte)_DISPATCHER_CONTEXT_ARM64.ControlPcIsUnwound$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ControlPcIsUnwound$set(MemorySegment seg, long index, byte x) {
        _DISPATCHER_CONTEXT_ARM64.ControlPcIsUnwound$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NonVolatileRegisters$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NonVolatileRegisters"));
    public static VarHandle NonVolatileRegisters$VH() {
        return _DISPATCHER_CONTEXT_ARM64.NonVolatileRegisters$VH;
    }
    public static MemoryAddress NonVolatileRegisters$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_DISPATCHER_CONTEXT_ARM64.NonVolatileRegisters$VH.get(seg);
    }
    public static void NonVolatileRegisters$set( MemorySegment seg, MemoryAddress x) {
        _DISPATCHER_CONTEXT_ARM64.NonVolatileRegisters$VH.set(seg, x);
    }
    public static MemoryAddress NonVolatileRegisters$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_DISPATCHER_CONTEXT_ARM64.NonVolatileRegisters$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NonVolatileRegisters$set(MemorySegment seg, long index, MemoryAddress x) {
        _DISPATCHER_CONTEXT_ARM64.NonVolatileRegisters$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


