// Generated by jextract

package opengl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PTP_WIN32_IO_CALLBACK {

    void apply(java.lang.foreign.MemoryAddress Instance, java.lang.foreign.MemoryAddress Context, java.lang.foreign.MemoryAddress Overlapped, int IoResult, long NumberOfBytesTransferred, java.lang.foreign.MemoryAddress Io);
    static MemorySegment allocate(PTP_WIN32_IO_CALLBACK fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PTP_WIN32_IO_CALLBACK.class, fi, constants$217.PTP_WIN32_IO_CALLBACK$FUNC, session);
    }
    static PTP_WIN32_IO_CALLBACK ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _Instance, java.lang.foreign.MemoryAddress _Context, java.lang.foreign.MemoryAddress _Overlapped, int _IoResult, long _NumberOfBytesTransferred, java.lang.foreign.MemoryAddress _Io) -> {
            try {
                constants$218.PTP_WIN32_IO_CALLBACK$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_Instance, (java.lang.foreign.Addressable)_Context, (java.lang.foreign.Addressable)_Overlapped, _IoResult, _NumberOfBytesTransferred, (java.lang.foreign.Addressable)_Io);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


